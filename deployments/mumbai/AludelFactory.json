{
  "address": "0xc2008d015390019d893d0340c916a1079c73e2b9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AludelAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AludelNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTemplate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProgramAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TemplateAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TemplateDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TemplateNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "program",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "ProgramAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "program",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "ProgramChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "program",
          "type": "address"
        }
      ],
      "name": "ProgramDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "TemplateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        }
      ],
      "name": "TemplateUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "program",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "stakingTokenUrl",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        }
      ],
      "name": "addProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        }
      ],
      "name": "addTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "program",
          "type": "address"
        }
      ],
      "name": "delistProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "getTemplate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "listed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "disabled",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct AludelFactory.TemplateData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isAludel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "stakingTokenUrl",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vaultFactory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "bonusTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "launch",
      "outputs": [
        {
          "internalType": "address",
          "name": "aludel",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "program",
          "type": "address"
        }
      ],
      "name": "programs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "template",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stakingTokenUrl",
              "type": "string"
            }
          ],
          "internalType": "struct AludelFactory.ProgramData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "setFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "program",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newUrl",
          "type": "string"
        }
      ],
      "name": "updateProgram",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "template",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        }
      ],
      "name": "updateTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3f98509678cee7842aafd55be2d673ce31e02ecb596b93da26604c54288df29",
  "receipt": {
    "to": null,
    "from": "0x844eab6d943b1db987786a2469d7a0bccd38dddc",
    "contractAddress": "0xc2008d015390019d893d0340c916a1079c73e2b9",
    "transactionIndex": "0x10",
    "gasUsed": "0x254c82",
    "logsBloom": "0x
    "blockHash": "0xb4b97fcbb8fb01945d6cbfa6bbe29daf907e06aaa54353851a40d9b067709d70",
    "transactionHash": "0xe3f98509678cee7842aafd55be2d673ce31e02ecb596b93da26604c54288df29",
    "logs": [
      {
        "address": "0xc2008d015390019d893d0340c916a1079c73e2b9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000844eab6d943b1db987786a2469d7a0bccd38dddc"
        ],
        "data": "0x",
        "blockNumber": "0x1b6c1c9",
        "transactionHash": "0xe3f98509678cee7842aafd55be2d673ce31e02ecb596b93da26604c54288df29",
        "transactionIndex": "0x10",
        "blockHash": "0xb4b97fcbb8fb01945d6cbfa6bbe29daf907e06aaa54353851a40d9b067709d70",
        "logIndex": "0x69",
        "removed": false
      },
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000844eab6d943b1db987786a2469d7a0bccd38dddc",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001d7bb6bd038d80000000000000000000000000000000000000000000000000077657ced1d045f70000000000000000000000000000000000000000000016f6b9f9762b04bfbf090000000000000000000000000000000000000000000000000758dc1814ccb8770000000000000000000000000000000000000000000016f6ba16f1e1c1c34c89",
        "blockNumber": "0x1b6c1c9",
        "transactionHash": "0xe3f98509678cee7842aafd55be2d673ce31e02ecb596b93da26604c54288df29",
        "transactionIndex": "0x10",
        "blockHash": "0xb4b97fcbb8fb01945d6cbfa6bbe29daf907e06aaa54353851a40d9b067709d70",
        "logIndex": "0x6a",
        "removed": false
      }
    ],
    "blockNumber": "0x1b6c1c9",
    "cumulativeGasUsed": "0x5958d8",
    "status": "0x1"
  },
  "args": [
    "0x844eAb6D943B1Db987786a2469D7A0bCCd38ddDc",
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "88e0d896de96a01028c74f4e22f8120f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AludelAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AludelNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTemplate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProgramAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProgramAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProgramChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"ProgramDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"TemplateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"TemplateUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stakingTokenUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"}],\"name\":\"addProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"addTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"delistProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"getTemplate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct AludelFactory.TemplateData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAludel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stakingTokenUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vaultFactory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"bonusTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"aludel\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"}],\"name\":\"programs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stakingTokenUrl\",\"type\":\"string\"}],\"internalType\":\"struct AludelFactory.ProgramData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"setFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"program\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"updateProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"updateTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ProgramAdded(address,string,string)\":{\"details\":\"emitted when a program's (deployed via the factory or preexisting) is created\"},\"ProgramChanged(address,string,string)\":{\"details\":\"emitted when a program's (deployed via the factory or preexisting)\"},\"ProgramDelisted(address)\":{\"details\":\"emitted when a program is delisted\"},\"TemplateAdded(address)\":{\"details\":\"emitted when a new template is added\"},\"TemplateUpdated(address,bool)\":{\"details\":\"emitted when a template is updated\"}},\"kind\":\"dev\",\"methods\":{\"addProgram(address,address,string,string,uint64)\":{\"details\":\"this allows onchain storage of pre-aludel factory programs\"},\"delistProgram(address)\":{\"details\":\"removes `program` as a registered instance of the factory\"},\"launch(address,string,string,uint64,address,address[],address,bytes)\":{\"params\":{\"data\":\"the calldata to use on the new aludel initialization\",\"name\":\"the string represeting the program's name\",\"stakingTokenUrl\":\"the program's url\",\"template\":\"the number of the template to launch\"},\"returns\":{\"aludel\":\"the new aludel deployed address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateProgram(address,string,string)\":{\"details\":\"to set only one of them, you can pass an empty string as the other and then you'll save some gas\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProgram(address,address,string,string,uint64)\":{\"notice\":\"manually adds a program\"},\"addTemplate(address,string,bool)\":{\"notice\":\"adds a new template to the factory\"},\"delistProgram(address)\":{\"notice\":\"delist a program\"},\"feeBps()\":{\"notice\":\"fee's basis point\"},\"feeRecipient()\":{\"notice\":\"fee's recipient.\"},\"getTemplate(address)\":{\"notice\":\"retrieves a template's data\"},\"launch(address,string,string,uint64,address,address[],address,bytes)\":{\"notice\":\"perform a minimal proxy deploy of a predefined aludel template\"},\"updateProgram(address,string,string)\":{\"notice\":\"updates both name and url of a program at once\"},\"updateTemplate(address,bool)\":{\"notice\":\"sets a template as disable or enabled\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/AludelFactory.sol\":\"AludelFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"alchemist/contracts/factory/ProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nlibrary ProxyFactory {\\n    /* functions */\\n\\n    function _create(address logic, bytes memory data) internal returns (address proxy) {\\n        // deploy clone\\n        proxy = Clones.clone(logic);\\n\\n        // attempt initialization\\n        if (data.length > 0) {\\n            (bool success, bytes memory err) = proxy.call(data);\\n            require(success, string(err));\\n        }\\n\\n        // explicit return\\n        return proxy;\\n    }\\n\\n    function _create2(\\n        address logic,\\n        bytes memory data,\\n        bytes32 salt\\n    ) internal returns (address proxy) {\\n        // deploy clone\\n        proxy = Clones.cloneDeterministic(logic, salt);\\n\\n        // attempt initialization\\n        if (data.length > 0) {\\n            (bool success, bytes memory err) = proxy.call(data);\\n            require(success, string(err));\\n        }\\n\\n        // explicit return\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0xfaa1a85fc89820004a918639fba0ef74c3a2a8ab102bc7c91db5f081b7478b64\",\"license\":\"MIT\"},\"src/contracts/AludelFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport {ProxyFactory} from \\\"alchemist/contracts/factory/ProxyFactory.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IAludel} from \\\"./aludel/IAludel.sol\\\";\\n\\ncontract AludelFactory is Ownable {\\n    struct ProgramData {\\n        address template;\\n        uint64 startTime;\\n        string name;\\n        string stakingTokenUrl;\\n    }\\n    struct TemplateData {\\n        bool listed;\\n        bool disabled;\\n        string name;\\n    }\\n\\n    /// @notice set of template data\\n    mapping(address => TemplateData) private _templates;\\n\\n    /// @notice address => ProgramData mapping\\n    mapping(address => ProgramData) private _programs;\\n\\n    /// @notice fee's recipient.\\n    address public feeRecipient;\\n    /// @notice fee's basis point\\n    uint16 public feeBps;\\n\\n    /// @dev emitted when a new template is added\\n    event TemplateAdded(address template);\\n\\n    /// @dev emitted when a template is updated\\n    event TemplateUpdated(address template, bool disabled);\\n\\n    /// @dev emitted when a program's (deployed via the factory or preexisting)\\n    // url or name is changed\\n    event ProgramChanged(address program, string name, string url);\\n    /// @dev emitted when a program's (deployed via the factory or preexisting)\\n    /// is created\\n    event ProgramAdded(address program, string name, string url);\\n    /// @dev emitted when a program is delisted\\n    event ProgramDelisted(address program);\\n\\n\\n    error InvalidTemplate();\\n    error TemplateNotRegistered();\\n    error TemplateDisabled();\\n    error TemplateAlreadyAdded();\\n    error ProgramAlreadyRegistered();\\n    error AludelNotRegistered();\\n    error AludelAlreadyRegistered();\\n\\n\\n    constructor(address recipient, uint16 bps) {\\n        feeRecipient = recipient;\\n        feeBps = bps;\\n    }\\n\\n    /// @notice perform a minimal proxy deploy of a predefined aludel template\\n    /// @param template the number of the template to launch\\n    /// @param name the string represeting the program's name\\n    /// @param stakingTokenUrl the program's url\\n    /// @param data the calldata to use on the new aludel initialization\\n    /// @return aludel the new aludel deployed address.\\n    function launch(\\n        address template,\\n        string memory name,\\n        string memory stakingTokenUrl,\\n        uint64 startTime,\\n        address vaultFactory,\\n        address[] memory bonusTokens,\\n        address ownerAddress,\\n        bytes calldata data\\n    )\\n        public\\n        returns (address aludel)\\n    {\\n        if (!_templates[template].listed) {\\n            revert TemplateNotRegistered();\\n        }\\n\\n        // reverts when template is disabled\\n        if (_templates[template].disabled) {\\n            revert TemplateDisabled();\\n        }\\n\\n        // create clone and initialize\\n        aludel = ProxyFactory._create(\\n            template,\\n            abi.encodeWithSelector(\\n                IAludel.initialize.selector,\\n                startTime,\\n                ownerAddress,\\n                feeRecipient,\\n                feeBps,\\n                data\\n            )\\n        );\\n\\n        // add program's data to the storage\\n        _programs[aludel] = ProgramData({\\n            startTime: startTime,\\n            template: template,\\n            name: name,\\n            stakingTokenUrl: stakingTokenUrl\\n        });\\n\\n        // register vault factory\\n        IAludel(aludel).registerVaultFactory(vaultFactory);\\n\\n        uint256 bonusTokenLength = bonusTokens.length;\\n\\n        // register bonus tokens\\n        for (uint256 index = 0; index < bonusTokenLength; ++index) {\\n            IAludel(aludel).registerBonusToken(bonusTokens[index]);\\n        }\\n\\n        // transfer ownership\\n        Ownable(aludel).transferOwnership(ownerAddress);\\n        emit ProgramAdded(address(aludel), name, stakingTokenUrl);\\n\\n        // explicit return\\n        return aludel;\\n    }\\n\\n    /* admin */\\n\\n    /// @notice adds a new template to the factory\\n    function addTemplate(address template, string memory name, bool disabled)\\n        public\\n        onlyOwner\\n    {\\n        // cannot add address(0) as template\\n        if (template == address(0)) {\\n            revert InvalidTemplate();\\n        }\\n\\n        // add template to the storage\\n        if (_templates[template].listed) {\\n            revert TemplateAlreadyAdded();\\n        } else {\\n            _templates[template] = TemplateData({\\n                listed: true,\\n                disabled: disabled,\\n                name: name\\n            });\\n        }\\n\\n        // emit event\\n        emit TemplateAdded(template);\\n    }\\n\\n    // @dev function to check if an arbitrary address is a registered program\\n    // @notice programs cant have a null template, so this should be enough to\\n    // know if storage is occupied or not\\n    function isAludel(address who) public view returns(bool){\\n      return _programs[who].template != address(0);\\n    }\\n\\n    /// @notice sets a template as disable or enabled\\n    function updateTemplate(address template, bool disabled)\\n        external\\n        onlyOwner\\n    {\\n        if (!_templates[template].listed) {\\n            revert InvalidTemplate();\\n        }\\n\\n        _templates[template].disabled = disabled;\\n        emit TemplateUpdated(template, disabled);\\n    }\\n\\n    /// @notice updates both name and url of a program at once\\n    /// @dev to set only one of them, you can pass an empty string as the other\\n    /// and then you'll save some gas\\n    function updateProgram(address program, string memory newName,string memory newUrl) external onlyOwner {\\n        // check if the address is already registered\\n        if(!isAludel(program)){\\n          revert AludelNotRegistered();\\n        }\\n        // update storage\\n        if(bytes(newName).length != 0){\\n            _programs[program].name = newName;\\n        }\\n        if(bytes(newUrl).length != 0){\\n            _programs[program].stakingTokenUrl = newUrl;\\n        }\\n        // emit event\\n        emit ProgramChanged(program, newName, newUrl);\\n    }\\n\\n    /// @notice manually adds a program\\n    /// @dev this allows onchain storage of pre-aludel factory programs\\n    function addProgram(\\n        address program,\\n        address template,\\n        string memory name,\\n        string memory stakingTokenUrl,\\n        uint64 startTime\\n    )\\n        external\\n        onlyOwner\\n    {\\n        if(isAludel(program)){\\n          revert AludelAlreadyRegistered();\\n        }\\n        if (!_templates[template].listed) {\\n            revert TemplateNotRegistered();\\n        }\\n\\n        // add program's data to the storage\\n        _programs[program] = ProgramData({\\n            startTime: startTime,\\n            template: template,\\n            name: name,\\n            stakingTokenUrl: stakingTokenUrl\\n        });\\n\\n        emit ProgramAdded(program, name, stakingTokenUrl);\\n\\n    }\\n\\n    /// @notice delist a program\\n    /// @dev removes `program` as a registered instance of the factory\\n    function delistProgram(address program) external onlyOwner {\\n        if(!isAludel(program)){\\n          revert AludelNotRegistered();\\n        }\\n        delete _programs[program];\\n\\n        emit ProgramDelisted(program);\\n    }\\n\\n    /// @notice retrieves a template's data\\n    function getTemplate(address template)\\n        external\\n        view\\n        returns (TemplateData memory)\\n    {\\n        return _templates[template];\\n    }\\n\\n    // @dev the automatically generated getter doesn't return a struct, but\\n    // instead a tuple. I didn't research the gas cost implications of this,\\n    // but it's more readable to access fields by name, so this is used to\\n    // force returning a struct\\n    function programs(address program) external view returns (ProgramData memory) {\\n      return _programs[program];\\n    }\\n\\n    function setFeeRecipient(address newRecipient) external onlyOwner {\\n        feeRecipient = newRecipient;\\n    }\\n\\n    function setFeeBps(uint16 bps) external onlyOwner {\\n        feeBps = bps;\\n    }\\n}\\n\",\"keccak256\":\"0x0c25cdfab01836c45ed94c170bd5e6f5213e43646a88ae8059f4d13ae0c409ad\",\"license\":\"GPL-3.0\"},\"src/contracts/aludel/IAludel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\ninterface IRageQuit {\\n    function rageQuit() external;\\n}\\n\\ninterface IAludel is IRageQuit {\\n    /* admin events */\\n\\n    event AludelCreated(address rewardPool, address powerSwitch);\\n    event AludelFunded(uint256 amount, uint256 duration);\\n    event BonusTokenRegistered(address token);\\n    event VaultFactoryRegistered(address factory);\\n    event VaultFactoryRemoved(address factory);\\n\\n    /* user events */\\n\\n    event Staked(address vault, uint256 amount);\\n    event Unstaked(address vault, uint256 amount);\\n    event RewardClaimed(address vault, address token, uint256 amount);\\n\\n    /* data types */\\n\\n    struct AludelData {\\n        address stakingToken;\\n        address rewardToken;\\n        address rewardPool;\\n        RewardScaling rewardScaling;\\n        uint256 rewardSharesOutstanding;\\n        uint256 totalStake;\\n        uint256 totalStakeUnits;\\n        uint256 lastUpdate;\\n        RewardSchedule[] rewardSchedules;\\n    }\\n\\n    struct RewardSchedule {\\n        uint256 duration;\\n        uint256 start;\\n        uint256 shares;\\n    }\\n\\n    struct VaultData {\\n        uint256 totalStake;\\n        StakeData[] stakes;\\n    }\\n\\n    struct StakeData {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct RewardScaling {\\n        uint256 floor;\\n        uint256 ceiling;\\n        uint256 time;\\n    }\\n\\n    struct RewardOutput {\\n        uint256 lastStakeAmount;\\n        uint256 newStakesCount;\\n        uint256 reward;\\n        uint256 newTotalStakeUnits;\\n    }\\n\\n    function initializeLock() external;\\n\\n    function initialize(\\n        uint64 startTime,\\n        address ownerAddress,\\n        address feeRecipient,\\n        uint16 feeBps,\\n        bytes calldata\\n    ) external;\\n\\n    /* user functions */\\n\\n    function stake(address vault, uint256 amount, bytes calldata permission)\\n        external;\\n\\n    function unstakeAndClaim(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    )\\n        external;\\n\\n    /* admin functions */\\n\\n    function fund(uint256 amount, uint256 duration) external;\\n\\n    function registerVaultFactory(address factory) external;\\n\\n    function removeVaultFactory(address factory) external;\\n\\n    function registerBonusToken(address bonusToken) external;\\n\\n    function rescueTokensFromRewardPool(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external;\\n\\n    /* getter functions */\\n\\n    function getAludelData()\\n        external\\n        view\\n        returns (AludelData memory aludel);\\n\\n    function getBonusTokenSetLength()\\n        external\\n        view\\n        returns (uint256 length);\\n\\n    function getBonusTokenAtIndex(uint256 index)\\n        external\\n        view\\n        returns (address bonusToken);\\n\\n    function getVaultFactorySetLength()\\n        external\\n        view\\n        returns (uint256 length);\\n\\n    function getVaultFactoryAtIndex(uint256 index)\\n        external\\n        view\\n        returns (address factory);\\n\\n    function getVaultData(address vault)\\n        external\\n        view\\n        returns (VaultData memory vaultData);\\n\\n    function isValidAddress(address target)\\n        external\\n        view\\n        returns (bool validity);\\n\\n    function isValidVault(address target)\\n        external\\n        view\\n        returns (bool validity);\\n\\n    function getCurrentUnlockedRewards()\\n        external\\n        view\\n        returns (uint256 unlockedRewards);\\n\\n    function getFutureUnlockedRewards(uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 unlockedRewards);\\n\\n    function getCurrentVaultReward(address vault)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getCurrentStakeReward(address vault, uint256 stakeAmount)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getFutureVaultReward(address vault, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getFutureStakeReward(\\n        address vault,\\n        uint256 stakeAmount,\\n        uint256 timestamp\\n    )\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getCurrentVaultStakeUnits(address vault)\\n        external\\n        view\\n        returns (uint256 stakeUnits);\\n\\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 stakeUnits);\\n\\n    function getCurrentTotalStakeUnits()\\n        external\\n        view\\n        returns (uint256 totalStakeUnits);\\n\\n    function getFutureTotalStakeUnits(uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 totalStakeUnits);\\n\\n    /* pure functions */\\n\\n    function calculateTotalStakeUnits(\\n        StakeData[] memory stakes,\\n        uint256 timestamp\\n    )\\n        external\\n        pure\\n        returns (uint256 totalStakeUnits);\\n\\n    function calculateStakeUnits(uint256 amount, uint256 start, uint256 end)\\n        external\\n        pure\\n        returns (uint256 stakeUnits);\\n\\n    function calculateUnlockedRewards(\\n        RewardSchedule[] memory rewardSchedules,\\n        uint256 rewardBalance,\\n        uint256 sharesOutstanding,\\n        uint256 timestamp\\n    )\\n        external\\n        pure\\n        returns (uint256 unlockedRewards);\\n\\n    function calculateRewardFromStakes(\\n        StakeData[] memory stakes,\\n        uint256 unstakeAmount,\\n        uint256 unlockedRewards,\\n        uint256 totalStakeUnits,\\n        uint256 timestamp,\\n        RewardScaling memory rewardScaling\\n    )\\n        external\\n        pure\\n        returns (RewardOutput memory out);\\n\\n    function calculateReward(\\n        uint256 unlockedRewards,\\n        uint256 stakeAmount,\\n        uint256 stakeDuration,\\n        uint256 totalStakeUnits,\\n        RewardScaling memory rewardScaling\\n    )\\n        external\\n        pure\\n        returns (uint256 reward);\\n}\",\"keccak256\":\"0xe1381bf267c5122bd7298956107a1e6af2755332169e172f4597c264e7e9b855\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002cf038038062002cf08339818101604052810190620000379190620001b7565b620000576200004b620000bd60201b60201c565b620000c560201b60201c565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360146101000a81548161ffff021916908361ffff160217905550505062000279565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200019a8162000245565b92915050565b600081519050620001b1816200025f565b92915050565b60008060408385031215620001d157620001d062000240565b5b6000620001e18582860162000189565b9250506020620001f485828601620001a0565b9150509250929050565b60006200020b8262000220565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200025081620001fe565b81146200025c57600080fd5b50565b6200026a8162000212565b81146200027657600080fd5b50565b612a6780620002896000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636b04648f11610097578063dc5ab6a111610066578063dc5ab6a114610271578063e74b981b146102a1578063f0d6f5d7146102bd578063f2fde38b146102ed57610100565b80636b04648f146101e9578063715018a6146102195780638405e41c146102235780638da5cb5b1461025357610100565b806346904840116100d3578063469048401461017757806356a2caea146101955780635ca94832146101b15780636a785916146101cd57610100565b806301b4aff014610105578063023b1fc91461012157806324a9d8531461013d57806330db76a81461015b575b600080fd5b61011f600480360381019061011a9190611e83565b610309565b005b61013b6004803603810190610136919061219a565b6105c0565b005b61014561065c565b60405161015291906125a4565b60405180910390f35b61017560048036038101906101709190611f36565b610670565b005b61017f610809565b60405161018c919061243a565b60405180910390f35b6101af60048036038101906101aa9190611f76565b61082f565b005b6101cb60048036038101906101c69190611e56565b610a94565b005b6101e760048036038101906101e29190611fe5565b610c2d565b005b61020360048036038101906101fe9190611e56565b610dea565b60405161021091906124c3565b60405180910390f35b610221610e85565b005b61023d60048036038101906102389190611e56565b610f0d565b60405161024a9190612560565b60405180910390f35b61025b611112565b604051610268919061243a565b60405180910390f35b61028b60048036038101906102869190612070565b61113b565b604051610298919061243a565b60405180910390f35b6102bb60048036038101906102b69190611e56565b611601565b005b6102d760048036038101906102d29190611e56565b6116c1565b6040516102e49190612582565b60405180910390f35b61030760048036038101906103029190611e56565b6117e2565b005b6103116118da565b73ffffffffffffffffffffffffffffffffffffffff1661032f611112565b73ffffffffffffffffffffffffffffffffffffffff1614610385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037c90612540565b60405180910390fd5b61038e85610dea565b156103c5576040517fd236bbd800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661044b576040517ffa67494600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff16815260200184815260200183815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600101908051906020019061055d929190611b4e565b50606082015181600201908051906020019061057a929190611b4e565b509050507f7625cecbb2ae4796387f263b7c50f00f7b4c47511590f66f774c31df7a0cf6298584846040516105b19392919061247e565b60405180910390a15050505050565b6105c86118da565b73ffffffffffffffffffffffffffffffffffffffff166105e6611112565b73ffffffffffffffffffffffffffffffffffffffff161461063c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063390612540565b60405180910390fd5b80600360146101000a81548161ffff021916908361ffff16021790555050565b600360149054906101000a900461ffff1681565b6106786118da565b73ffffffffffffffffffffffffffffffffffffffff16610696611112565b73ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e390612540565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610772576040517fec55b8cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055507f7fd0581e1c8047e486d3dd7b5e50e4d692c269a6e40033e4695fc976c1d44fa482826040516107fd929190612455565b60405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108376118da565b73ffffffffffffffffffffffffffffffffffffffff16610855611112565b73ffffffffffffffffffffffffffffffffffffffff16146108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a290612540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610912576040517fec55b8cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610999576040517ff298693e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060600160405280600115158152602001821515815260200183815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001019080519060200190610a54929190611b4e565b509050507f57379043f1fe7de281baa2fa0e053a283787fc4337586d993bd90817fe067eb283604051610a87919061243a565b60405180910390a1505050565b610a9c6118da565b73ffffffffffffffffffffffffffffffffffffffff16610aba611112565b73ffffffffffffffffffffffffffffffffffffffff1614610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790612540565b60405180910390fd5b610b1981610dea565b610b4f576040517feae3b21000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff0219169055600182016000610be19190611bd4565b600282016000610bf19190611bd4565b50507f0f3ba29c7ce69255cfbb72ab7530e4e44a8ee0b4fe878f9ef65712581cc0d67381604051610c22919061243a565b60405180910390a150565b610c356118da565b73ffffffffffffffffffffffffffffffffffffffff16610c53611112565b73ffffffffffffffffffffffffffffffffffffffff1614610ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca090612540565b60405180910390fd5b610cb283610dea565b610ce8576040517feae3b21000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000825114610d495781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190610d47929190611b4e565b505b6000815114610daa5780600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190610da8929190611b4e565b505b7f04b3292478d82302ed07ac3f4d696a59b55002fd23a7c65e03d4f3fc20f8703e838383604051610ddd9392919061247e565b60405180910390a1505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b610e8d6118da565b73ffffffffffffffffffffffffffffffffffffffff16610eab611112565b73ffffffffffffffffffffffffffffffffffffffff1614610f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef890612540565b60405180910390fd5b610f0b60006118e2565b565b610f15611c14565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054610ff79061279d565b80601f01602080910402602001604051908101604052809291908181526020018280546110239061279d565b80156110705780601f1061104557610100808354040283529160200191611070565b820191906000526020600020905b81548152906001019060200180831161105357829003601f168201915b505050505081526020016002820180546110899061279d565b80601f01602080910402602001604051908101604052809291908181526020018280546110b59061279d565b80156111025780601f106110d757610100808354040283529160200191611102565b820191906000526020600020905b8154815290600101906020018083116110e557829003601f168201915b5050505050815250509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166111c3576040517ffa67494600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161561124a576040517f3fa4b39c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113058a6301210a1860e01b8987600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360149054906101000a900461ffff1689896040516024016112a3969594939291906125bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119a6565b905060405180608001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018867ffffffffffffffff1681526020018a815260200189815250600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190611419929190611b4e565b506060820151816002019080519060200190611436929190611b4e565b509050508073ffffffffffffffffffffffffffffffffffffffff16632ee0b2bc876040518263ffffffff1660e01b8152600401611473919061243a565b600060405180830381600087803b15801561148d57600080fd5b505af11580156114a1573d6000803e3d6000fd5b5050505060008551905060005b8181101561154c578273ffffffffffffffffffffffffffffffffffffffff16638e0ef6368883815181106114e5576114e46128a7565b5b60200260200101516040518263ffffffff1660e01b8152600401611509919061243a565b600060405180830381600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b505050508061154590612800565b90506114ae565b508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b866040518263ffffffff1660e01b8152600401611586919061243a565b600060405180830381600087803b1580156115a057600080fd5b505af11580156115b4573d6000803e3d6000fd5b505050507f7625cecbb2ae4796387f263b7c50f00f7b4c47511590f66f774c31df7a0cf629828b8b6040516115eb9392919061247e565b60405180910390a1509998505050505050505050565b6116096118da565b73ffffffffffffffffffffffffffffffffffffffff16611627611112565b73ffffffffffffffffffffffffffffffffffffffff161461167d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167490612540565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6116c9611c5c565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180546117599061279d565b80601f01602080910402602001604051908101604052809291908181526020018280546117859061279d565b80156117d25780601f106117a7576101008083540402835291602001916117d2565b820191906000526020600020905b8154815290600101906020018083116117b557829003601f168201915b5050505050815250509050919050565b6117ea6118da565b73ffffffffffffffffffffffffffffffffffffffff16611808611112565b73ffffffffffffffffffffffffffffffffffffffff161461185e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185590612540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c590612500565b60405180910390fd5b6118d7816118e2565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006119b183611a79565b9050600082511115611a73576000808273ffffffffffffffffffffffffffffffffffffffff16846040516119e59190612423565b6000604051808303816000865af19150503d8060008114611a22576040519150601f19603f3d011682016040523d82523d6000602084013e611a27565b606091505b5091509150818190611a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6691906124de565b60405180910390fd5b5050505b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4090612520565b60405180910390fd5b919050565b828054611b5a9061279d565b90600052602060002090601f016020900481019282611b7c5760008555611bc3565b82601f10611b9557805160ff1916838001178555611bc3565b82800160010185558215611bc3579182015b82811115611bc2578251825591602001919060010190611ba7565b5b509050611bd09190611c81565b5090565b508054611be09061279d565b6000825580601f10611bf25750611c11565b601f016020900490600052602060002090810190611c109190611c81565b5b50565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff16815260200160608152602001606081525090565b6040518060600160405280600015158152602001600015158152602001606081525090565b5b80821115611c9a576000816000905550600101611c82565b5090565b6000611cb1611cac84612640565b61261b565b90508083825260208201905082856020860282011115611cd457611cd361290f565b5b60005b85811015611d045781611cea8882611d50565b845260208401935060208301925050600181019050611cd7565b5050509392505050565b6000611d21611d1c8461266c565b61261b565b905082815260208101848484011115611d3d57611d3c612914565b5b611d4884828561275b565b509392505050565b600081359050611d5f816129d5565b92915050565b600082601f830112611d7a57611d7961290a565b5b8135611d8a848260208601611c9e565b91505092915050565b600081359050611da2816129ec565b92915050565b60008083601f840112611dbe57611dbd61290a565b5b8235905067ffffffffffffffff811115611ddb57611dda612905565b5b602083019150836001820283011115611df757611df661290f565b5b9250929050565b600082601f830112611e1357611e1261290a565b5b8135611e23848260208601611d0e565b91505092915050565b600081359050611e3b81612a03565b92915050565b600081359050611e5081612a1a565b92915050565b600060208284031215611e6c57611e6b61291e565b5b6000611e7a84828501611d50565b91505092915050565b600080600080600060a08688031215611e9f57611e9e61291e565b5b6000611ead88828901611d50565b9550506020611ebe88828901611d50565b945050604086013567ffffffffffffffff811115611edf57611ede612919565b5b611eeb88828901611dfe565b935050606086013567ffffffffffffffff811115611f0c57611f0b612919565b5b611f1888828901611dfe565b9250506080611f2988828901611e41565b9150509295509295909350565b60008060408385031215611f4d57611f4c61291e565b5b6000611f5b85828601611d50565b9250506020611f6c85828601611d93565b9150509250929050565b600080600060608486031215611f8f57611f8e61291e565b5b6000611f9d86828701611d50565b935050602084013567ffffffffffffffff811115611fbe57611fbd612919565b5b611fca86828701611dfe565b9250506040611fdb86828701611d93565b9150509250925092565b600080600060608486031215611ffe57611ffd61291e565b5b600061200c86828701611d50565b935050602084013567ffffffffffffffff81111561202d5761202c612919565b5b61203986828701611dfe565b925050604084013567ffffffffffffffff81111561205a57612059612919565b5b61206686828701611dfe565b9150509250925092565b60008060008060008060008060006101008a8c0312156120935761209261291e565b5b60006120a18c828d01611d50565b99505060208a013567ffffffffffffffff8111156120c2576120c1612919565b5b6120ce8c828d01611dfe565b98505060408a013567ffffffffffffffff8111156120ef576120ee612919565b5b6120fb8c828d01611dfe565b975050606061210c8c828d01611e41565b965050608061211d8c828d01611d50565b95505060a08a013567ffffffffffffffff81111561213e5761213d612919565b5b61214a8c828d01611d65565b94505060c061215b8c828d01611d50565b93505060e08a013567ffffffffffffffff81111561217c5761217b612919565b5b6121888c828d01611da8565b92509250509295985092959850929598565b6000602082840312156121b0576121af61291e565b5b60006121be84828501611e2c565b91505092915050565b6121d0816126f1565b82525050565b6121df816126f1565b82525050565b6121ee81612703565b82525050565b6121fd81612703565b82525050565b600061220f83856126b3565b935061221c83858461275b565b61222583612923565b840190509392505050565b600061223b8261269d565b61224581856126c4565b935061225581856020860161276a565b80840191505092915050565b600061226c826126a8565b61227681856126cf565b935061228681856020860161276a565b61228f81612923565b840191505092915050565b60006122a5826126a8565b6122af81856126e0565b93506122bf81856020860161276a565b6122c881612923565b840191505092915050565b60006122e06026836126e0565b91506122eb82612934565b604082019050919050565b60006123036016836126e0565b915061230e82612983565b602082019050919050565b60006123266020836126e0565b9150612331826129ac565b602082019050919050565b600060808301600083015161235460008601826121c7565b5060208301516123676020860182612405565b506040830151848203604086015261237f8282612261565b915050606083015184820360608601526123998282612261565b9150508091505092915050565b60006060830160008301516123be60008601826121e5565b5060208301516123d160208601826121e5565b50604083015184820360408601526123e98282612261565b9150508091505092915050565b6123ff8161270f565b82525050565b61240e81612747565b82525050565b61241d81612747565b82525050565b600061242f8284612230565b915081905092915050565b600060208201905061244f60008301846121d6565b92915050565b600060408201905061246a60008301856121d6565b61247760208301846121f4565b9392505050565b600060608201905061249360008301866121d6565b81810360208301526124a5818561229a565b905081810360408301526124b9818461229a565b9050949350505050565b60006020820190506124d860008301846121f4565b92915050565b600060208201905081810360008301526124f8818461229a565b905092915050565b60006020820190508181036000830152612519816122d3565b9050919050565b60006020820190508181036000830152612539816122f6565b9050919050565b6000602082019050818103600083015261255981612319565b9050919050565b6000602082019050818103600083015261257a818461233c565b905092915050565b6000602082019050818103600083015261259c81846123a6565b905092915050565b60006020820190506125b960008301846123f6565b92915050565b600060a0820190506125d46000830189612414565b6125e160208301886121d6565b6125ee60408301876121d6565b6125fb60608301866123f6565b818103608083015261260e818486612203565b9050979650505050505050565b6000612625612636565b905061263182826127cf565b919050565b6000604051905090565b600067ffffffffffffffff82111561265b5761265a6128d6565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612687576126866128d6565b5b61269082612923565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006126fc8261271d565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561278857808201518184015260208101905061276d565b83811115612797576000848401525b50505050565b600060028204905060018216806127b557607f821691505b602082108114156127c9576127c8612878565b5b50919050565b6127d882612923565b810181811067ffffffffffffffff821117156127f7576127f66128d6565b5b80604052505050565b600061280b8261273d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561283e5761283d612849565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6129de816126f1565b81146129e957600080fd5b50565b6129f581612703565b8114612a0057600080fd5b50565b612a0c8161270f565b8114612a1757600080fd5b50565b612a2381612747565b8114612a2e57600080fd5b5056fea2646970667358221220df14239740d293b1f6b0c29cfab961cdc7112d223c9eddae22610d7c57947d4164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80636b04648f11610097578063dc5ab6a111610066578063dc5ab6a114610271578063e74b981b146102a1578063f0d6f5d7146102bd578063f2fde38b146102ed57610100565b80636b04648f146101e9578063715018a6146102195780638405e41c146102235780638da5cb5b1461025357610100565b806346904840116100d3578063469048401461017757806356a2caea146101955780635ca94832146101b15780636a785916146101cd57610100565b806301b4aff014610105578063023b1fc91461012157806324a9d8531461013d57806330db76a81461015b575b600080fd5b61011f600480360381019061011a9190611e83565b610309565b005b61013b6004803603810190610136919061219a565b6105c0565b005b61014561065c565b60405161015291906125a4565b60405180910390f35b61017560048036038101906101709190611f36565b610670565b005b61017f610809565b60405161018c919061243a565b60405180910390f35b6101af60048036038101906101aa9190611f76565b61082f565b005b6101cb60048036038101906101c69190611e56565b610a94565b005b6101e760048036038101906101e29190611fe5565b610c2d565b005b61020360048036038101906101fe9190611e56565b610dea565b60405161021091906124c3565b60405180910390f35b610221610e85565b005b61023d60048036038101906102389190611e56565b610f0d565b60405161024a9190612560565b60405180910390f35b61025b611112565b604051610268919061243a565b60405180910390f35b61028b60048036038101906102869190612070565b61113b565b604051610298919061243a565b60405180910390f35b6102bb60048036038101906102b69190611e56565b611601565b005b6102d760048036038101906102d29190611e56565b6116c1565b6040516102e49190612582565b60405180910390f35b61030760048036038101906103029190611e56565b6117e2565b005b6103116118da565b73ffffffffffffffffffffffffffffffffffffffff1661032f611112565b73ffffffffffffffffffffffffffffffffffffffff1614610385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037c90612540565b60405180910390fd5b61038e85610dea565b156103c5576040517fd236bbd800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1661044b576040517ffa67494600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff16815260200184815260200183815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600101908051906020019061055d929190611b4e565b50606082015181600201908051906020019061057a929190611b4e565b509050507f7625cecbb2ae4796387f263b7c50f00f7b4c47511590f66f774c31df7a0cf6298584846040516105b19392919061247e565b60405180910390a15050505050565b6105c86118da565b73ffffffffffffffffffffffffffffffffffffffff166105e6611112565b73ffffffffffffffffffffffffffffffffffffffff161461063c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063390612540565b60405180910390fd5b80600360146101000a81548161ffff021916908361ffff16021790555050565b600360149054906101000a900461ffff1681565b6106786118da565b73ffffffffffffffffffffffffffffffffffffffff16610696611112565b73ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e390612540565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610772576040517fec55b8cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055507f7fd0581e1c8047e486d3dd7b5e50e4d692c269a6e40033e4695fc976c1d44fa482826040516107fd929190612455565b60405180910390a15050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108376118da565b73ffffffffffffffffffffffffffffffffffffffff16610855611112565b73ffffffffffffffffffffffffffffffffffffffff16146108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a290612540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610912576040517fec55b8cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615610999576040517ff298693e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060600160405280600115158152602001821515815260200183815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055506040820151816001019080519060200190610a54929190611b4e565b509050507f57379043f1fe7de281baa2fa0e053a283787fc4337586d993bd90817fe067eb283604051610a87919061243a565b60405180910390a1505050565b610a9c6118da565b73ffffffffffffffffffffffffffffffffffffffff16610aba611112565b73ffffffffffffffffffffffffffffffffffffffff1614610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790612540565b60405180910390fd5b610b1981610dea565b610b4f576040517feae3b21000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff0219169055600182016000610be19190611bd4565b600282016000610bf19190611bd4565b50507f0f3ba29c7ce69255cfbb72ab7530e4e44a8ee0b4fe878f9ef65712581cc0d67381604051610c22919061243a565b60405180910390a150565b610c356118da565b73ffffffffffffffffffffffffffffffffffffffff16610c53611112565b73ffffffffffffffffffffffffffffffffffffffff1614610ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca090612540565b60405180910390fd5b610cb283610dea565b610ce8576040517feae3b21000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000825114610d495781600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190610d47929190611b4e565b505b6000815114610daa5780600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190610da8929190611b4e565b505b7f04b3292478d82302ed07ac3f4d696a59b55002fd23a7c65e03d4f3fc20f8703e838383604051610ddd9392919061247e565b60405180910390a1505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b610e8d6118da565b73ffffffffffffffffffffffffffffffffffffffff16610eab611112565b73ffffffffffffffffffffffffffffffffffffffff1614610f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef890612540565b60405180910390fd5b610f0b60006118e2565b565b610f15611c14565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600182018054610ff79061279d565b80601f01602080910402602001604051908101604052809291908181526020018280546110239061279d565b80156110705780601f1061104557610100808354040283529160200191611070565b820191906000526020600020905b81548152906001019060200180831161105357829003601f168201915b505050505081526020016002820180546110899061279d565b80601f01602080910402602001604051908101604052809291908181526020018280546110b59061279d565b80156111025780601f106110d757610100808354040283529160200191611102565b820191906000526020600020905b8154815290600101906020018083116110e557829003601f168201915b5050505050815250509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166111c3576040517ffa67494600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161561124a576040517f3fa4b39c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113058a6301210a1860e01b8987600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360149054906101000a900461ffff1689896040516024016112a3969594939291906125bf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119a6565b905060405180608001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018867ffffffffffffffff1681526020018a815260200189815250600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040820151816001019080519060200190611419929190611b4e565b506060820151816002019080519060200190611436929190611b4e565b509050508073ffffffffffffffffffffffffffffffffffffffff16632ee0b2bc876040518263ffffffff1660e01b8152600401611473919061243a565b600060405180830381600087803b15801561148d57600080fd5b505af11580156114a1573d6000803e3d6000fd5b5050505060008551905060005b8181101561154c578273ffffffffffffffffffffffffffffffffffffffff16638e0ef6368883815181106114e5576114e46128a7565b5b60200260200101516040518263ffffffff1660e01b8152600401611509919061243a565b600060405180830381600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b505050508061154590612800565b90506114ae565b508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b866040518263ffffffff1660e01b8152600401611586919061243a565b600060405180830381600087803b1580156115a057600080fd5b505af11580156115b4573d6000803e3d6000fd5b505050507f7625cecbb2ae4796387f263b7c50f00f7b4c47511590f66f774c31df7a0cf629828b8b6040516115eb9392919061247e565b60405180910390a1509998505050505050505050565b6116096118da565b73ffffffffffffffffffffffffffffffffffffffff16611627611112565b73ffffffffffffffffffffffffffffffffffffffff161461167d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167490612540565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6116c9611c5c565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180546117599061279d565b80601f01602080910402602001604051908101604052809291908181526020018280546117859061279d565b80156117d25780601f106117a7576101008083540402835291602001916117d2565b820191906000526020600020905b8154815290600101906020018083116117b557829003601f168201915b5050505050815250509050919050565b6117ea6118da565b73ffffffffffffffffffffffffffffffffffffffff16611808611112565b73ffffffffffffffffffffffffffffffffffffffff161461185e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185590612540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c590612500565b60405180910390fd5b6118d7816118e2565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006119b183611a79565b9050600082511115611a73576000808273ffffffffffffffffffffffffffffffffffffffff16846040516119e59190612423565b6000604051808303816000865af19150503d8060008114611a22576040519150601f19603f3d011682016040523d82523d6000602084013e611a27565b606091505b5091509150818190611a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6691906124de565b60405180910390fd5b5050505b92915050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4090612520565b60405180910390fd5b919050565b828054611b5a9061279d565b90600052602060002090601f016020900481019282611b7c5760008555611bc3565b82601f10611b9557805160ff1916838001178555611bc3565b82800160010185558215611bc3579182015b82811115611bc2578251825591602001919060010190611ba7565b5b509050611bd09190611c81565b5090565b508054611be09061279d565b6000825580601f10611bf25750611c11565b601f016020900490600052602060002090810190611c109190611c81565b5b50565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff16815260200160608152602001606081525090565b6040518060600160405280600015158152602001600015158152602001606081525090565b5b80821115611c9a576000816000905550600101611c82565b5090565b6000611cb1611cac84612640565b61261b565b90508083825260208201905082856020860282011115611cd457611cd361290f565b5b60005b85811015611d045781611cea8882611d50565b845260208401935060208301925050600181019050611cd7565b5050509392505050565b6000611d21611d1c8461266c565b61261b565b905082815260208101848484011115611d3d57611d3c612914565b5b611d4884828561275b565b509392505050565b600081359050611d5f816129d5565b92915050565b600082601f830112611d7a57611d7961290a565b5b8135611d8a848260208601611c9e565b91505092915050565b600081359050611da2816129ec565b92915050565b60008083601f840112611dbe57611dbd61290a565b5b8235905067ffffffffffffffff811115611ddb57611dda612905565b5b602083019150836001820283011115611df757611df661290f565b5b9250929050565b600082601f830112611e1357611e1261290a565b5b8135611e23848260208601611d0e565b91505092915050565b600081359050611e3b81612a03565b92915050565b600081359050611e5081612a1a565b92915050565b600060208284031215611e6c57611e6b61291e565b5b6000611e7a84828501611d50565b91505092915050565b600080600080600060a08688031215611e9f57611e9e61291e565b5b6000611ead88828901611d50565b9550506020611ebe88828901611d50565b945050604086013567ffffffffffffffff811115611edf57611ede612919565b5b611eeb88828901611dfe565b935050606086013567ffffffffffffffff811115611f0c57611f0b612919565b5b611f1888828901611dfe565b9250506080611f2988828901611e41565b9150509295509295909350565b60008060408385031215611f4d57611f4c61291e565b5b6000611f5b85828601611d50565b9250506020611f6c85828601611d93565b9150509250929050565b600080600060608486031215611f8f57611f8e61291e565b5b6000611f9d86828701611d50565b935050602084013567ffffffffffffffff811115611fbe57611fbd612919565b5b611fca86828701611dfe565b9250506040611fdb86828701611d93565b9150509250925092565b600080600060608486031215611ffe57611ffd61291e565b5b600061200c86828701611d50565b935050602084013567ffffffffffffffff81111561202d5761202c612919565b5b61203986828701611dfe565b925050604084013567ffffffffffffffff81111561205a57612059612919565b5b61206686828701611dfe565b9150509250925092565b60008060008060008060008060006101008a8c0312156120935761209261291e565b5b60006120a18c828d01611d50565b99505060208a013567ffffffffffffffff8111156120c2576120c1612919565b5b6120ce8c828d01611dfe565b98505060408a013567ffffffffffffffff8111156120ef576120ee612919565b5b6120fb8c828d01611dfe565b975050606061210c8c828d01611e41565b965050608061211d8c828d01611d50565b95505060a08a013567ffffffffffffffff81111561213e5761213d612919565b5b61214a8c828d01611d65565b94505060c061215b8c828d01611d50565b93505060e08a013567ffffffffffffffff81111561217c5761217b612919565b5b6121888c828d01611da8565b92509250509295985092959850929598565b6000602082840312156121b0576121af61291e565b5b60006121be84828501611e2c565b91505092915050565b6121d0816126f1565b82525050565b6121df816126f1565b82525050565b6121ee81612703565b82525050565b6121fd81612703565b82525050565b600061220f83856126b3565b935061221c83858461275b565b61222583612923565b840190509392505050565b600061223b8261269d565b61224581856126c4565b935061225581856020860161276a565b80840191505092915050565b600061226c826126a8565b61227681856126cf565b935061228681856020860161276a565b61228f81612923565b840191505092915050565b60006122a5826126a8565b6122af81856126e0565b93506122bf81856020860161276a565b6122c881612923565b840191505092915050565b60006122e06026836126e0565b91506122eb82612934565b604082019050919050565b60006123036016836126e0565b915061230e82612983565b602082019050919050565b60006123266020836126e0565b9150612331826129ac565b602082019050919050565b600060808301600083015161235460008601826121c7565b5060208301516123676020860182612405565b506040830151848203604086015261237f8282612261565b915050606083015184820360608601526123998282612261565b9150508091505092915050565b60006060830160008301516123be60008601826121e5565b5060208301516123d160208601826121e5565b50604083015184820360408601526123e98282612261565b9150508091505092915050565b6123ff8161270f565b82525050565b61240e81612747565b82525050565b61241d81612747565b82525050565b600061242f8284612230565b915081905092915050565b600060208201905061244f60008301846121d6565b92915050565b600060408201905061246a60008301856121d6565b61247760208301846121f4565b9392505050565b600060608201905061249360008301866121d6565b81810360208301526124a5818561229a565b905081810360408301526124b9818461229a565b9050949350505050565b60006020820190506124d860008301846121f4565b92915050565b600060208201905081810360008301526124f8818461229a565b905092915050565b60006020820190508181036000830152612519816122d3565b9050919050565b60006020820190508181036000830152612539816122f6565b9050919050565b6000602082019050818103600083015261255981612319565b9050919050565b6000602082019050818103600083015261257a818461233c565b905092915050565b6000602082019050818103600083015261259c81846123a6565b905092915050565b60006020820190506125b960008301846123f6565b92915050565b600060a0820190506125d46000830189612414565b6125e160208301886121d6565b6125ee60408301876121d6565b6125fb60608301866123f6565b818103608083015261260e818486612203565b9050979650505050505050565b6000612625612636565b905061263182826127cf565b919050565b6000604051905090565b600067ffffffffffffffff82111561265b5761265a6128d6565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612687576126866128d6565b5b61269082612923565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006126fc8261271d565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561278857808201518184015260208101905061276d565b83811115612797576000848401525b50505050565b600060028204905060018216806127b557607f821691505b602082108114156127c9576127c8612878565b5b50919050565b6127d882612923565b810181811067ffffffffffffffff821117156127f7576127f66128d6565b5b80604052505050565b600061280b8261273d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561283e5761283d612849565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6129de816126f1565b81146129e957600080fd5b50565b6129f581612703565b8114612a0057600080fd5b50565b612a0c8161270f565b8114612a1757600080fd5b50565b612a2381612747565b8114612a2e57600080fd5b5056fea2646970667358221220df14239740d293b1f6b0c29cfab961cdc7112d223c9eddae22610d7c57947d4164736f6c63430008060033",
  "devdoc": {
    "events": {
      "ProgramAdded(address,string,string)": {
        "details": "emitted when a program's (deployed via the factory or preexisting) is created"
      },
      "ProgramChanged(address,string,string)": {
        "details": "emitted when a program's (deployed via the factory or preexisting)"
      },
      "ProgramDelisted(address)": {
        "details": "emitted when a program is delisted"
      },
      "TemplateAdded(address)": {
        "details": "emitted when a new template is added"
      },
      "TemplateUpdated(address,bool)": {
        "details": "emitted when a template is updated"
      }
    },
    "kind": "dev",
    "methods": {
      "addProgram(address,address,string,string,uint64)": {
        "details": "this allows onchain storage of pre-aludel factory programs"
      },
      "delistProgram(address)": {
        "details": "removes `program` as a registered instance of the factory"
      },
      "launch(address,string,string,uint64,address,address[],address,bytes)": {
        "params": {
          "data": "the calldata to use on the new aludel initialization",
          "name": "the string represeting the program's name",
          "stakingTokenUrl": "the program's url",
          "template": "the number of the template to launch"
        },
        "returns": {
          "aludel": "the new aludel deployed address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateProgram(address,string,string)": {
        "details": "to set only one of them, you can pass an empty string as the other and then you'll save some gas"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProgram(address,address,string,string,uint64)": {
        "notice": "manually adds a program"
      },
      "addTemplate(address,string,bool)": {
        "notice": "adds a new template to the factory"
      },
      "delistProgram(address)": {
        "notice": "delist a program"
      },
      "feeBps()": {
        "notice": "fee's basis point"
      },
      "feeRecipient()": {
        "notice": "fee's recipient."
      },
      "getTemplate(address)": {
        "notice": "retrieves a template's data"
      },
      "launch(address,string,string,uint64,address,address[],address,bytes)": {
        "notice": "perform a minimal proxy deploy of a predefined aludel template"
      },
      "updateProgram(address,string,string)": {
        "notice": "updates both name and url of a program at once"
      },
      "updateTemplate(address,bool)": {
        "notice": "sets a template as disable or enabled"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/AludelFactory.sol:AludelFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16620,
        "contract": "src/contracts/AludelFactory.sol:AludelFactory",
        "label": "_templates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(TemplateData)16614_storage)"
      },
      {
        "astId": 16626,
        "contract": "src/contracts/AludelFactory.sol:AludelFactory",
        "label": "_programs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(ProgramData)16607_storage)"
      },
      {
        "astId": 16629,
        "contract": "src/contracts/AludelFactory.sol:AludelFactory",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 16632,
        "contract": "src/contracts/AludelFactory.sol:AludelFactory",
        "label": "feeBps",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ProgramData)16607_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AludelFactory.ProgramData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProgramData)16607_storage"
      },
      "t_mapping(t_address,t_struct(TemplateData)16614_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AludelFactory.TemplateData)",
        "numberOfBytes": "32",
        "value": "t_struct(TemplateData)16614_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProgramData)16607_storage": {
        "encoding": "inplace",
        "label": "struct AludelFactory.ProgramData",
        "members": [
          {
            "astId": 16600,
            "contract": "src/contracts/AludelFactory.sol:AludelFactory",
            "label": "template",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16602,
            "contract": "src/contracts/AludelFactory.sol:AludelFactory",
            "label": "startTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 16604,
            "contract": "src/contracts/AludelFactory.sol:AludelFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 16606,
            "contract": "src/contracts/AludelFactory.sol:AludelFactory",
            "label": "stakingTokenUrl",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TemplateData)16614_storage": {
        "encoding": "inplace",
        "label": "struct AludelFactory.TemplateData",
        "members": [
          {
            "astId": 16609,
            "contract": "src/contracts/AludelFactory.sol:AludelFactory",
            "label": "listed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16611,
            "contract": "src/contracts/AludelFactory.sol:AludelFactory",
            "label": "disabled",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16613,
            "contract": "src/contracts/AludelFactory.sol:AludelFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}