{
  "address": "0x1A4F1802f56C0E0d69F172a96877835659c6a05D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "InstanceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "InstanceRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "create2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "instanceAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "isInstance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "validity",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ad1912fbc6c489e1707c3540343e1c0759cc95c4d5aaa3c1099b38900dfd65d",
  "receipt": {
    "to": null,
    "from": "0x844eAb6D943B1Db987786a2469D7A0bCCd38ddDc",
    "contractAddress": "0x1A4F1802f56C0E0d69F172a96877835659c6a05D",
    "transactionIndex": 0,
    "gasUsed": "1810359",
    "logsBloom": "0x
    "blockHash": "0x01beb5dd38e33fd91d6575e17c1bb50e25b69f1298c150d804b6a2066d1e02bd",
    "transactionHash": "0x6ad1912fbc6c489e1707c3540343e1c0759cc95c4d5aaa3c1099b38900dfd65d",
    "logs": [],
    "blockNumber": 14169008,
    "cumulativeGasUsed": "1810359",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "88e0d896de96a01028c74f4e22f8120f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"InstanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"InstanceRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"create2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"instanceAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"isInstance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Reward Pool Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"alchemist/contracts/aludel/RewardPoolFactory.sol\":\"RewardPoolFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"alchemist/contracts/aludel/PowerSwitch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IPowerSwitch {\\n    /* admin events */\\n\\n    event PowerOn();\\n    event PowerOff();\\n    event EmergencyShutdown();\\n\\n    /* data types */\\n\\n    enum State {Online, Offline, Shutdown}\\n\\n    /* admin functions */\\n\\n    function powerOn() external;\\n\\n    function powerOff() external;\\n\\n    function emergencyShutdown() external;\\n\\n    /* view functions */\\n\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getStatus() external view returns (State status);\\n\\n    function getPowerController() external view returns (address controller);\\n}\\n\\n/// @title PowerSwitch\\n/// @notice Standalone pausing and emergency stop functionality\\ncontract PowerSwitch is IPowerSwitch, Ownable {\\n    /* storage */\\n\\n    IPowerSwitch.State private _status;\\n\\n    /* initializer */\\n\\n    constructor(address owner) {\\n        // sanity check owner\\n        require(owner != address(0), \\\"PowerSwitch: invalid owner\\\");\\n        // transfer ownership\\n        Ownable.transferOwnership(owner);\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Turn Power On\\n    /// access control: only admin\\n    /// state machine: only when offline\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOn() external override onlyOwner {\\n        require(_status == IPowerSwitch.State.Offline, \\\"PowerSwitch: cannot power on\\\");\\n        _status = IPowerSwitch.State.Online;\\n        emit PowerOn();\\n    }\\n\\n    /// @notice Turn Power Off\\n    /// access control: only admin\\n    /// state machine: only when online\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOff() external override onlyOwner {\\n        require(_status == IPowerSwitch.State.Online, \\\"PowerSwitch: cannot power off\\\");\\n        _status = IPowerSwitch.State.Offline;\\n        emit PowerOff();\\n    }\\n\\n    /// @notice Shutdown Permanently\\n    /// access control: only admin\\n    /// state machine:\\n    /// - when online or offline\\n    /// - can only be called once\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function emergencyShutdown() external override onlyOwner {\\n        require(_status != IPowerSwitch.State.Shutdown, \\\"PowerSwitch: cannot shutdown\\\");\\n        _status = IPowerSwitch.State.Shutdown;\\n        emit EmergencyShutdown();\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() external view override returns (bool status) {\\n        return _status == State.Online;\\n    }\\n\\n    function isOffline() external view override returns (bool status) {\\n        return _status == State.Offline;\\n    }\\n\\n    function isShutdown() external view override returns (bool status) {\\n        return _status == State.Shutdown;\\n    }\\n\\n    function getStatus() external view override returns (IPowerSwitch.State status) {\\n        return _status;\\n    }\\n\\n    function getPowerController() external view override returns (address controller) {\\n        return Ownable.owner();\\n    }\\n}\\n\",\"keccak256\":\"0xc7a5fc5aafcc4d597205bbe089b729e024348679ebbc060848033d3aa25507f4\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/aludel/Powered.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IPowerSwitch} from \\\"./PowerSwitch.sol\\\";\\n\\ninterface IPowered {\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getPowerSwitch() external view returns (address powerSwitch);\\n\\n    function getPowerController() external view returns (address controller);\\n}\\n\\n/// @title Powered\\n/// @notice Helper for calling external PowerSwitch\\ncontract Powered is IPowered {\\n    /* storage */\\n\\n    address private _powerSwitch;\\n\\n    /* modifiers */\\n\\n    modifier onlyOnline() {\\n        _onlyOnline();\\n        _;\\n    }\\n\\n    modifier onlyOffline() {\\n        _onlyOffline();\\n        _;\\n    }\\n\\n    modifier notShutdown() {\\n        _notShutdown();\\n        _;\\n    }\\n\\n    modifier onlyShutdown() {\\n        _onlyShutdown();\\n        _;\\n    }\\n\\n    /* initializer */\\n\\n    function _setPowerSwitch(address powerSwitch) internal {\\n        _powerSwitch = powerSwitch;\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOnline();\\n    }\\n\\n    function isOffline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOffline();\\n    }\\n\\n    function isShutdown() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isShutdown();\\n    }\\n\\n    function getPowerSwitch() public view override returns (address powerSwitch) {\\n        return _powerSwitch;\\n    }\\n\\n    function getPowerController() public view override returns (address controller) {\\n        return IPowerSwitch(_powerSwitch).getPowerController();\\n    }\\n\\n    /* convenience functions */\\n\\n    function _onlyOnline() private view {\\n        require(isOnline(), \\\"Powered: is not online\\\");\\n    }\\n\\n    function _onlyOffline() private view {\\n        require(isOffline(), \\\"Powered: is not offline\\\");\\n    }\\n\\n    function _notShutdown() private view {\\n        require(!isShutdown(), \\\"Powered: is shutdown\\\");\\n    }\\n\\n    function _onlyShutdown() private view {\\n        require(isShutdown(), \\\"Powered: is not shutdown\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc1a176b19e70c0bd907ed58b97038e49838c73a6e150b9fece663cd8c61b0f77\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/aludel/RewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {Powered} from \\\"./Powered.sol\\\";\\n\\ninterface IRewardPool {\\n    function sendERC20(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function rescueERC20(address[] calldata tokens, address recipient) external;\\n}\\n\\n/// @title Reward Pool\\n/// @notice Vault for isolated storage of reward tokens\\ncontract RewardPool is IRewardPool, Powered, Ownable {\\n    /* initializer */\\n\\n    constructor(address powerSwitch) {\\n        Powered._setPowerSwitch(powerSwitch);\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Send an ERC20 token\\n    /// access control: only owner\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope: none\\n    /// token transfer: transfer tokens from self to recipient\\n    /// @param token address The token to send\\n    /// @param to address The recipient to send to\\n    /// @param value uint256 Amount of tokens to send\\n    function sendERC20(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external override onlyOwner onlyOnline {\\n        TransferHelper.safeTransfer(token, to, value);\\n    }\\n\\n    /* emergency functions */\\n\\n    /// @notice Rescue multiple ERC20 tokens\\n    /// access control: only power controller\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only shutdown\\n    /// state scope: none\\n    /// token transfer: transfer tokens from self to recipient\\n    /// @param tokens address[] The tokens to rescue\\n    /// @param recipient address The recipient to rescue to\\n    function rescueERC20(address[] calldata tokens, address recipient)\\n        external\\n        override\\n        onlyShutdown\\n    {\\n        // only callable by controller\\n        require(\\n            msg.sender == Powered.getPowerController(),\\n            \\\"RewardPool: only controller can withdraw after shutdown\\\"\\n        );\\n\\n        // assert recipient is defined\\n        require(recipient != address(0), \\\"RewardPool: recipient not defined\\\");\\n\\n        // transfer tokens\\n        for (uint256 index = 0; index < tokens.length; index++) {\\n            // get token\\n            address token = tokens[index];\\n            // get balance\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            // transfer token\\n            TransferHelper.safeTransfer(token, recipient, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62e1a6ebee0281fd8f6400a79a5292450a98681d195c2948d9a8e626d41b9304\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/aludel/RewardPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {IFactory} from \\\"../factory/IFactory.sol\\\";\\nimport {InstanceRegistry} from \\\"../factory/InstanceRegistry.sol\\\";\\nimport {RewardPool} from \\\"./RewardPool.sol\\\";\\n\\n/// @title Reward Pool Factory\\ncontract RewardPoolFactory is IFactory, InstanceRegistry {\\n    function create(bytes calldata args) external override returns (address) {\\n        address powerSwitch = abi.decode(args, (address));\\n        RewardPool pool = new RewardPool(powerSwitch);\\n        InstanceRegistry._register(address(pool));\\n        pool.transferOwnership(msg.sender);\\n        return address(pool);\\n    }\\n\\n    function create2(bytes calldata, bytes32) external pure override returns (address) {\\n        revert(\\\"RewardPoolFactory: unused function\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe1307c8d3dae3b9f283ebf882ddef0eb91e168d3b9be0cc573ae0c6207a0c7c4\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface IFactory {\\n    function create(bytes calldata args) external returns (address instance);\\n\\n    function create2(bytes calldata args, bytes32 salt) external returns (address instance);\\n}\\n\",\"keccak256\":\"0x9aae95b220be96434e10884dabd1a4167942800b6b828bf75541eca818f6560c\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/factory/InstanceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IInstanceRegistry {\\n    /* events */\\n\\n    event InstanceAdded(address instance);\\n    event InstanceRemoved(address instance);\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) external view returns (bool validity);\\n\\n    function instanceCount() external view returns (uint256 count);\\n\\n    function instanceAt(uint256 index) external view returns (address instance);\\n}\\n\\n/// @title InstanceRegistry\\ncontract InstanceRegistry is IInstanceRegistry {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* storage */\\n\\n    EnumerableSet.AddressSet private _instanceSet;\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) public view override returns (bool validity) {\\n        return _instanceSet.contains(instance);\\n    }\\n\\n    function instanceCount() public view override returns (uint256 count) {\\n        return _instanceSet.length();\\n    }\\n\\n    function instanceAt(uint256 index) public view override returns (address instance) {\\n        return _instanceSet.at(index);\\n    }\\n\\n    /* admin functions */\\n\\n    function _register(address instance) internal {\\n        require(_instanceSet.add(instance), \\\"InstanceRegistry: already registered\\\");\\n        emit InstanceAdded(instance);\\n    }\\n}\\n\",\"keccak256\":\"0xc74100043198fc3a6db43919a8b11a6bdf9a33f3f22c5577ed565c268898205d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ff8806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806311d8293e14620000635780636b44e6be14620000995780638c0b8db214620000cf578063cf5ba53f1462000105578063ec56c716146200013b575b600080fd5b6200008160048036038101906200007b9190620006b2565b6200015d565b60405162000090919062000765565b60405180910390f35b620000b76004803603810190620000b191906200058f565b6200017c565b604051620000c6919062000782565b60405180910390f35b620000ed6004803603810190620000e7919062000648565b6200019b565b604051620000fc919062000765565b60405180910390f35b6200012360048036038101906200011d9190620005f3565b620001da565b60405162000132919062000765565b60405180910390f35b62000145620002b2565b604051620001549190620007e3565b60405180910390f35b600062000175826000620002c590919063ffffffff16565b9050919050565b600062000194826000620002e190919063ffffffff16565b9050919050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001d1906200079f565b60405180910390fd5b6000808383810190620001ee9190620005c1565b90506000816040516200020190620004c6565b6200020d919062000765565b604051809103906000f0801580156200022a573d6000803e3d6000fd5b509050620002388162000313565b8073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000273919062000765565b600060405180830381600087803b1580156200028e57600080fd5b505af1158015620002a3573d6000803e3d6000fd5b50505050809250505092915050565b6000620002c06000620003a7565b905090565b6000620002d68360000183620003be565b60001c905092915050565b60006200030b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003ec565b905092915050565b620003298160006200040f90919063ffffffff16565b6200036b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200036290620007c1565b60405180910390fd5b7fee3a98e49d5a27452a99d57c90a7f73d4b2e44de88c6ded02e69c4ed964edd5a816040516200039c919062000765565b60405180910390a150565b6000620003b78260000162000441565b9050919050565b6000826000018281548110620003d957620003d862000879565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600062000439836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000452565b905092915050565b600081600001805490509050919050565b6000620004608383620003ec565b620004bb578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620004c0565b600090505b92915050565b6115fb80620009c883390190565b600081359050620004e5816200095f565b92915050565b600081359050620004fc8162000979565b92915050565b600081359050620005138162000993565b92915050565b60008083601f840112620005325762000531620008ad565b5b8235905067ffffffffffffffff811115620005525762000551620008a8565b5b602083019150836001820283011115620005715762000570620008b2565b5b9250929050565b6000813590506200058981620009ad565b92915050565b600060208284031215620005a857620005a7620008bc565b5b6000620005b884828501620004d4565b91505092915050565b600060208284031215620005da57620005d9620008bc565b5b6000620005ea84828501620004eb565b91505092915050565b600080602083850312156200060d576200060c620008bc565b5b600083013567ffffffffffffffff8111156200062e576200062d620008b7565b5b6200063c8582860162000519565b92509250509250929050565b600080600060408486031215620006645762000663620008bc565b5b600084013567ffffffffffffffff811115620006855762000684620008b7565b5b620006938682870162000519565b93509350506020620006a88682870162000502565b9150509250925092565b600060208284031215620006cb57620006ca620008bc565b5b6000620006db8482850162000578565b91505092915050565b620006ef8162000811565b82525050565b620007008162000839565b82525050565b60006200071560228362000800565b91506200072282620008c1565b604082019050919050565b60006200073c60248362000800565b9150620007498262000910565b604082019050919050565b6200075f816200086f565b82525050565b60006020820190506200077c6000830184620006e4565b92915050565b6000602082019050620007996000830184620006f5565b92915050565b60006020820190508181036000830152620007ba8162000706565b9050919050565b60006020820190508181036000830152620007dc816200072d565b9050919050565b6000602082019050620007fa600083018462000754565b92915050565b600082825260208201905092915050565b60006200081e826200084f565b9050919050565b600062000832826200084f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f526577617264506f6f6c466163746f72793a20756e757365642066756e63746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e7374616e636552656769737472793a20616c72656164792072656769737460008201527f6572656400000000000000000000000000000000000000000000000000000000602082015250565b6200096a8162000811565b81146200097657600080fd5b50565b620009848162000825565b81146200099057600080fd5b50565b6200099e8162000845565b8114620009aa57600080fd5b50565b620009b8816200086f565b8114620009c457600080fd5b5056fe60806040523480156200001157600080fd5b50604051620015fb380380620015fb83398181016040528101906200003791906200019c565b620000576200004b6200007460201b60201c565b6200007c60201b60201c565b6200006d816200014260201b6200088e1760201c565b5062000221565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081519050620001968162000207565b92915050565b600060208284031215620001b557620001b462000202565b5b6000620001c58482850162000185565b91505092915050565b6000620001db82620001e2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200021281620001ce565b81146200021e57600080fd5b50565b6113ca80620002316000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101255780638f975a6414610143578063b27704fa1461015f578063bf86d6901461017b578063f2fde38b146101995761009e565b8063438cae7e146100a3578063664ab18e146100c1578063715018a6146100df578063766f13bc146100e95780638531a63614610107575b600080fd5b6100ab6101b5565b6040516100b89190610f3b565b60405180910390f35b6100c961025b565b6040516100d69190610f3b565b60405180910390f35b6100e7610301565b005b6100f1610389565b6040516100fe9190610ef7565b60405180910390f35b61010f61042f565b60405161011c9190610ef7565b60405180910390f35b61012d610458565b60405161013a9190610ef7565b60405180910390f35b61015d60048036038101906101589190610c80565b610482565b005b61017960048036038101906101749190610cd3565b610516565b005b6101836106f0565b6040516101909190610f3b565b60405180910390f35b6101b360048036038101906101ae9190610c26565b610796565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663438cae7e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021e57600080fd5b505afa158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190610d33565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663664ab18e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc9190610d33565b905090565b6103096108d1565b73ffffffffffffffffffffffffffffffffffffffff16610327610458565b73ffffffffffffffffffffffffffffffffffffffff161461037d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037490610fb6565b60405180910390fd5b61038760006108d9565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663766f13bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190610c53565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61048a6108d1565b73ffffffffffffffffffffffffffffffffffffffff166104a8610458565b73ffffffffffffffffffffffffffffffffffffffff16146104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590610fb6565b60405180910390fd5b61050661099f565b6105118383836109e8565b505050565b61051e610b1e565b610526610389565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90610f96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fa90610ff6565b60405180910390fd5b60005b838390508110156106ea57600084848381811061062657610625611150565b5b905060200201602081019061063b9190610c26565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106789190610ef7565b60206040518083038186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190610d60565b90506106d58285836109e8565b505080806106e2906110d8565b915050610606565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b815260040160206040518083038186803b15801561075957600080fd5b505afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190610d33565b905090565b61079e6108d1565b73ffffffffffffffffffffffffffffffffffffffff166107bc610458565b73ffffffffffffffffffffffffffffffffffffffff1614610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990610fb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990610f76565b60405180910390fd5b61088b816108d9565b50565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6109a761025b565b6109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90610fd6565b60405180910390fd5b565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610a1a929190610f12565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610a689190610ee0565b6000604051808303816000865af19150503d8060008114610aa5576040519150601f19603f3d011682016040523d82523d6000602084013e610aaa565b606091505b5091509150818015610ad85750600081511480610ad7575080806020019051810190610ad69190610d33565b5b5b610b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0e90611016565b60405180910390fd5b5050505050565b610b266106f0565b610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90610f56565b60405180910390fd5b565b600081359050610b768161134f565b92915050565b600081519050610b8b8161134f565b92915050565b60008083601f840112610ba757610ba6611184565b5b8235905067ffffffffffffffff811115610bc457610bc361117f565b5b602083019150836020820283011115610be057610bdf611189565b5b9250929050565b600081519050610bf681611366565b92915050565b600081359050610c0b8161137d565b92915050565b600081519050610c208161137d565b92915050565b600060208284031215610c3c57610c3b611193565b5b6000610c4a84828501610b67565b91505092915050565b600060208284031215610c6957610c68611193565b5b6000610c7784828501610b7c565b91505092915050565b600080600060608486031215610c9957610c98611193565b5b6000610ca786828701610b67565b9350506020610cb886828701610b67565b9250506040610cc986828701610bfc565b9150509250925092565b600080600060408486031215610cec57610ceb611193565b5b600084013567ffffffffffffffff811115610d0a57610d0961118e565b5b610d1686828701610b91565b93509350506020610d2986828701610b67565b9150509250925092565b600060208284031215610d4957610d48611193565b5b6000610d5784828501610be7565b91505092915050565b600060208284031215610d7657610d75611193565b5b6000610d8484828501610c11565b91505092915050565b610d968161105d565b82525050565b610da58161106f565b82525050565b6000610db682611036565b610dc08185611041565b9350610dd08185602086016110a5565b80840191505092915050565b6000610de960188361104c565b9150610df482611198565b602082019050919050565b6000610e0c60268361104c565b9150610e17826111c1565b604082019050919050565b6000610e2f60378361104c565b9150610e3a82611210565b604082019050919050565b6000610e5260208361104c565b9150610e5d8261125f565b602082019050919050565b6000610e7560168361104c565b9150610e8082611288565b602082019050919050565b6000610e9860218361104c565b9150610ea3826112b1565b604082019050919050565b6000610ebb602d8361104c565b9150610ec682611300565b604082019050919050565b610eda8161109b565b82525050565b6000610eec8284610dab565b915081905092915050565b6000602082019050610f0c6000830184610d8d565b92915050565b6000604082019050610f276000830185610d8d565b610f346020830184610ed1565b9392505050565b6000602082019050610f506000830184610d9c565b92915050565b60006020820190508181036000830152610f6f81610ddc565b9050919050565b60006020820190508181036000830152610f8f81610dff565b9050919050565b60006020820190508181036000830152610faf81610e22565b9050919050565b60006020820190508181036000830152610fcf81610e45565b9050919050565b60006020820190508181036000830152610fef81610e68565b9050919050565b6000602082019050818103600083015261100f81610e8b565b9050919050565b6000602082019050818103600083015261102f81610eae565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006110688261107b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156110c35780820151818401526020810190506110a8565b838111156110d2576000848401525b50505050565b60006110e38261109b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561111657611115611121565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f506f77657265643a206973206e6f742073687574646f776e0000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f526577617264506f6f6c3a206f6e6c7920636f6e74726f6c6c65722063616e2060008201527f77697468647261772061667465722073687574646f776e000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f506f77657265643a206973206e6f74206f6e6c696e6500000000000000000000600082015250565b7f526577617264506f6f6c3a20726563697069656e74206e6f7420646566696e6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6113588161105d565b811461136357600080fd5b50565b61136f8161106f565b811461137a57600080fd5b50565b6113868161109b565b811461139157600080fd5b5056fea2646970667358221220470ff9a7da6f37e655143ac13e6b938a7a3b7f74b8ef6921c9957c8976f243e464736f6c63430008060033a26469706673582212206c65a271c5e46d98dc96bf603c03fc6f83ae3c94f4586155df05d6d7544b3d6164736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806311d8293e14620000635780636b44e6be14620000995780638c0b8db214620000cf578063cf5ba53f1462000105578063ec56c716146200013b575b600080fd5b6200008160048036038101906200007b9190620006b2565b6200015d565b60405162000090919062000765565b60405180910390f35b620000b76004803603810190620000b191906200058f565b6200017c565b604051620000c6919062000782565b60405180910390f35b620000ed6004803603810190620000e7919062000648565b6200019b565b604051620000fc919062000765565b60405180910390f35b6200012360048036038101906200011d9190620005f3565b620001da565b60405162000132919062000765565b60405180910390f35b62000145620002b2565b604051620001549190620007e3565b60405180910390f35b600062000175826000620002c590919063ffffffff16565b9050919050565b600062000194826000620002e190919063ffffffff16565b9050919050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001d1906200079f565b60405180910390fd5b6000808383810190620001ee9190620005c1565b90506000816040516200020190620004c6565b6200020d919062000765565b604051809103906000f0801580156200022a573d6000803e3d6000fd5b509050620002388162000313565b8073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000273919062000765565b600060405180830381600087803b1580156200028e57600080fd5b505af1158015620002a3573d6000803e3d6000fd5b50505050809250505092915050565b6000620002c06000620003a7565b905090565b6000620002d68360000183620003be565b60001c905092915050565b60006200030b836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003ec565b905092915050565b620003298160006200040f90919063ffffffff16565b6200036b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200036290620007c1565b60405180910390fd5b7fee3a98e49d5a27452a99d57c90a7f73d4b2e44de88c6ded02e69c4ed964edd5a816040516200039c919062000765565b60405180910390a150565b6000620003b78260000162000441565b9050919050565b6000826000018281548110620003d957620003d862000879565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600062000439836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000452565b905092915050565b600081600001805490509050919050565b6000620004608383620003ec565b620004bb578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620004c0565b600090505b92915050565b6115fb80620009c883390190565b600081359050620004e5816200095f565b92915050565b600081359050620004fc8162000979565b92915050565b600081359050620005138162000993565b92915050565b60008083601f840112620005325762000531620008ad565b5b8235905067ffffffffffffffff811115620005525762000551620008a8565b5b602083019150836001820283011115620005715762000570620008b2565b5b9250929050565b6000813590506200058981620009ad565b92915050565b600060208284031215620005a857620005a7620008bc565b5b6000620005b884828501620004d4565b91505092915050565b600060208284031215620005da57620005d9620008bc565b5b6000620005ea84828501620004eb565b91505092915050565b600080602083850312156200060d576200060c620008bc565b5b600083013567ffffffffffffffff8111156200062e576200062d620008b7565b5b6200063c8582860162000519565b92509250509250929050565b600080600060408486031215620006645762000663620008bc565b5b600084013567ffffffffffffffff811115620006855762000684620008b7565b5b620006938682870162000519565b93509350506020620006a88682870162000502565b9150509250925092565b600060208284031215620006cb57620006ca620008bc565b5b6000620006db8482850162000578565b91505092915050565b620006ef8162000811565b82525050565b620007008162000839565b82525050565b60006200071560228362000800565b91506200072282620008c1565b604082019050919050565b60006200073c60248362000800565b9150620007498262000910565b604082019050919050565b6200075f816200086f565b82525050565b60006020820190506200077c6000830184620006e4565b92915050565b6000602082019050620007996000830184620006f5565b92915050565b60006020820190508181036000830152620007ba8162000706565b9050919050565b60006020820190508181036000830152620007dc816200072d565b9050919050565b6000602082019050620007fa600083018462000754565b92915050565b600082825260208201905092915050565b60006200081e826200084f565b9050919050565b600062000832826200084f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f526577617264506f6f6c466163746f72793a20756e757365642066756e63746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e7374616e636552656769737472793a20616c72656164792072656769737460008201527f6572656400000000000000000000000000000000000000000000000000000000602082015250565b6200096a8162000811565b81146200097657600080fd5b50565b620009848162000825565b81146200099057600080fd5b50565b6200099e8162000845565b8114620009aa57600080fd5b50565b620009b8816200086f565b8114620009c457600080fd5b5056fe60806040523480156200001157600080fd5b50604051620015fb380380620015fb83398181016040528101906200003791906200019c565b620000576200004b6200007460201b60201c565b6200007c60201b60201c565b6200006d816200014260201b6200088e1760201c565b5062000221565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081519050620001968162000207565b92915050565b600060208284031215620001b557620001b462000202565b5b6000620001c58482850162000185565b91505092915050565b6000620001db82620001e2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200021281620001ce565b81146200021e57600080fd5b50565b6113ca80620002316000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101255780638f975a6414610143578063b27704fa1461015f578063bf86d6901461017b578063f2fde38b146101995761009e565b8063438cae7e146100a3578063664ab18e146100c1578063715018a6146100df578063766f13bc146100e95780638531a63614610107575b600080fd5b6100ab6101b5565b6040516100b89190610f3b565b60405180910390f35b6100c961025b565b6040516100d69190610f3b565b60405180910390f35b6100e7610301565b005b6100f1610389565b6040516100fe9190610ef7565b60405180910390f35b61010f61042f565b60405161011c9190610ef7565b60405180910390f35b61012d610458565b60405161013a9190610ef7565b60405180910390f35b61015d60048036038101906101589190610c80565b610482565b005b61017960048036038101906101749190610cd3565b610516565b005b6101836106f0565b6040516101909190610f3b565b60405180910390f35b6101b360048036038101906101ae9190610c26565b610796565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663438cae7e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021e57600080fd5b505afa158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190610d33565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663664ab18e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc9190610d33565b905090565b6103096108d1565b73ffffffffffffffffffffffffffffffffffffffff16610327610458565b73ffffffffffffffffffffffffffffffffffffffff161461037d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037490610fb6565b60405180910390fd5b61038760006108d9565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663766f13bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a9190610c53565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61048a6108d1565b73ffffffffffffffffffffffffffffffffffffffff166104a8610458565b73ffffffffffffffffffffffffffffffffffffffff16146104fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f590610fb6565b60405180910390fd5b61050661099f565b6105118383836109e8565b505050565b61051e610b1e565b610526610389565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90610f96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fa90610ff6565b60405180910390fd5b60005b838390508110156106ea57600084848381811061062657610625611150565b5b905060200201602081019061063b9190610c26565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106789190610ef7565b60206040518083038186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190610d60565b90506106d58285836109e8565b505080806106e2906110d8565b915050610606565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b815260040160206040518083038186803b15801561075957600080fd5b505afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190610d33565b905090565b61079e6108d1565b73ffffffffffffffffffffffffffffffffffffffff166107bc610458565b73ffffffffffffffffffffffffffffffffffffffff1614610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990610fb6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990610f76565b60405180910390fd5b61088b816108d9565b50565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6109a761025b565b6109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90610fd6565b60405180910390fd5b565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610a1a929190610f12565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610a689190610ee0565b6000604051808303816000865af19150503d8060008114610aa5576040519150601f19603f3d011682016040523d82523d6000602084013e610aaa565b606091505b5091509150818015610ad85750600081511480610ad7575080806020019051810190610ad69190610d33565b5b5b610b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0e90611016565b60405180910390fd5b5050505050565b610b266106f0565b610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90610f56565b60405180910390fd5b565b600081359050610b768161134f565b92915050565b600081519050610b8b8161134f565b92915050565b60008083601f840112610ba757610ba6611184565b5b8235905067ffffffffffffffff811115610bc457610bc361117f565b5b602083019150836020820283011115610be057610bdf611189565b5b9250929050565b600081519050610bf681611366565b92915050565b600081359050610c0b8161137d565b92915050565b600081519050610c208161137d565b92915050565b600060208284031215610c3c57610c3b611193565b5b6000610c4a84828501610b67565b91505092915050565b600060208284031215610c6957610c68611193565b5b6000610c7784828501610b7c565b91505092915050565b600080600060608486031215610c9957610c98611193565b5b6000610ca786828701610b67565b9350506020610cb886828701610b67565b9250506040610cc986828701610bfc565b9150509250925092565b600080600060408486031215610cec57610ceb611193565b5b600084013567ffffffffffffffff811115610d0a57610d0961118e565b5b610d1686828701610b91565b93509350506020610d2986828701610b67565b9150509250925092565b600060208284031215610d4957610d48611193565b5b6000610d5784828501610be7565b91505092915050565b600060208284031215610d7657610d75611193565b5b6000610d8484828501610c11565b91505092915050565b610d968161105d565b82525050565b610da58161106f565b82525050565b6000610db682611036565b610dc08185611041565b9350610dd08185602086016110a5565b80840191505092915050565b6000610de960188361104c565b9150610df482611198565b602082019050919050565b6000610e0c60268361104c565b9150610e17826111c1565b604082019050919050565b6000610e2f60378361104c565b9150610e3a82611210565b604082019050919050565b6000610e5260208361104c565b9150610e5d8261125f565b602082019050919050565b6000610e7560168361104c565b9150610e8082611288565b602082019050919050565b6000610e9860218361104c565b9150610ea3826112b1565b604082019050919050565b6000610ebb602d8361104c565b9150610ec682611300565b604082019050919050565b610eda8161109b565b82525050565b6000610eec8284610dab565b915081905092915050565b6000602082019050610f0c6000830184610d8d565b92915050565b6000604082019050610f276000830185610d8d565b610f346020830184610ed1565b9392505050565b6000602082019050610f506000830184610d9c565b92915050565b60006020820190508181036000830152610f6f81610ddc565b9050919050565b60006020820190508181036000830152610f8f81610dff565b9050919050565b60006020820190508181036000830152610faf81610e22565b9050919050565b60006020820190508181036000830152610fcf81610e45565b9050919050565b60006020820190508181036000830152610fef81610e68565b9050919050565b6000602082019050818103600083015261100f81610e8b565b9050919050565b6000602082019050818103600083015261102f81610eae565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006110688261107b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156110c35780820151818401526020810190506110a8565b838111156110d2576000848401525b50505050565b60006110e38261109b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561111657611115611121565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f506f77657265643a206973206e6f742073687574646f776e0000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f526577617264506f6f6c3a206f6e6c7920636f6e74726f6c6c65722063616e2060008201527f77697468647261772061667465722073687574646f776e000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f506f77657265643a206973206e6f74206f6e6c696e6500000000000000000000600082015250565b7f526577617264506f6f6c3a20726563697069656e74206e6f7420646566696e6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6113588161105d565b811461136357600080fd5b50565b61136f8161106f565b811461137a57600080fd5b50565b6113868161109b565b811461139157600080fd5b5056fea2646970667358221220470ff9a7da6f37e655143ac13e6b938a7a3b7f74b8ef6921c9957c8976f243e464736f6c63430008060033a26469706673582212206c65a271c5e46d98dc96bf603c03fc6f83ae3c94f4586155df05d6d7544b3d6164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Reward Pool Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8374,
        "contract": "alchemist/contracts/aludel/RewardPoolFactory.sol:RewardPoolFactory",
        "label": "_instanceSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)3387_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3387_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3386,
            "contract": "alchemist/contracts/aludel/RewardPoolFactory.sol:RewardPoolFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3086_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3086_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3081,
            "contract": "alchemist/contracts/aludel/RewardPoolFactory.sol:RewardPoolFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3085,
            "contract": "alchemist/contracts/aludel/RewardPoolFactory.sol:RewardPoolFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}