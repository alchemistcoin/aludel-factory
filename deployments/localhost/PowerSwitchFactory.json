{
  "address": "0x714c057645161697a6E98767B534A07cFC0f2E7b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "InstanceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "InstanceRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "create2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "instanceAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instanceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "isInstance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "validity",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2c9bee3e3106adbf67db6c0bc803d6f7ecbdd449aaa7db96015d68336473b21",
  "receipt": {
    "to": null,
    "from": "0x844eAb6D943B1Db987786a2469D7A0bCCd38ddDc",
    "contractAddress": "0x714c057645161697a6E98767B534A07cFC0f2E7b",
    "transactionIndex": 0,
    "gasUsed": "1582658",
    "logsBloom": "0x
    "blockHash": "0xf7e37e4e6af97670d148ac951308937dd1a534e918093f731e41a500452ec601",
    "transactionHash": "0xe2c9bee3e3106adbf67db6c0bc803d6f7ecbdd449aaa7db96015d68336473b21",
    "logs": [],
    "blockNumber": 14169007,
    "cumulativeGasUsed": "1582658",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "88e0d896de96a01028c74f4e22f8120f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"InstanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"InstanceRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"create2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"instanceAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instanceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"isInstance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Power Switch Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/powerSwitch/PowerSwitchFactory.sol\":\"PowerSwitchFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"alchemist/contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface IFactory {\\n    function create(bytes calldata args) external returns (address instance);\\n\\n    function create2(bytes calldata args, bytes32 salt) external returns (address instance);\\n}\\n\",\"keccak256\":\"0x9aae95b220be96434e10884dabd1a4167942800b6b828bf75541eca818f6560c\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/factory/InstanceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IInstanceRegistry {\\n    /* events */\\n\\n    event InstanceAdded(address instance);\\n    event InstanceRemoved(address instance);\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) external view returns (bool validity);\\n\\n    function instanceCount() external view returns (uint256 count);\\n\\n    function instanceAt(uint256 index) external view returns (address instance);\\n}\\n\\n/// @title InstanceRegistry\\ncontract InstanceRegistry is IInstanceRegistry {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* storage */\\n\\n    EnumerableSet.AddressSet private _instanceSet;\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) public view override returns (bool validity) {\\n        return _instanceSet.contains(instance);\\n    }\\n\\n    function instanceCount() public view override returns (uint256 count) {\\n        return _instanceSet.length();\\n    }\\n\\n    function instanceAt(uint256 index) public view override returns (address instance) {\\n        return _instanceSet.at(index);\\n    }\\n\\n    /* admin functions */\\n\\n    function _register(address instance) internal {\\n        require(_instanceSet.add(instance), \\\"InstanceRegistry: already registered\\\");\\n        emit InstanceAdded(instance);\\n    }\\n}\\n\",\"keccak256\":\"0xc74100043198fc3a6db43919a8b11a6bdf9a33f3f22c5577ed565c268898205d\",\"license\":\"GPL-3.0-only\"},\"src/contracts/powerSwitch/PowerSwitch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IPowerSwitch {\\n    /* admin events */\\n\\n    event PowerOn();\\n    event PowerOff();\\n    event EmergencyShutdown();\\n\\n    /* data types */\\n\\n    enum State {\\n        Online,\\n        Offline,\\n        Shutdown,\\n        NotStarted\\n    }\\n\\n    /* admin functions */\\n\\n    function powerOn() external;\\n\\n    function powerOff() external;\\n\\n    function emergencyShutdown() external;\\n\\n    /* view functions */\\n\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getStatus() external view returns (State status);\\n\\n    function getStartTime() external view returns (uint64 startTime);\\n\\n    function getPowerController()\\n        external\\n        view\\n        returns (address controller);\\n}\\n\\n/// @title PowerSwitch\\n/// @notice Standalone pausing and emergency stop functionality\\ncontract PowerSwitch is IPowerSwitch, Ownable {\\n    /* storage */\\n\\n    uint64 private _startTimestamp;\\n    IPowerSwitch.State private _status;\\n\\n    error PowerSwitch_CannotPowerOn();\\n    error PowerSwitch_InvalidOwner();\\n    error PowerSwitch_CannotPowerOff();\\n    error PowerSwitch_CannotShutdown();\\n\\n    /* initializer */\\n\\n    constructor(address owner, uint64 startTimestamp) {\\n        // sanity check owner\\n        if (owner == address(0)) {\\n            revert PowerSwitch_InvalidOwner();\\n        }\\n\\n        _startTimestamp = startTimestamp;\\n        // transfer ownership\\n        Ownable.transferOwnership(owner);\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Turn Power On\\n    /// access control: only admin\\n    /// state machine: only when offline\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOn() external override onlyOwner {\\n        if (_status != IPowerSwitch.State.Offline) {\\n            revert PowerSwitch_CannotPowerOn();\\n        }\\n        _status = IPowerSwitch.State.Online;\\n        emit PowerOn();\\n    }\\n\\n    /// @notice Turn Power Off\\n    /// access control: only admin\\n    /// state machine: only when online\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOff() external override onlyOwner {\\n        if (_status != IPowerSwitch.State.Online) {\\n            revert PowerSwitch_CannotPowerOff();\\n        }\\n        _status = IPowerSwitch.State.Offline;\\n        emit PowerOff();\\n    }\\n\\n    /// @notice Shutdown Permanently\\n    /// access control: only admin\\n    /// state machine:\\n    /// - when online or offline\\n    /// - can only be called once\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function emergencyShutdown() external override onlyOwner {\\n        if (_status == IPowerSwitch.State.Shutdown) {\\n            revert PowerSwitch_CannotShutdown();\\n        }\\n        _status = IPowerSwitch.State.Shutdown;\\n        emit EmergencyShutdown();\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() external view override returns (bool status) {\\n        return _status == State.Online;\\n    }\\n\\n    function isOffline() external view override returns (bool status) {\\n        return _status == State.Offline;\\n    }\\n\\n    function isShutdown() external view override returns (bool status) {\\n        return _status == State.Shutdown;\\n    }\\n\\n    function getStatus()\\n        external\\n        view\\n        override\\n        returns (IPowerSwitch.State status)\\n    {\\n        // if the current timestamp is greater than _startTimestamp or status is not online\\n        // we return the switch' status\\n        if (block.timestamp >= uint256(_startTimestamp) || _status != State.Online) {\\n            return _status;\\n        } else {\\n            return State.NotStarted;\\n        }\\n    }\\n\\n    function getStartTime()\\n        external\\n        view\\n        override\\n        returns (uint64 startTime)\\n    {\\n        return _startTimestamp;\\n    }\\n\\n    function getPowerController()\\n        external\\n        view\\n        override\\n        returns (address controller)\\n    {\\n        return Ownable.owner();\\n    }\\n}\",\"keccak256\":\"0xade45cbf9ea9bc33cd5b20fcaba6dfe44ce8faad5155872b26b91953a0501d5e\",\"license\":\"GPL-3.0-only\"},\"src/contracts/powerSwitch/PowerSwitchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {IFactory} from \\\"alchemist/contracts/factory/IFactory.sol\\\";\\nimport {InstanceRegistry} from \\\"alchemist/contracts/factory/InstanceRegistry.sol\\\";\\nimport {PowerSwitch} from \\\"./PowerSwitch.sol\\\";\\n\\n/// @title Power Switch Factory\\ncontract PowerSwitchFactory is IFactory, InstanceRegistry {\\n    function create(bytes calldata args)\\n        external\\n        override\\n        returns (address)\\n    {\\n        (address owner, uint64 startTimestamp) =\\n            abi.decode(args, (address, uint64));\\n        PowerSwitch powerSwitch = new PowerSwitch(owner, startTimestamp);\\n        InstanceRegistry._register(address(powerSwitch));\\n        return address(powerSwitch);\\n    }\\n\\n    function create2(bytes calldata, bytes32)\\n        external\\n        pure\\n        override\\n        returns (address)\\n    {\\n        revert(\\\"PowerSwitchFactory: unused function\\\");\\n    }\\n}\",\"keccak256\":\"0x5fc6110edb209a64a6f340fab4c3227b2720881f90af0554dc8ad0f7a095585c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611bdb806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806311d8293e14620000635780636b44e6be14620000995780638c0b8db214620000cf578063cf5ba53f1462000105578063ec56c716146200013b575b600080fd5b6200008160048036038101906200007b919062000676565b6200015d565b6040516200009091906200073a565b60405180910390f35b620000b76004803603810190620000b191906200053e565b6200017c565b604051620000c6919062000784565b60405180910390f35b620000ed6004803603810190620000e791906200060c565b6200019b565b604051620000fc91906200073a565b60405180910390f35b6200012360048036038101906200011d9190620005b7565b620001da565b6040516200013291906200073a565b60405180910390f35b620001456200024a565b604051620001549190620007e5565b60405180910390f35b6000620001758260006200025d90919063ffffffff16565b9050919050565b6000620001948260006200027990919063ffffffff16565b9050919050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001d190620007c3565b60405180910390fd5b60008060008484810190620001f0919062000570565b915091506000828260405162000206906200045e565b6200021392919062000757565b604051809103906000f08015801562000230573d6000803e3d6000fd5b5090506200023e81620002ab565b80935050505092915050565b60006200025860006200033f565b905090565b60006200026e836000018362000356565b60001c905092915050565b6000620002a3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000384565b905092915050565b620002c1816000620003a790919063ffffffff16565b62000303576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002fa90620007a1565b60405180910390fd5b7fee3a98e49d5a27452a99d57c90a7f73d4b2e44de88c6ded02e69c4ed964edd5a816040516200033491906200073a565b60405180910390a150565b60006200034f82600001620003d9565b9050919050565b60008260000182815481106200037157620003706200088f565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000620003d1836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003ea565b905092915050565b600081600001805490509050919050565b6000620003f8838362000384565b6200045357826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000458565b600090505b92915050565b6111ae80620009f883390190565b6000813590506200047d8162000975565b92915050565b60008135905062000494816200098f565b92915050565b600081359050620004ab81620009a9565b92915050565b60008083601f840112620004ca57620004c9620008c3565b5b8235905067ffffffffffffffff811115620004ea57620004e9620008be565b5b602083019150836001820283011115620005095762000508620008c8565b5b9250929050565b6000813590506200052181620009c3565b92915050565b6000813590506200053881620009dd565b92915050565b600060208284031215620005575762000556620008d2565b5b600062000567848285016200046c565b91505092915050565b600080604083850312156200058a5762000589620008d2565b5b60006200059a8582860162000483565b9250506020620005ad8582860162000527565b9150509250929050565b60008060208385031215620005d157620005d0620008d2565b5b600083013567ffffffffffffffff811115620005f257620005f1620008cd565b5b6200060085828601620004b1565b92509250509250929050565b600080600060408486031215620006285762000627620008d2565b5b600084013567ffffffffffffffff811115620006495762000648620008cd565b5b6200065786828701620004b1565b935093505060206200066c868287016200049a565b9150509250925092565b6000602082840312156200068f576200068e620008d2565b5b60006200069f8482850162000510565b91505092915050565b620006b38162000813565b82525050565b620006c4816200083b565b82525050565b6000620006d960248362000802565b9150620006e682620008d7565b604082019050919050565b60006200070060238362000802565b91506200070d8262000926565b604082019050919050565b620007238162000871565b82525050565b62000734816200087b565b82525050565b6000602082019050620007516000830184620006a8565b92915050565b60006040820190506200076e6000830185620006a8565b6200077d602083018462000729565b9392505050565b60006020820190506200079b6000830184620006b9565b92915050565b60006020820190508181036000830152620007bc81620006ca565b9050919050565b60006020820190508181036000830152620007de81620006f1565b9050919050565b6000602082019050620007fc600083018462000718565b92915050565b600082825260208201905092915050565b6000620008208262000851565b9050919050565b6000620008348262000851565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f496e7374616e636552656769737472793a20616c72656164792072656769737460008201527f6572656400000000000000000000000000000000000000000000000000000000602082015250565b7f506f776572537769746368466163746f72793a20756e757365642066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b620009808162000813565b81146200098c57600080fd5b50565b6200099a8162000827565b8114620009a657600080fd5b50565b620009b48162000847565b8114620009c057600080fd5b50565b620009ce8162000871565b8114620009da57600080fd5b50565b620009e8816200087b565b8114620009f457600080fd5b5056fe60806040523480156200001157600080fd5b50604051620011ae380380620011ae83398181016040528101906200003791906200033f565b620000576200004b6200010660201b60201c565b6200010e60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000bf576040517f198099e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550620000fe82620001d260201b620007b31760201c565b505062000522565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001e26200010660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000208620002e860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000261576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025890620003f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002cb90620003d4565b60405180910390fd5b620002e5816200010e60201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000815190506200032281620004ee565b92915050565b600081519050620003398162000508565b92915050565b6000806040838503121562000359576200035862000471565b5b6000620003698582860162000311565b92505060206200037c8582860162000328565b9150509250929050565b60006200039560268362000418565b9150620003a28262000476565b604082019050919050565b6000620003bc60208362000418565b9150620003c982620004c5565b602082019050919050565b60006020820190508181036000830152620003ef8162000386565b9050919050565b600060208201905081810360008301526200041181620003ad565b9050919050565b600082825260208201905092915050565b600062000436826200043d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b620004f98162000429565b81146200050557600080fd5b50565b62000513816200045d565b81146200051f57600080fd5b50565b610c7c80620005326000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063766f13bc11610071578063766f13bc146101315780638da5cb5b1461014f578063bf86d6901461016d578063c828371e1461018b578063efe68982146101a9578063f2fde38b146101b3576100b4565b806314fbf5cc146100b95780633403c2fc146100c3578063438cae7e146100cd5780634e69d560146100eb578063664ab18e14610109578063715018a614610127575b600080fd5b6100c16101cf565b005b6100cb610311565b005b6100d5610454565b6040516100e29190610a56565b60405180910390f35b6100f3610492565b6040516101009190610a71565b60405180910390f35b61011161051a565b60405161011e9190610a56565b60405180910390f35b61012f610557565b005b6101396105df565b6040516101469190610a3b565b60405180910390f35b6101576105ee565b6040516101649190610a3b565b60405180910390f35b610175610617565b6040516101829190610a56565b60405180910390f35b610193610655565b6040516101a09190610acc565b60405180910390f35b6101b1610672565b005b6101cd60048036038101906101c8919061098c565b6107b3565b005b6101d76108ab565b73ffffffffffffffffffffffffffffffffffffffff166101f56105ee565b73ffffffffffffffffffffffffffffffffffffffff161461024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610aac565b60405180910390fd5b6000600381111561025f5761025e610b6f565b5b6000601c9054906101000a900460ff16600381111561028157610280610b6f565b5b146102b8576040517f65fb378500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000601c6101000a81548160ff021916908360038111156102de576102dd610b6f565b5b02179055507f3f10cc673bb08c6ec06120804bfd562bd9edeaeff24a1eb7da3db0147de8ea0160405160405180910390a1565b6103196108ab565b73ffffffffffffffffffffffffffffffffffffffff166103376105ee565b73ffffffffffffffffffffffffffffffffffffffff161461038d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038490610aac565b60405180910390fd5b600260038111156103a1576103a0610b6f565b5b6000601c9054906101000a900460ff1660038111156103c3576103c2610b6f565b5b14156103fb576040517fd5a3a3b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000601c6101000a81548160ff0219169083600381111561042157610420610b6f565b5b02179055507ff443ecad8d837e188abcabbbd02f1057b0d94896a09d5b97b2eb4bb445b94de860405160405180910390a1565b60006001600381111561046a57610469610b6f565b5b6000601c9054906101000a900460ff16600381111561048c5761048b610b6f565b5b14905090565b60008060149054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015806104f65750600060038111156104d1576104d0610b6f565b5b6000601c9054906101000a900460ff1660038111156104f3576104f2610b6f565b5b14155b15610512576000601c9054906101000a900460ff169050610517565b600390505b90565b600080600381111561052f5761052e610b6f565b5b6000601c9054906101000a900460ff16600381111561055157610550610b6f565b5b14905090565b61055f6108ab565b73ffffffffffffffffffffffffffffffffffffffff1661057d6105ee565b73ffffffffffffffffffffffffffffffffffffffff16146105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90610aac565b60405180910390fd5b6105dd60006108b3565b565b60006105e96105ee565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002600381111561062d5761062c610b6f565b5b6000601c9054906101000a900460ff16600381111561064f5761064e610b6f565b5b14905090565b60008060149054906101000a900467ffffffffffffffff16905090565b61067a6108ab565b73ffffffffffffffffffffffffffffffffffffffff166106986105ee565b73ffffffffffffffffffffffffffffffffffffffff16146106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590610aac565b60405180910390fd5b6001600381111561070257610701610b6f565b5b6000601c9054906101000a900460ff16600381111561072457610723610b6f565b5b1461075b576040517f8f4de58400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080601c6101000a81548160ff021916908360038111156107805761077f610b6f565b5b02179055507fd2ccdbf8763990e0fcff9e0d5c5867bcc73af876f85f1a8a65e868db95bf074c60405160405180910390a1565b6107bb6108ab565b73ffffffffffffffffffffffffffffffffffffffff166107d96105ee565b73ffffffffffffffffffffffffffffffffffffffff161461082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690610aac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089690610a8c565b60405180910390fd5b6108a8816108b3565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061098681610c2f565b92915050565b6000602082840312156109a2576109a1610b9e565b5b60006109b084828501610977565b91505092915050565b6109c281610af8565b82525050565b6109d181610b0a565b82525050565b6109e081610b5d565b82525050565b60006109f3602683610ae7565b91506109fe82610ba3565b604082019050919050565b6000610a16602083610ae7565b9150610a2182610bf2565b602082019050919050565b610a3581610b49565b82525050565b6000602082019050610a5060008301846109b9565b92915050565b6000602082019050610a6b60008301846109c8565b92915050565b6000602082019050610a8660008301846109d7565b92915050565b60006020820190508181036000830152610aa5816109e6565b9050919050565b60006020820190508181036000830152610ac581610a09565b9050919050565b6000602082019050610ae16000830184610a2c565b92915050565b600082825260208201905092915050565b6000610b0382610b29565b9050919050565b60008115159050919050565b6000819050610b2482610c1b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610b6882610b16565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60048110610c2c57610c2b610b6f565b5b50565b610c3881610af8565b8114610c4357600080fd5b5056fea2646970667358221220b07f3a289d9f688aeae7ee72fb1f9a30d4680e517d5a02ce45292d213629265d64736f6c63430008060033a2646970667358221220023387bdab5791b4d8e2362de0befdbe6fd1f5ef8b5638ab9b7e58754393ef4f64736f6c63430008060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806311d8293e14620000635780636b44e6be14620000995780638c0b8db214620000cf578063cf5ba53f1462000105578063ec56c716146200013b575b600080fd5b6200008160048036038101906200007b919062000676565b6200015d565b6040516200009091906200073a565b60405180910390f35b620000b76004803603810190620000b191906200053e565b6200017c565b604051620000c6919062000784565b60405180910390f35b620000ed6004803603810190620000e791906200060c565b6200019b565b604051620000fc91906200073a565b60405180910390f35b6200012360048036038101906200011d9190620005b7565b620001da565b6040516200013291906200073a565b60405180910390f35b620001456200024a565b604051620001549190620007e5565b60405180910390f35b6000620001758260006200025d90919063ffffffff16565b9050919050565b6000620001948260006200027990919063ffffffff16565b9050919050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001d190620007c3565b60405180910390fd5b60008060008484810190620001f0919062000570565b915091506000828260405162000206906200045e565b6200021392919062000757565b604051809103906000f08015801562000230573d6000803e3d6000fd5b5090506200023e81620002ab565b80935050505092915050565b60006200025860006200033f565b905090565b60006200026e836000018362000356565b60001c905092915050565b6000620002a3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000384565b905092915050565b620002c1816000620003a790919063ffffffff16565b62000303576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002fa90620007a1565b60405180910390fd5b7fee3a98e49d5a27452a99d57c90a7f73d4b2e44de88c6ded02e69c4ed964edd5a816040516200033491906200073a565b60405180910390a150565b60006200034f82600001620003d9565b9050919050565b60008260000182815481106200037157620003706200088f565b5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000620003d1836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003ea565b905092915050565b600081600001805490509050919050565b6000620003f8838362000384565b6200045357826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000458565b600090505b92915050565b6111ae80620009f883390190565b6000813590506200047d8162000975565b92915050565b60008135905062000494816200098f565b92915050565b600081359050620004ab81620009a9565b92915050565b60008083601f840112620004ca57620004c9620008c3565b5b8235905067ffffffffffffffff811115620004ea57620004e9620008be565b5b602083019150836001820283011115620005095762000508620008c8565b5b9250929050565b6000813590506200052181620009c3565b92915050565b6000813590506200053881620009dd565b92915050565b600060208284031215620005575762000556620008d2565b5b600062000567848285016200046c565b91505092915050565b600080604083850312156200058a5762000589620008d2565b5b60006200059a8582860162000483565b9250506020620005ad8582860162000527565b9150509250929050565b60008060208385031215620005d157620005d0620008d2565b5b600083013567ffffffffffffffff811115620005f257620005f1620008cd565b5b6200060085828601620004b1565b92509250509250929050565b600080600060408486031215620006285762000627620008d2565b5b600084013567ffffffffffffffff811115620006495762000648620008cd565b5b6200065786828701620004b1565b935093505060206200066c868287016200049a565b9150509250925092565b6000602082840312156200068f576200068e620008d2565b5b60006200069f8482850162000510565b91505092915050565b620006b38162000813565b82525050565b620006c4816200083b565b82525050565b6000620006d960248362000802565b9150620006e682620008d7565b604082019050919050565b60006200070060238362000802565b91506200070d8262000926565b604082019050919050565b620007238162000871565b82525050565b62000734816200087b565b82525050565b6000602082019050620007516000830184620006a8565b92915050565b60006040820190506200076e6000830185620006a8565b6200077d602083018462000729565b9392505050565b60006020820190506200079b6000830184620006b9565b92915050565b60006020820190508181036000830152620007bc81620006ca565b9050919050565b60006020820190508181036000830152620007de81620006f1565b9050919050565b6000602082019050620007fc600083018462000718565b92915050565b600082825260208201905092915050565b6000620008208262000851565b9050919050565b6000620008348262000851565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f496e7374616e636552656769737472793a20616c72656164792072656769737460008201527f6572656400000000000000000000000000000000000000000000000000000000602082015250565b7f506f776572537769746368466163746f72793a20756e757365642066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b620009808162000813565b81146200098c57600080fd5b50565b6200099a8162000827565b8114620009a657600080fd5b50565b620009b48162000847565b8114620009c057600080fd5b50565b620009ce8162000871565b8114620009da57600080fd5b50565b620009e8816200087b565b8114620009f457600080fd5b5056fe60806040523480156200001157600080fd5b50604051620011ae380380620011ae83398181016040528101906200003791906200033f565b620000576200004b6200010660201b60201c565b6200010e60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000bf576040517f198099e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550620000fe82620001d260201b620007b31760201c565b505062000522565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001e26200010660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000208620002e860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000261576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025890620003f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002cb90620003d4565b60405180910390fd5b620002e5816200010e60201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000815190506200032281620004ee565b92915050565b600081519050620003398162000508565b92915050565b6000806040838503121562000359576200035862000471565b5b6000620003698582860162000311565b92505060206200037c8582860162000328565b9150509250929050565b60006200039560268362000418565b9150620003a28262000476565b604082019050919050565b6000620003bc60208362000418565b9150620003c982620004c5565b602082019050919050565b60006020820190508181036000830152620003ef8162000386565b9050919050565b600060208201905081810360008301526200041181620003ad565b9050919050565b600082825260208201905092915050565b600062000436826200043d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b620004f98162000429565b81146200050557600080fd5b50565b62000513816200045d565b81146200051f57600080fd5b50565b610c7c80620005326000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063766f13bc11610071578063766f13bc146101315780638da5cb5b1461014f578063bf86d6901461016d578063c828371e1461018b578063efe68982146101a9578063f2fde38b146101b3576100b4565b806314fbf5cc146100b95780633403c2fc146100c3578063438cae7e146100cd5780634e69d560146100eb578063664ab18e14610109578063715018a614610127575b600080fd5b6100c16101cf565b005b6100cb610311565b005b6100d5610454565b6040516100e29190610a56565b60405180910390f35b6100f3610492565b6040516101009190610a71565b60405180910390f35b61011161051a565b60405161011e9190610a56565b60405180910390f35b61012f610557565b005b6101396105df565b6040516101469190610a3b565b60405180910390f35b6101576105ee565b6040516101649190610a3b565b60405180910390f35b610175610617565b6040516101829190610a56565b60405180910390f35b610193610655565b6040516101a09190610acc565b60405180910390f35b6101b1610672565b005b6101cd60048036038101906101c8919061098c565b6107b3565b005b6101d76108ab565b73ffffffffffffffffffffffffffffffffffffffff166101f56105ee565b73ffffffffffffffffffffffffffffffffffffffff161461024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610aac565b60405180910390fd5b6000600381111561025f5761025e610b6f565b5b6000601c9054906101000a900460ff16600381111561028157610280610b6f565b5b146102b8576040517f65fb378500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000601c6101000a81548160ff021916908360038111156102de576102dd610b6f565b5b02179055507f3f10cc673bb08c6ec06120804bfd562bd9edeaeff24a1eb7da3db0147de8ea0160405160405180910390a1565b6103196108ab565b73ffffffffffffffffffffffffffffffffffffffff166103376105ee565b73ffffffffffffffffffffffffffffffffffffffff161461038d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038490610aac565b60405180910390fd5b600260038111156103a1576103a0610b6f565b5b6000601c9054906101000a900460ff1660038111156103c3576103c2610b6f565b5b14156103fb576040517fd5a3a3b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000601c6101000a81548160ff0219169083600381111561042157610420610b6f565b5b02179055507ff443ecad8d837e188abcabbbd02f1057b0d94896a09d5b97b2eb4bb445b94de860405160405180910390a1565b60006001600381111561046a57610469610b6f565b5b6000601c9054906101000a900460ff16600381111561048c5761048b610b6f565b5b14905090565b60008060149054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015806104f65750600060038111156104d1576104d0610b6f565b5b6000601c9054906101000a900460ff1660038111156104f3576104f2610b6f565b5b14155b15610512576000601c9054906101000a900460ff169050610517565b600390505b90565b600080600381111561052f5761052e610b6f565b5b6000601c9054906101000a900460ff16600381111561055157610550610b6f565b5b14905090565b61055f6108ab565b73ffffffffffffffffffffffffffffffffffffffff1661057d6105ee565b73ffffffffffffffffffffffffffffffffffffffff16146105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90610aac565b60405180910390fd5b6105dd60006108b3565b565b60006105e96105ee565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002600381111561062d5761062c610b6f565b5b6000601c9054906101000a900460ff16600381111561064f5761064e610b6f565b5b14905090565b60008060149054906101000a900467ffffffffffffffff16905090565b61067a6108ab565b73ffffffffffffffffffffffffffffffffffffffff166106986105ee565b73ffffffffffffffffffffffffffffffffffffffff16146106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590610aac565b60405180910390fd5b6001600381111561070257610701610b6f565b5b6000601c9054906101000a900460ff16600381111561072457610723610b6f565b5b1461075b576040517f8f4de58400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080601c6101000a81548160ff021916908360038111156107805761077f610b6f565b5b02179055507fd2ccdbf8763990e0fcff9e0d5c5867bcc73af876f85f1a8a65e868db95bf074c60405160405180910390a1565b6107bb6108ab565b73ffffffffffffffffffffffffffffffffffffffff166107d96105ee565b73ffffffffffffffffffffffffffffffffffffffff161461082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690610aac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561089f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089690610a8c565b60405180910390fd5b6108a8816108b3565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061098681610c2f565b92915050565b6000602082840312156109a2576109a1610b9e565b5b60006109b084828501610977565b91505092915050565b6109c281610af8565b82525050565b6109d181610b0a565b82525050565b6109e081610b5d565b82525050565b60006109f3602683610ae7565b91506109fe82610ba3565b604082019050919050565b6000610a16602083610ae7565b9150610a2182610bf2565b602082019050919050565b610a3581610b49565b82525050565b6000602082019050610a5060008301846109b9565b92915050565b6000602082019050610a6b60008301846109c8565b92915050565b6000602082019050610a8660008301846109d7565b92915050565b60006020820190508181036000830152610aa5816109e6565b9050919050565b60006020820190508181036000830152610ac581610a09565b9050919050565b6000602082019050610ae16000830184610a2c565b92915050565b600082825260208201905092915050565b6000610b0382610b29565b9050919050565b60008115159050919050565b6000819050610b2482610c1b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000610b6882610b16565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60048110610c2c57610c2b610b6f565b5b50565b610c3881610af8565b8114610c4357600080fd5b5056fea2646970667358221220b07f3a289d9f688aeae7ee72fb1f9a30d4680e517d5a02ce45292d213629265d64736f6c63430008060033a2646970667358221220023387bdab5791b4d8e2362de0befdbe6fd1f5ef8b5638ab9b7e58754393ef4f64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Power Switch Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8374,
        "contract": "src/contracts/powerSwitch/PowerSwitchFactory.sol:PowerSwitchFactory",
        "label": "_instanceSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)3387_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3387_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3386,
            "contract": "src/contracts/powerSwitch/PowerSwitchFactory.sol:PowerSwitchFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3086_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3086_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3081,
            "contract": "src/contracts/powerSwitch/PowerSwitchFactory.sol:PowerSwitchFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3085,
            "contract": "src/contracts/powerSwitch/PowerSwitchFactory.sol:PowerSwitchFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}