{
  "address": "0x670F8689A8e0D918Cd1Cc014AaeFd66E94AE8259",
  "abi": [
    {
      "inputs": [],
      "name": "FloorAboveCeiling",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientVaultStake",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxBonusTokensReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxStakesReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAmountStaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoAmountUnstaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStakes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Powered_IsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Powered_NotOffline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Powered_NotOnline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Powered_NotShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Powered_NotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ScalingTimeIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultFactoryNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "powerSwitch",
          "type": "address"
        }
      ],
      "name": "AludelCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "AludelFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "BonusTokenRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "VaultFactoryRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "VaultFactoryRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_SHARES_PER_WEI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_STAKES_PER_VAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unlockedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakeUnits",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "floor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ceiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAludel.RewardScaling",
          "name": "rewardScaling",
          "type": "tuple"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAludel.StakeData[]",
          "name": "stakes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStakeUnits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "floor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ceiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAludel.RewardScaling",
          "name": "rewardScaling",
          "type": "tuple"
        }
      ],
      "name": "calculateRewardFromStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lastStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newStakesCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newTotalStakeUnits",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAludel.RewardOutput",
          "name": "out",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "calculateStakeUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeUnits",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAludel.StakeData[]",
          "name": "stakes",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateTotalStakeUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStakeUnits",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAludel.RewardSchedule[]",
          "name": "rewardSchedules",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "rewardBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharesOutstanding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "calculateUnlockedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unlockedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAludelData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardPool",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "floor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ceiling",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "time",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAludel.RewardScaling",
              "name": "rewardScaling",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "rewardSharesOutstanding",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakeUnits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAludel.RewardSchedule[]",
              "name": "rewardSchedules",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IAludel.AludelData",
          "name": "aludel",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBonusTokenAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "bonusToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBonusTokenSetLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "getCurrentStakeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTotalStakeUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStakeUnits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentUnlockedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unlockedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getCurrentVaultReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getCurrentVaultStakeUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeUnits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFutureStakeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFutureTotalStakeUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStakeUnits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFutureUnlockedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unlockedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFutureVaultReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getFutureVaultStakeUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeUnits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPowerController",
      "outputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPowerSwitch",
      "outputs": [
        {
          "internalType": "address",
          "name": "powerSwitch",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getVaultData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IAludel.StakeData[]",
              "name": "stakes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IAludel.VaultData",
          "name": "vaultData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVaultFactoryAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultFactorySetLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "feeBps",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOffline",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOnline",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isShutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isValidAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "validity",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isValidVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "validity",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rageQuit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bonusToken",
          "type": "address"
        }
      ],
      "name": "registerBonusToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "registerVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "removeVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokensFromRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "permission",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "permission",
          "type": "bytes"
        }
      ],
      "name": "unstakeAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x851ba52672f8655ec2e53afbf25a80823b50abffaeeb4c6b2b648539bc1d177e",
  "receipt": {
    "to": null,
    "from": "0x844eAb6D943B1Db987786a2469D7A0bCCd38ddDc",
    "contractAddress": "0x670F8689A8e0D918Cd1Cc014AaeFd66E94AE8259",
    "transactionIndex": 0,
    "gasUsed": "5077180",
    "logsBloom": "0x
    "blockHash": "0x1f4f123fdc7005bf5b51bff5957b94c7d4ca03b6c7f5ef86caf5d4aa9c40eca1",
    "transactionHash": "0x851ba52672f8655ec2e53afbf25a80823b50abffaeeb4c6b2b648539bc1d177e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14169003,
        "transactionHash": "0x851ba52672f8655ec2e53afbf25a80823b50abffaeeb4c6b2b648539bc1d177e",
        "address": "0x670F8689A8e0D918Cd1Cc014AaeFd66E94AE8259",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000844eab6d943b1db987786a2469d7a0bccd38dddc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1f4f123fdc7005bf5b51bff5957b94c7d4ca03b6c7f5ef86caf5d4aa9c40eca1"
      }
    ],
    "blockNumber": 14169003,
    "cumulativeGasUsed": "5077180",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dfe48c90b674f1a9e4bff3aae11b237a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FloorAboveCeiling\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientVaultStake\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBonusTokensReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxStakesReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAmountStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAmountUnstaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStakes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Powered_IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Powered_NotOffline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Powered_NotOnline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Powered_NotShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Powered_NotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScalingTimeIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultFactoryNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"powerSwitch\",\"type\":\"address\"}],\"name\":\"AludelCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AludelFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BonusTokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"VaultFactoryRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"VaultFactoryRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_SHARES_PER_WEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKES_PER_VAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.RewardScaling\",\"name\":\"rewardScaling\",\"type\":\"tuple\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.StakeData[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.RewardScaling\",\"name\":\"rewardScaling\",\"type\":\"tuple\"}],\"name\":\"calculateRewardFromStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTotalStakeUnits\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.RewardOutput\",\"name\":\"out\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"calculateStakeUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeUnits\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.StakeData[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateTotalStakeUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.RewardSchedule[]\",\"name\":\"rewardSchedules\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateUnlockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAludelData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.RewardScaling\",\"name\":\"rewardScaling\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rewardSharesOutstanding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.RewardSchedule[]\",\"name\":\"rewardSchedules\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IAludel.AludelData\",\"name\":\"aludel\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBonusTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bonusToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonusTokenSetLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"getCurrentStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalStakeUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentUnlockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getCurrentVaultReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getCurrentVaultStakeUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeUnits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getFutureStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getFutureTotalStakeUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getFutureUnlockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getFutureVaultReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getFutureVaultStakeUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeUnits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPowerController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPowerSwitch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"powerSwitch\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getVaultData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IAludel.StakeData[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IAludel.VaultData\",\"name\":\"vaultData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVaultFactoryAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultFactorySetLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOffline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isValidAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isValidVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rageQuit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonusToken\",\"type\":\"address\"}],\"name\":\"registerBonusToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"registerVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"removeVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokensFromRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permission\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permission\",\"type\":\"bytes\"}],\"name\":\"unstakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fund(uint256,uint256)\":{\"params\":{\"amount\":\"uint256 Amount of reward tokens to deposit\",\"duration\":\"uint256 Duration over which to linearly unlock rewards\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rageQuit()\":{\"details\":\"This function should never revert when correctly called by the vault.      A max number of stakes per vault is set with MAX_STAKES_PER_VAULT to      place an upper bound on the for loop in calculateTotalStakeUnits(). access control: only callable by the vault directly state machine:   - when vault exists on this Aludel   - when active stake from this vault   - any power state state scope:   - decrease _aludel.totalStake   - increase _aludel.lastUpdate   - modify _aludel.totalStakeUnits   - delete _vaults[vault] token transfer: none\"},\"registerBonusToken(address)\":{\"details\":\"use this function to enable distribution of any ERC20 held by the RewardPool contract access control: only admin state machine:   - can be called multiple times   - only online state scope:   - append to _bonusTokenSet token transfer: none\",\"params\":{\"bonusToken\":\"address The address of the bonus token\"}},\"registerVaultFactory(address)\":{\"details\":\"use this function to enable stakes to vaults coming from the specified      factory contract access control: only admin state machine:   - can be called multiple times   - not shutdown state scope:   - append to _vaultFactorySet token transfer: none\",\"params\":{\"factory\":\"address The address of the vault factory\"}},\"removeVaultFactory(address)\":{\"details\":\"use this function to disable new stakes to vaults coming from the specified      factory contract.      note: vaults with existing stakes from this factory are sill able to unstake access control: only admin state machine:   - can be called multiple times   - not shutdown state scope:   - remove from _vaultFactorySet token transfer: none\",\"params\":{\"factory\":\"address The address of the vault factory\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueTokensFromRewardPool(address,address,uint256)\":{\"details\":\"use this function to rescue tokens from RewardPool contract      without distributing to stakers or triggering emergency shutdown access control: only admin state machine:   - can be called multiple times   - only online state scope: none token transfer: transfer requested token from RewardPool to recipient\",\"params\":{\"amount\":\"uint256 The amount of tokens to rescue\",\"recipient\":\"address The address of the recipient\",\"token\":\"address The address of the token to rescue\"}},\"stake(address,uint256,bytes)\":{\"params\":{\"amount\":\"uint256 The amount of staking tokens to stake\",\"permission\":\"bytes The signed lock permission for the universal vault\",\"vault\":\"address The address of the vault to stake from\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeAndClaim(address,uint256,bytes)\":{\"details\":\"rewards can only be claimed when unstaking, thus reseting the reward multiplier access control: anyone with a valid permission state machine:   - when vault exists on this Aludel   - after stake from vault   - can be called multiple times while sufficient stake remains   - only online state scope:   - decrease _aludel.rewardSharesOutstanding   - decrease _aludel.totalStake   - increase _aludel.lastUpdate   - modify _aludel.totalStakeUnits   - modify _vaults[vault].stakes   - decrease _vaults[vault].totalStake token transfer:   - transfer reward tokens from reward pool to vault   - transfer bonus tokens from reward pool to vault\",\"params\":{\"amount\":\"uint256 The amount of staking tokens to unstake\",\"permission\":\"bytes The signed lock permission for the universal vault\",\"vault\":\"address The vault to unstake from\"}}},\"title\":\"Aludel\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund(uint256,uint256)\":{\"notice\":\"Add funds to the Aludel access control: only admin state machine:   - can be called multiple times   - only online state scope:   - increase _aludel.rewardSharesOutstanding   - append to _aludel.rewardSchedules token transfer: transfer staking tokens from msg.sender to reward pool\"},\"initialize(uint64,address,address,uint16,bytes)\":{\"notice\":\"Initizalize Aludel access control: only proxy constructor state machine: can only be called once state scope: set initialization variables token transfer: none\"},\"rageQuit()\":{\"notice\":\"Exit Aludel without claiming reward\"},\"registerBonusToken(address)\":{\"notice\":\"Register bonus token for distribution\"},\"registerVaultFactory(address)\":{\"notice\":\"Add vault factory to whitelist\"},\"removeVaultFactory(address)\":{\"notice\":\"Remove vault factory from whitelist\"},\"rescueTokensFromRewardPool(address,address,uint256)\":{\"notice\":\"Rescue tokens from RewardPool\"},\"stake(address,uint256,bytes)\":{\"notice\":\"Stake tokens access control: anyone with a valid permission state machine:   - can be called multiple times   - only online   - when vault exists on this Aludel state scope:   - append to _vaults[vault].stakes   - increase _vaults[vault].totalStake   - increase _aludel.totalStake   - increase _aludel.totalStakeUnits   - increase _aludel.lastUpdate token transfer: transfer staking tokens from msg.sender to vault\"},\"unstakeAndClaim(address,uint256,bytes)\":{\"notice\":\"Unstake staking tokens and claim reward\"}},\"notice\":\"Reward distribution contract with time multiplier Access Control - Power controller:     Can power off / shutdown the Aludel     Can withdraw rewards from reward pool once shutdown - Aludel admin:     Can add funds to the Aludel, register bonus tokens, and whitelist new vault factories     Is a subset of proxy owner permissions - User:     Can deposit / withdraw / ragequit Aludel State Machine - Online:     Aludel is operating normally, all functions are enabled - Offline:     Aludel is temporarely disabled for maintenance     User deposits and withdrawls are disabled, ragequit remains enabled     Users can withdraw their stake through rageQuit() but forego their pending reward     Should only be used when downtime required for an upgrade - Shutdown:     Aludel is permanently disabled     All functions are disabled with the exception of ragequit     Users can withdraw their stake through rageQuit()     Power controller can withdraw from the reward pool     Should only be used if Proxy Owner role is compromized\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/aludel/Aludel.sol\":\"Aludel\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"alchemist/contracts/aludel/Aludel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {IFactory} from \\\"../factory/IFactory.sol\\\";\\nimport {IInstanceRegistry} from \\\"../factory/InstanceRegistry.sol\\\";\\nimport {IUniversalVault} from \\\"../crucible/Crucible.sol\\\";\\nimport {IRewardPool} from \\\"./RewardPool.sol\\\";\\nimport {Powered} from \\\"./Powered.sol\\\";\\n\\ninterface IRageQuit {\\n    function rageQuit() external;\\n}\\n\\ninterface IAludel is IRageQuit {\\n    /* admin events */\\n\\n    event AludelCreated(address rewardPool, address powerSwitch);\\n    event AludelFunded(uint256 amount, uint256 duration);\\n    event BonusTokenRegistered(address token);\\n    event VaultFactoryRegistered(address factory);\\n    event VaultFactoryRemoved(address factory);\\n\\n    /* user events */\\n\\n    event Staked(address vault, uint256 amount);\\n    event Unstaked(address vault, uint256 amount);\\n    event RewardClaimed(address vault, address token, uint256 amount);\\n\\n    /* data types */\\n\\n    struct AludelData {\\n        address stakingToken;\\n        address rewardToken;\\n        address rewardPool;\\n        RewardScaling rewardScaling;\\n        uint256 rewardSharesOutstanding;\\n        uint256 totalStake;\\n        uint256 totalStakeUnits;\\n        uint256 lastUpdate;\\n        RewardSchedule[] rewardSchedules;\\n    }\\n\\n    struct RewardSchedule {\\n        uint256 duration;\\n        uint256 start;\\n        uint256 shares;\\n    }\\n\\n    struct VaultData {\\n        uint256 totalStake;\\n        StakeData[] stakes;\\n    }\\n\\n    struct StakeData {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct RewardScaling {\\n        uint256 floor;\\n        uint256 ceiling;\\n        uint256 time;\\n    }\\n\\n    struct RewardOutput {\\n        uint256 lastStakeAmount;\\n        uint256 newStakesCount;\\n        uint256 reward;\\n        uint256 newTotalStakeUnits;\\n    }\\n\\n    /* user functions */\\n\\n    function stake(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    function unstakeAndClaim(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    /* admin functions */\\n\\n    function fund(uint256 amount, uint256 duration) external;\\n    \\n    function registerVaultFactory(address factory) external;\\n    \\n    function removeVaultFactory(address factory) external;\\n    \\n    function registerBonusToken(address bonusToken) external;\\n\\n    function rescueTokensFromRewardPool(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /* getter functions */\\n\\n    function getAludelData() external view returns (AludelData memory aludel);\\n\\n    function getBonusTokenSetLength() external view returns (uint256 length);\\n\\n    function getBonusTokenAtIndex(uint256 index) external view returns (address bonusToken);\\n\\n    function getVaultFactorySetLength() external view returns (uint256 length);\\n\\n    function getVaultFactoryAtIndex(uint256 index) external view returns (address factory);\\n\\n    function getVaultData(address vault) external view returns (VaultData memory vaultData);\\n\\n    function isValidAddress(address target) external view returns (bool validity);\\n\\n    function isValidVault(address target) external view returns (bool validity);\\n\\n    function getCurrentUnlockedRewards() external view returns (uint256 unlockedRewards);\\n\\n    function getFutureUnlockedRewards(uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 unlockedRewards);\\n\\n    function getCurrentVaultReward(address vault) external view returns (uint256 reward);\\n\\n    function getCurrentStakeReward(address vault, uint256 stakeAmount)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getFutureVaultReward(address vault, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getFutureStakeReward(\\n        address vault,\\n        uint256 stakeAmount,\\n        uint256 timestamp\\n    ) external view returns (uint256 reward);\\n\\n    function getCurrentVaultStakeUnits(address vault) external view returns (uint256 stakeUnits);\\n\\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 stakeUnits);\\n\\n    function getCurrentTotalStakeUnits() external view returns (uint256 totalStakeUnits);\\n\\n    function getFutureTotalStakeUnits(uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 totalStakeUnits);\\n\\n    /* pure functions */\\n\\n    function calculateTotalStakeUnits(StakeData[] memory stakes, uint256 timestamp)\\n        external\\n        pure\\n        returns (uint256 totalStakeUnits);\\n\\n    function calculateStakeUnits(\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n    ) external pure returns (uint256 stakeUnits);\\n\\n    function calculateUnlockedRewards(\\n        RewardSchedule[] memory rewardSchedules,\\n        uint256 rewardBalance,\\n        uint256 sharesOutstanding,\\n        uint256 timestamp\\n    ) external pure returns (uint256 unlockedRewards);\\n\\n    function calculateRewardFromStakes(\\n        StakeData[] memory stakes,\\n        uint256 unstakeAmount,\\n        uint256 unlockedRewards,\\n        uint256 totalStakeUnits,\\n        uint256 timestamp,\\n        RewardScaling memory rewardScaling\\n    ) external pure returns (RewardOutput memory out);\\n\\n    function calculateReward(\\n        uint256 unlockedRewards,\\n        uint256 stakeAmount,\\n        uint256 stakeDuration,\\n        uint256 totalStakeUnits,\\n        RewardScaling memory rewardScaling\\n    ) external pure returns (uint256 reward);\\n}\\n\\n/// @title Aludel\\n/// @notice Reward distribution contract with time multiplier\\n/// Access Control\\n/// - Power controller:\\n///     Can power off / shutdown the Aludel\\n///     Can withdraw rewards from reward pool once shutdown\\n/// - Aludel admin:\\n///     Can add funds to the Aludel, register bonus tokens, and whitelist new vault factories\\n///     Is a subset of proxy owner permissions\\n/// - User:\\n///     Can deposit / withdraw / ragequit\\n/// Aludel State Machine\\n/// - Online:\\n///     Aludel is operating normally, all functions are enabled\\n/// - Offline:\\n///     Aludel is temporarely disabled for maintenance\\n///     User deposits and withdrawls are disabled, ragequit remains enabled\\n///     Users can withdraw their stake through rageQuit() but forego their pending reward\\n///     Should only be used when downtime required for an upgrade\\n/// - Shutdown:\\n///     Aludel is permanently disabled\\n///     All functions are disabled with the exception of ragequit\\n///     Users can withdraw their stake through rageQuit()\\n///     Power controller can withdraw from the reward pool\\n///     Should only be used if Proxy Owner role is compromized\\ncontract Aludel is IAludel, Powered, Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* constants */\\n\\n    // An upper bound on the number of active stakes per vault is required to prevent\\n    // calls to rageQuit() from reverting.\\n    // With 30 stakes in a vault, ragequit costs 432811 gas which is conservatively lower\\n    // than the hardcoded limit of 500k gas on the vault.\\n    // This limit is configurable and could be increased in a future deployment.\\n    // Ultimately, to avoid a need for fixed upper bounds, the EVM would need to provide\\n    // an error code that allows for reliably catching out-of-gas errors on remote calls.\\n    uint256 public constant MAX_STAKES_PER_VAULT = 30;\\n    uint256 public constant MAX_REWARD_TOKENS = 50;\\n    uint256 public constant BASE_SHARES_PER_WEI = 1000000;\\n\\n    /* storage */\\n\\n    AludelData private _aludel;\\n    mapping(address => VaultData) private _vaults;\\n    EnumerableSet.AddressSet private _bonusTokenSet;\\n    EnumerableSet.AddressSet private _vaultFactorySet;\\n\\n    /* initializer */\\n\\n    /// @notice Initizalize Aludel\\n    /// access control: only proxy constructor\\n    /// state machine: can only be called once\\n    /// state scope: set initialization variables\\n    /// token transfer: none\\n    /// @param ownerAddress address The admin address\\n    /// @param rewardPoolFactory address The factory to use for deploying the RewardPool\\n    /// @param powerSwitchFactory address The factory to use for deploying the PowerSwitch\\n    /// @param stakingToken address The address of the staking token for this Aludel\\n    /// @param rewardToken address The address of the reward token for this Aludel\\n    /// @param rewardScaling RewardScaling The config for reward scaling floor, ceiling, and time\\n    constructor(\\n        address ownerAddress,\\n        address rewardPoolFactory,\\n        address powerSwitchFactory,\\n        address stakingToken,\\n        address rewardToken,\\n        RewardScaling memory rewardScaling\\n    ) {\\n        // the scaling floor must be smaller than ceiling\\n        require(rewardScaling.floor <= rewardScaling.ceiling, \\\"Aludel: floor above ceiling\\\");\\n\\n        // setting rewardScalingTime to 0 would cause divide by zero error\\n        // to disable reward scaling, use rewardScalingFloor == rewardScalingCeiling\\n        require(rewardScaling.time != 0, \\\"Aludel: scaling time cannot be zero\\\");\\n\\n        // deploy power switch\\n        address powerSwitch = IFactory(powerSwitchFactory).create(abi.encode(ownerAddress));\\n\\n        // deploy reward pool\\n        address rewardPool = IFactory(rewardPoolFactory).create(abi.encode(powerSwitch));\\n\\n        // set internal configs\\n        Ownable.transferOwnership(ownerAddress);\\n        Powered._setPowerSwitch(powerSwitch);\\n\\n        // commit to storage\\n        _aludel.stakingToken = stakingToken;\\n        _aludel.rewardToken = rewardToken;\\n        _aludel.rewardPool = rewardPool;\\n        _aludel.rewardScaling = rewardScaling;\\n\\n        // emit event\\n        emit AludelCreated(rewardPool, powerSwitch);\\n    }\\n\\n    /* getter functions */\\n\\n    function getBonusTokenSetLength() external view override returns (uint256 length) {\\n        return _bonusTokenSet.length();\\n    }\\n\\n    function getBonusTokenAtIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (address bonusToken)\\n    {\\n        return _bonusTokenSet.at(index);\\n    }\\n\\n    function getVaultFactorySetLength() external view override returns (uint256 length) {\\n        return _vaultFactorySet.length();\\n    }\\n\\n    function getVaultFactoryAtIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (address factory)\\n    {\\n        return _vaultFactorySet.at(index);\\n    }\\n\\n    function isValidVault(address target) public view override returns (bool validity) {\\n        // validate target is created from whitelisted vault factory\\n        for (uint256 index = 0; index < _vaultFactorySet.length(); index++) {\\n            if (IInstanceRegistry(_vaultFactorySet.at(index)).isInstance(target)) {\\n                return true;\\n            }\\n        }\\n        // explicit return\\n        return false;\\n    }\\n\\n    function isValidAddress(address target) public view override returns (bool validity) {\\n        // sanity check target for potential input errors\\n        return\\n            target != address(this) &&\\n            target != address(0) &&\\n            target != _aludel.stakingToken &&\\n            target != _aludel.rewardToken &&\\n            target != _aludel.rewardPool &&\\n            !_bonusTokenSet.contains(target);\\n    }\\n\\n    /* Aludel getters */\\n\\n    function getAludelData() external view override returns (AludelData memory aludel) {\\n        return _aludel;\\n    }\\n\\n    function getCurrentUnlockedRewards() public view override returns (uint256 unlockedRewards) {\\n        // calculate reward available based on state\\n        return getFutureUnlockedRewards(block.timestamp);\\n    }\\n\\n    function getFutureUnlockedRewards(uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 unlockedRewards)\\n    {\\n        // get reward amount remaining\\n        uint256 remainingRewards = IERC20(_aludel.rewardToken).balanceOf(_aludel.rewardPool);\\n        // calculate reward available based on state\\n        unlockedRewards = calculateUnlockedRewards(\\n            _aludel.rewardSchedules,\\n            remainingRewards,\\n            _aludel.rewardSharesOutstanding,\\n            timestamp\\n        );\\n        // explicit return\\n        return unlockedRewards;\\n    }\\n\\n    function getCurrentTotalStakeUnits() public view override returns (uint256 totalStakeUnits) {\\n        // calculate new stake units\\n        return getFutureTotalStakeUnits(block.timestamp);\\n    }\\n\\n    function getFutureTotalStakeUnits(uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 totalStakeUnits)\\n    {\\n        // return early if no change\\n        if (timestamp == _aludel.lastUpdate) return _aludel.totalStakeUnits;\\n        // calculate new stake units\\n        uint256 newStakeUnits =\\n            calculateStakeUnits(_aludel.totalStake, _aludel.lastUpdate, timestamp);\\n        // add to cached total\\n        totalStakeUnits = _aludel.totalStakeUnits.add(newStakeUnits);\\n        // explicit return\\n        return totalStakeUnits;\\n    }\\n\\n    /* vault getters */\\n\\n    function getVaultData(address vault)\\n        external\\n        view\\n        override\\n        returns (VaultData memory vaultData)\\n    {\\n        return _vaults[vault];\\n    }\\n\\n    function getCurrentVaultReward(address vault) external view override returns (uint256 reward) {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                _vaults[vault]\\n                    .totalStake,\\n                getCurrentUnlockedRewards(),\\n                getCurrentTotalStakeUnits(),\\n                block\\n                    .timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getFutureVaultReward(address vault, uint256 timestamp)\\n        external\\n        view\\n        override\\n        returns (uint256 reward)\\n    {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                _vaults[vault]\\n                    .totalStake,\\n                getFutureUnlockedRewards(timestamp),\\n                getFutureTotalStakeUnits(timestamp),\\n                timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getCurrentStakeReward(address vault, uint256 stakeAmount)\\n        external\\n        view\\n        override\\n        returns (uint256 reward)\\n    {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                stakeAmount,\\n                getCurrentUnlockedRewards(),\\n                getCurrentTotalStakeUnits(),\\n                block\\n                    .timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getFutureStakeReward(\\n        address vault,\\n        uint256 stakeAmount,\\n        uint256 timestamp\\n    ) external view override returns (uint256 reward) {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                stakeAmount,\\n                getFutureUnlockedRewards(timestamp),\\n                getFutureTotalStakeUnits(timestamp),\\n                timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getCurrentVaultStakeUnits(address vault)\\n        public\\n        view\\n        override\\n        returns (uint256 stakeUnits)\\n    {\\n        // calculate stake units\\n        return getFutureVaultStakeUnits(vault, block.timestamp);\\n    }\\n\\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 stakeUnits)\\n    {\\n        // calculate stake units\\n        return calculateTotalStakeUnits(_vaults[vault].stakes, timestamp);\\n    }\\n\\n    /* pure functions */\\n\\n    function calculateTotalStakeUnits(StakeData[] memory stakes, uint256 timestamp)\\n        public\\n        pure\\n        override\\n        returns (uint256 totalStakeUnits)\\n    {\\n        for (uint256 index; index < stakes.length; index++) {\\n            // reference stake\\n            StakeData memory stakeData = stakes[index];\\n            // calculate stake units\\n            uint256 stakeUnits =\\n                calculateStakeUnits(stakeData.amount, stakeData.timestamp, timestamp);\\n            // add to running total\\n            totalStakeUnits = totalStakeUnits.add(stakeUnits);\\n        }\\n    }\\n\\n    function calculateStakeUnits(\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n    ) public pure override returns (uint256 stakeUnits) {\\n        // calculate duration\\n        uint256 duration = end.sub(start);\\n        // calculate stake units\\n        stakeUnits = duration.mul(amount);\\n        // explicit return\\n        return stakeUnits;\\n    }\\n\\n    function calculateUnlockedRewards(\\n        RewardSchedule[] memory rewardSchedules,\\n        uint256 rewardBalance,\\n        uint256 sharesOutstanding,\\n        uint256 timestamp\\n    ) public pure override returns (uint256 unlockedRewards) {\\n        // return 0 if no registered schedules\\n        if (rewardSchedules.length == 0) {\\n            return 0;\\n        }\\n\\n        // calculate reward shares locked across all reward schedules\\n        uint256 sharesLocked;\\n        for (uint256 index = 0; index < rewardSchedules.length; index++) {\\n            // fetch reward schedule storage reference\\n            RewardSchedule memory schedule = rewardSchedules[index];\\n\\n            // caculate amount of shares available on this schedule\\n            // if (now - start) < duration\\n            //   sharesLocked = shares - (shares * (now - start) / duration)\\n            // else\\n            //   sharesLocked = 0\\n            uint256 currentSharesLocked = 0;\\n            if (timestamp.sub(schedule.start) < schedule.duration) {\\n                currentSharesLocked = schedule.shares.sub(\\n                    schedule.shares.mul(timestamp.sub(schedule.start)).div(schedule.duration)\\n                );\\n            }\\n\\n            // add to running total\\n            sharesLocked = sharesLocked.add(currentSharesLocked);\\n        }\\n\\n        // convert shares to reward\\n        // rewardLocked = sharesLocked * rewardBalance / sharesOutstanding\\n        uint256 rewardLocked = sharesLocked.mul(rewardBalance).div(sharesOutstanding);\\n\\n        // calculate amount available\\n        // unlockedRewards = rewardBalance - rewardLocked\\n        unlockedRewards = rewardBalance.sub(rewardLocked);\\n\\n        // explicit return\\n        return unlockedRewards;\\n    }\\n\\n    function calculateRewardFromStakes(\\n        StakeData[] memory stakes,\\n        uint256 unstakeAmount,\\n        uint256 unlockedRewards,\\n        uint256 totalStakeUnits,\\n        uint256 timestamp,\\n        RewardScaling memory rewardScaling\\n    ) public pure override returns (RewardOutput memory out) {\\n        uint256 stakesToDrop = 0;\\n        while (unstakeAmount > 0) {\\n            // fetch vault stake storage reference\\n            StakeData memory lastStake = stakes[stakes.length.sub(stakesToDrop).sub(1)];\\n\\n            // calculate stake duration\\n            uint256 stakeDuration = timestamp.sub(lastStake.timestamp);\\n\\n            uint256 currentAmount;\\n            if (lastStake.amount > unstakeAmount) {\\n                // set current amount to remaining unstake amount\\n                currentAmount = unstakeAmount;\\n                // amount of last stake is reduced\\n                out.lastStakeAmount = lastStake.amount.sub(unstakeAmount);\\n            } else {\\n                // set current amount to amount of last stake\\n                currentAmount = lastStake.amount;\\n                // add to stakes to drop\\n                stakesToDrop += 1;\\n            }\\n\\n            // update remaining unstakeAmount\\n            unstakeAmount = unstakeAmount.sub(currentAmount);\\n\\n            // calculate reward amount\\n            uint256 currentReward =\\n                calculateReward(\\n                    unlockedRewards,\\n                    currentAmount,\\n                    stakeDuration,\\n                    totalStakeUnits,\\n                    rewardScaling\\n                );\\n\\n            // update cumulative reward\\n            out.reward = out.reward.add(currentReward);\\n\\n            // update cached unlockedRewards\\n            unlockedRewards = unlockedRewards.sub(currentReward);\\n\\n            // calculate time weighted stake\\n            uint256 stakeUnits = currentAmount.mul(stakeDuration);\\n\\n            // update cached totalStakeUnits\\n            totalStakeUnits = totalStakeUnits.sub(stakeUnits);\\n        }\\n\\n        // explicit return\\n        return\\n            RewardOutput(\\n                out.lastStakeAmount,\\n                stakes.length.sub(stakesToDrop),\\n                out.reward,\\n                totalStakeUnits\\n            );\\n    }\\n\\n    function calculateReward(\\n        uint256 unlockedRewards,\\n        uint256 stakeAmount,\\n        uint256 stakeDuration,\\n        uint256 totalStakeUnits,\\n        RewardScaling memory rewardScaling\\n    ) public pure override returns (uint256 reward) {\\n        // calculate time weighted stake\\n        uint256 stakeUnits = stakeAmount.mul(stakeDuration);\\n\\n        // calculate base reward\\n        // baseReward = unlockedRewards * stakeUnits / totalStakeUnits\\n        uint256 baseReward = 0;\\n        if (totalStakeUnits != 0) {\\n            // scale reward according to proportional weight\\n            baseReward = unlockedRewards.mul(stakeUnits).div(totalStakeUnits);\\n        }\\n\\n        // calculate scaled reward\\n        // if no scaling or scaling period completed\\n        //   reward = baseReward\\n        // else\\n        //   minReward = baseReward * scalingFloor / scalingCeiling\\n        //   bonusReward = baseReward\\n        //                 * (scalingCeiling - scalingFloor) / scalingCeiling\\n        //                 * duration / scalingTime\\n        //   reward = minReward + bonusReward\\n        if (stakeDuration >= rewardScaling.time || rewardScaling.floor == rewardScaling.ceiling) {\\n            // no reward scaling applied\\n            reward = baseReward;\\n        } else {\\n            // calculate minimum reward using scaling floor\\n            uint256 minReward = baseReward.mul(rewardScaling.floor).div(rewardScaling.ceiling);\\n\\n            // calculate bonus reward with vested portion of scaling factor\\n            uint256 bonusReward =\\n                baseReward\\n                    .mul(stakeDuration)\\n                    .mul(rewardScaling.ceiling.sub(rewardScaling.floor))\\n                    .div(rewardScaling.ceiling)\\n                    .div(rewardScaling.time);\\n\\n            // add minimum reward and bonus reward\\n            reward = minReward.add(bonusReward);\\n        }\\n\\n        // explicit return\\n        return reward;\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Add funds to the Aludel\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope:\\n    ///   - increase _aludel.rewardSharesOutstanding\\n    ///   - append to _aludel.rewardSchedules\\n    /// token transfer: transfer staking tokens from msg.sender to reward pool\\n    /// @param amount uint256 Amount of reward tokens to deposit\\n    /// @param duration uint256 Duration over which to linearly unlock rewards\\n    function fund(uint256 amount, uint256 duration) external override onlyOwner onlyOnline {\\n        // validate duration\\n        require(duration != 0, \\\"Aludel: invalid duration\\\");\\n\\n        // create new reward shares\\n        // if existing rewards on this Aludel\\n        //   mint new shares proportional to % change in rewards remaining\\n        //   newShares = remainingShares * newReward / remainingRewards\\n        // else\\n        //   mint new shares with BASE_SHARES_PER_WEI initial conversion rate\\n        //   store as fixed point number with same  of decimals as reward token\\n        uint256 newRewardShares;\\n        if (_aludel.rewardSharesOutstanding > 0) {\\n            uint256 remainingRewards = IERC20(_aludel.rewardToken).balanceOf(_aludel.rewardPool);\\n            newRewardShares = _aludel.rewardSharesOutstanding.mul(amount).div(remainingRewards);\\n        } else {\\n            newRewardShares = amount.mul(BASE_SHARES_PER_WEI);\\n        }\\n\\n        // add reward shares to total\\n        _aludel.rewardSharesOutstanding = _aludel.rewardSharesOutstanding.add(newRewardShares);\\n\\n        // store new reward schedule\\n        _aludel.rewardSchedules.push(RewardSchedule(duration, block.timestamp, newRewardShares));\\n\\n        // transfer reward tokens to reward pool\\n        TransferHelper.safeTransferFrom(\\n            _aludel.rewardToken,\\n            msg.sender,\\n            _aludel.rewardPool,\\n            amount\\n        );\\n\\n        // emit event\\n        emit AludelFunded(amount, duration);\\n    }\\n\\n    /// @notice Add vault factory to whitelist\\n    /// @dev use this function to enable stakes to vaults coming from the specified\\n    ///      factory contract\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - not shutdown\\n    /// state scope:\\n    ///   - append to _vaultFactorySet\\n    /// token transfer: none\\n    /// @param factory address The address of the vault factory\\n    function registerVaultFactory(address factory) external override onlyOwner notShutdown {\\n        // add factory to set\\n        require(_vaultFactorySet.add(factory), \\\"Aludel: vault factory already registered\\\");\\n\\n        // emit event\\n        emit VaultFactoryRegistered(factory);\\n    }\\n\\n    /// @notice Remove vault factory from whitelist\\n    /// @dev use this function to disable new stakes to vaults coming from the specified\\n    ///      factory contract.\\n    ///      note: vaults with existing stakes from this factory are sill able to unstake\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - not shutdown\\n    /// state scope:\\n    ///   - remove from _vaultFactorySet\\n    /// token transfer: none\\n    /// @param factory address The address of the vault factory\\n    function removeVaultFactory(address factory) external override onlyOwner notShutdown {\\n        // remove factory from set\\n        require(_vaultFactorySet.remove(factory), \\\"Aludel: vault factory not registered\\\");\\n\\n        // emit event\\n        emit VaultFactoryRemoved(factory);\\n    }\\n\\n    /// @notice Register bonus token for distribution\\n    /// @dev use this function to enable distribution of any ERC20 held by the RewardPool contract\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope:\\n    ///   - append to _bonusTokenSet\\n    /// token transfer: none\\n    /// @param bonusToken address The address of the bonus token\\n    function registerBonusToken(address bonusToken) external override onlyOwner onlyOnline {\\n        // verify valid bonus token\\n        _validateAddress(bonusToken);\\n\\n        // verify bonus token count\\n        require(_bonusTokenSet.length() < MAX_REWARD_TOKENS, \\\"Aludel: max bonus tokens reached \\\");\\n\\n        // add token to set\\n        assert(_bonusTokenSet.add(bonusToken));\\n\\n        // emit event\\n        emit BonusTokenRegistered(bonusToken);\\n    }\\n\\n    /// @notice Rescue tokens from RewardPool\\n    /// @dev use this function to rescue tokens from RewardPool contract\\n    ///      without distributing to stakers or triggering emergency shutdown\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope: none\\n    /// token transfer: transfer requested token from RewardPool to recipient\\n    /// @param token address The address of the token to rescue\\n    /// @param recipient address The address of the recipient\\n    /// @param amount uint256 The amount of tokens to rescue\\n    function rescueTokensFromRewardPool(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external override onlyOwner onlyOnline {\\n        // verify recipient\\n        _validateAddress(recipient);\\n\\n        // check not attempting to unstake reward token\\n        require(token != _aludel.rewardToken, \\\"Aludel: invalid address\\\");\\n\\n        // check not attempting to wthdraw bonus token\\n        require(!_bonusTokenSet.contains(token), \\\"Aludel: invalid address\\\");\\n\\n        // transfer tokens to recipient\\n        IRewardPool(_aludel.rewardPool).sendERC20(token, recipient, amount);\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Stake tokens\\n    /// access control: anyone with a valid permission\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    ///   - when vault exists on this Aludel\\n    /// state scope:\\n    ///   - append to _vaults[vault].stakes\\n    ///   - increase _vaults[vault].totalStake\\n    ///   - increase _aludel.totalStake\\n    ///   - increase _aludel.totalStakeUnits\\n    ///   - increase _aludel.lastUpdate\\n    /// token transfer: transfer staking tokens from msg.sender to vault\\n    /// @param vault address The address of the vault to stake from\\n    /// @param amount uint256 The amount of staking tokens to stake\\n    /// @param permission bytes The signed lock permission for the universal vault\\n\\n    function stake(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external override onlyOnline {\\n        // verify vault is valid\\n        require(isValidVault(vault), \\\"Aludel: vault is not registered\\\");\\n\\n        // verify non-zero amount\\n        require(amount != 0, \\\"Aludel: no amount staked\\\");\\n\\n        // fetch vault storage reference\\n        VaultData storage vaultData = _vaults[vault];\\n\\n        // verify stakes boundary not reached\\n        require(\\n            vaultData.stakes.length < MAX_STAKES_PER_VAULT,\\n            \\\"Aludel: MAX_STAKES_PER_VAULT reached\\\"\\n        );\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // store amount and timestamp\\n        vaultData.stakes.push(StakeData(amount, block.timestamp));\\n\\n        // update cached total vault and Aludel amounts\\n        vaultData.totalStake = vaultData.totalStake.add(amount);\\n        _aludel.totalStake = _aludel.totalStake.add(amount);\\n\\n        // call lock on vault\\n        IUniversalVault(vault).lock(_aludel.stakingToken, amount, permission);\\n\\n        // emit event\\n        emit Staked(vault, amount);\\n    }\\n\\n    /// @notice Unstake staking tokens and claim reward\\n    /// @dev rewards can only be claimed when unstaking, thus reseting the reward multiplier\\n    /// access control: anyone with a valid permission\\n    /// state machine:\\n    ///   - when vault exists on this Aludel\\n    ///   - after stake from vault\\n    ///   - can be called multiple times while sufficient stake remains\\n    ///   - only online\\n    /// state scope:\\n    ///   - decrease _aludel.rewardSharesOutstanding\\n    ///   - decrease _aludel.totalStake\\n    ///   - increase _aludel.lastUpdate\\n    ///   - modify _aludel.totalStakeUnits\\n    ///   - modify _vaults[vault].stakes\\n    ///   - decrease _vaults[vault].totalStake\\n    /// token transfer:\\n    ///   - transfer reward tokens from reward pool to vault\\n    ///   - transfer bonus tokens from reward pool to vault\\n    /// @param vault address The vault to unstake from\\n    /// @param amount uint256 The amount of staking tokens to unstake\\n    /// @param permission bytes The signed lock permission for the universal vault\\n    function unstakeAndClaim(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external override onlyOnline {\\n        // fetch vault storage reference\\n        VaultData storage vaultData = _vaults[vault];\\n\\n        // verify non-zero amount\\n        require(amount != 0, \\\"Aludel: no amount unstaked\\\");\\n\\n        // check for sufficient vault stake amount\\n        require(vaultData.totalStake >= amount, \\\"Aludel: insufficient vault stake\\\");\\n\\n        // check for sufficient Aludel stake amount\\n        // if this check fails, there is a bug in stake accounting\\n        assert(_aludel.totalStake >= amount);\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // get reward amount remaining\\n        uint256 remainingRewards = IERC20(_aludel.rewardToken).balanceOf(_aludel.rewardPool);\\n\\n        // calculate vested portion of reward pool\\n        uint256 unlockedRewards =\\n            calculateUnlockedRewards(\\n                _aludel.rewardSchedules,\\n                remainingRewards,\\n                _aludel.rewardSharesOutstanding,\\n                block.timestamp\\n            );\\n\\n        // calculate vault time weighted reward with scaling\\n        RewardOutput memory out =\\n            calculateRewardFromStakes(\\n                vaultData.stakes,\\n                amount,\\n                unlockedRewards,\\n                _aludel.totalStakeUnits,\\n                block.timestamp,\\n                _aludel.rewardScaling\\n            );\\n\\n        // update stake data in storage\\n        if (out.newStakesCount == 0) {\\n            // all stakes have been unstaked\\n            delete vaultData.stakes;\\n        } else {\\n            // some stakes have been completely or partially unstaked\\n            // delete fully unstaked stakes\\n            while (vaultData.stakes.length > out.newStakesCount) vaultData.stakes.pop();\\n\\n            // update stake amount when lastStakeAmount is set\\n            if (out.lastStakeAmount > 0) {\\n                // update partially unstaked stake\\n                vaultData.stakes[out.newStakesCount.sub(1)].amount = out.lastStakeAmount;\\n            }\\n        }\\n\\n        // update cached stake totals\\n        vaultData.totalStake = vaultData.totalStake.sub(amount);\\n        _aludel.totalStake = _aludel.totalStake.sub(amount);\\n        _aludel.totalStakeUnits = out.newTotalStakeUnits;\\n\\n        // unlock staking tokens from vault\\n        IUniversalVault(vault).unlock(_aludel.stakingToken, amount, permission);\\n\\n        // emit event\\n        emit Unstaked(vault, amount);\\n\\n        // only perform on non-zero reward\\n        if (out.reward > 0) {\\n            // calculate shares to burn\\n            // sharesToBurn = sharesOutstanding * reward / remainingRewards\\n            uint256 sharesToBurn =\\n                _aludel.rewardSharesOutstanding.mul(out.reward).div(remainingRewards);\\n\\n            // burn claimed shares\\n            _aludel.rewardSharesOutstanding = _aludel.rewardSharesOutstanding.sub(sharesToBurn);\\n\\n            // transfer bonus tokens from reward pool to vault\\n            if (_bonusTokenSet.length() > 0) {\\n                for (uint256 index = 0; index < _bonusTokenSet.length(); index++) {\\n                    // fetch bonus token address reference\\n                    address bonusToken = _bonusTokenSet.at(index);\\n\\n                    // calculate bonus token amount\\n                    // bonusAmount = bonusRemaining * reward / remainingRewards\\n                    uint256 bonusAmount =\\n                        IERC20(bonusToken).balanceOf(_aludel.rewardPool).mul(out.reward).div(\\n                            remainingRewards\\n                        );\\n\\n                    // transfer bonus token\\n                    IRewardPool(_aludel.rewardPool).sendERC20(bonusToken, vault, bonusAmount);\\n\\n                    // emit event\\n                    emit RewardClaimed(vault, bonusToken, bonusAmount);\\n                }\\n            }\\n\\n            // transfer reward tokens from reward pool to vault\\n            IRewardPool(_aludel.rewardPool).sendERC20(_aludel.rewardToken, vault, out.reward);\\n\\n            // emit event\\n            emit RewardClaimed(vault, _aludel.rewardToken, out.reward);\\n        }\\n    }\\n\\n    /// @notice Exit Aludel without claiming reward\\n    /// @dev This function should never revert when correctly called by the vault.\\n    ///      A max number of stakes per vault is set with MAX_STAKES_PER_VAULT to\\n    ///      place an upper bound on the for loop in calculateTotalStakeUnits().\\n    /// access control: only callable by the vault directly\\n    /// state machine:\\n    ///   - when vault exists on this Aludel\\n    ///   - when active stake from this vault\\n    ///   - any power state\\n    /// state scope:\\n    ///   - decrease _aludel.totalStake\\n    ///   - increase _aludel.lastUpdate\\n    ///   - modify _aludel.totalStakeUnits\\n    ///   - delete _vaults[vault]\\n    /// token transfer: none\\n    function rageQuit() external override {\\n        // fetch vault storage reference\\n        VaultData storage _vaultData = _vaults[msg.sender];\\n\\n        // revert if no active stakes\\n        require(_vaultData.stakes.length != 0, \\\"Aludel: no stake\\\");\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // emit event\\n        emit Unstaked(msg.sender, _vaultData.totalStake);\\n\\n        // update cached totals\\n        _aludel.totalStake = _aludel.totalStake.sub(_vaultData.totalStake);\\n        _aludel.totalStakeUnits = _aludel.totalStakeUnits.sub(\\n            calculateTotalStakeUnits(_vaultData.stakes, block.timestamp)\\n        );\\n\\n        // delete stake data\\n        delete _vaults[msg.sender];\\n    }\\n\\n    /* convenience functions */\\n\\n    function _updateTotalStakeUnits() private {\\n        // update cached totalStakeUnits\\n        _aludel.totalStakeUnits = getCurrentTotalStakeUnits();\\n        // update cached lastUpdate\\n        _aludel.lastUpdate = block.timestamp;\\n    }\\n\\n    function _validateAddress(address target) private view {\\n        // sanity check target for potential input errors\\n        require(isValidAddress(target), \\\"Aludel: invalid address\\\");\\n    }\\n\\n    function _truncateStakesArray(StakeData[] memory array, uint256 newLength)\\n        private\\n        pure\\n        returns (StakeData[] memory newArray)\\n    {\\n        newArray = new StakeData[](newLength);\\n        for (uint256 index = 0; index < newLength; index++) {\\n            newArray[index] = array[index];\\n        }\\n        return newArray;\\n    }\\n}\\n\",\"keccak256\":\"0x2fe1af3666ac9f28d58cd5f9323680602231ec99bc5d714691669ee598a27a57\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/aludel/PowerSwitch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IPowerSwitch {\\n    /* admin events */\\n\\n    event PowerOn();\\n    event PowerOff();\\n    event EmergencyShutdown();\\n\\n    /* data types */\\n\\n    enum State {Online, Offline, Shutdown}\\n\\n    /* admin functions */\\n\\n    function powerOn() external;\\n\\n    function powerOff() external;\\n\\n    function emergencyShutdown() external;\\n\\n    /* view functions */\\n\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getStatus() external view returns (State status);\\n\\n    function getPowerController() external view returns (address controller);\\n}\\n\\n/// @title PowerSwitch\\n/// @notice Standalone pausing and emergency stop functionality\\ncontract PowerSwitch is IPowerSwitch, Ownable {\\n    /* storage */\\n\\n    IPowerSwitch.State private _status;\\n\\n    /* initializer */\\n\\n    constructor(address owner) {\\n        // sanity check owner\\n        require(owner != address(0), \\\"PowerSwitch: invalid owner\\\");\\n        // transfer ownership\\n        Ownable.transferOwnership(owner);\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Turn Power On\\n    /// access control: only admin\\n    /// state machine: only when offline\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOn() external override onlyOwner {\\n        require(_status == IPowerSwitch.State.Offline, \\\"PowerSwitch: cannot power on\\\");\\n        _status = IPowerSwitch.State.Online;\\n        emit PowerOn();\\n    }\\n\\n    /// @notice Turn Power Off\\n    /// access control: only admin\\n    /// state machine: only when online\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOff() external override onlyOwner {\\n        require(_status == IPowerSwitch.State.Online, \\\"PowerSwitch: cannot power off\\\");\\n        _status = IPowerSwitch.State.Offline;\\n        emit PowerOff();\\n    }\\n\\n    /// @notice Shutdown Permanently\\n    /// access control: only admin\\n    /// state machine:\\n    /// - when online or offline\\n    /// - can only be called once\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function emergencyShutdown() external override onlyOwner {\\n        require(_status != IPowerSwitch.State.Shutdown, \\\"PowerSwitch: cannot shutdown\\\");\\n        _status = IPowerSwitch.State.Shutdown;\\n        emit EmergencyShutdown();\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() external view override returns (bool status) {\\n        return _status == State.Online;\\n    }\\n\\n    function isOffline() external view override returns (bool status) {\\n        return _status == State.Offline;\\n    }\\n\\n    function isShutdown() external view override returns (bool status) {\\n        return _status == State.Shutdown;\\n    }\\n\\n    function getStatus() external view override returns (IPowerSwitch.State status) {\\n        return _status;\\n    }\\n\\n    function getPowerController() external view override returns (address controller) {\\n        return Ownable.owner();\\n    }\\n}\\n\",\"keccak256\":\"0xc7a5fc5aafcc4d597205bbe089b729e024348679ebbc060848033d3aa25507f4\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/aludel/Powered.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IPowerSwitch} from \\\"./PowerSwitch.sol\\\";\\n\\ninterface IPowered {\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getPowerSwitch() external view returns (address powerSwitch);\\n\\n    function getPowerController() external view returns (address controller);\\n}\\n\\n/// @title Powered\\n/// @notice Helper for calling external PowerSwitch\\ncontract Powered is IPowered {\\n    /* storage */\\n\\n    address private _powerSwitch;\\n\\n    /* modifiers */\\n\\n    modifier onlyOnline() {\\n        _onlyOnline();\\n        _;\\n    }\\n\\n    modifier onlyOffline() {\\n        _onlyOffline();\\n        _;\\n    }\\n\\n    modifier notShutdown() {\\n        _notShutdown();\\n        _;\\n    }\\n\\n    modifier onlyShutdown() {\\n        _onlyShutdown();\\n        _;\\n    }\\n\\n    /* initializer */\\n\\n    function _setPowerSwitch(address powerSwitch) internal {\\n        _powerSwitch = powerSwitch;\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOnline();\\n    }\\n\\n    function isOffline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOffline();\\n    }\\n\\n    function isShutdown() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isShutdown();\\n    }\\n\\n    function getPowerSwitch() public view override returns (address powerSwitch) {\\n        return _powerSwitch;\\n    }\\n\\n    function getPowerController() public view override returns (address controller) {\\n        return IPowerSwitch(_powerSwitch).getPowerController();\\n    }\\n\\n    /* convenience functions */\\n\\n    function _onlyOnline() private view {\\n        require(isOnline(), \\\"Powered: is not online\\\");\\n    }\\n\\n    function _onlyOffline() private view {\\n        require(isOffline(), \\\"Powered: is not offline\\\");\\n    }\\n\\n    function _notShutdown() private view {\\n        require(!isShutdown(), \\\"Powered: is shutdown\\\");\\n    }\\n\\n    function _onlyShutdown() private view {\\n        require(isShutdown(), \\\"Powered: is not shutdown\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc1a176b19e70c0bd907ed58b97038e49838c73a6e150b9fece663cd8c61b0f77\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/aludel/RewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {Powered} from \\\"./Powered.sol\\\";\\n\\ninterface IRewardPool {\\n    function sendERC20(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function rescueERC20(address[] calldata tokens, address recipient) external;\\n}\\n\\n/// @title Reward Pool\\n/// @notice Vault for isolated storage of reward tokens\\ncontract RewardPool is IRewardPool, Powered, Ownable {\\n    /* initializer */\\n\\n    constructor(address powerSwitch) {\\n        Powered._setPowerSwitch(powerSwitch);\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Send an ERC20 token\\n    /// access control: only owner\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope: none\\n    /// token transfer: transfer tokens from self to recipient\\n    /// @param token address The token to send\\n    /// @param to address The recipient to send to\\n    /// @param value uint256 Amount of tokens to send\\n    function sendERC20(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external override onlyOwner onlyOnline {\\n        TransferHelper.safeTransfer(token, to, value);\\n    }\\n\\n    /* emergency functions */\\n\\n    /// @notice Rescue multiple ERC20 tokens\\n    /// access control: only power controller\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only shutdown\\n    /// state scope: none\\n    /// token transfer: transfer tokens from self to recipient\\n    /// @param tokens address[] The tokens to rescue\\n    /// @param recipient address The recipient to rescue to\\n    function rescueERC20(address[] calldata tokens, address recipient)\\n        external\\n        override\\n        onlyShutdown\\n    {\\n        // only callable by controller\\n        require(\\n            msg.sender == Powered.getPowerController(),\\n            \\\"RewardPool: only controller can withdraw after shutdown\\\"\\n        );\\n\\n        // assert recipient is defined\\n        require(recipient != address(0), \\\"RewardPool: recipient not defined\\\");\\n\\n        // transfer tokens\\n        for (uint256 index = 0; index < tokens.length; index++) {\\n            // get token\\n            address token = tokens[index];\\n            // get balance\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            // transfer token\\n            TransferHelper.safeTransfer(token, recipient, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62e1a6ebee0281fd8f6400a79a5292450a98681d195c2948d9a8e626d41b9304\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/crucible/Crucible.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\nimport {ERC1271} from \\\"./ERC1271.sol\\\";\\nimport {OwnableERC721} from \\\"./OwnableERC721.sol\\\";\\nimport {IRageQuit} from \\\"../aludel/Aludel.sol\\\";\\n\\ninterface IUniversalVault {\\n    /* user events */\\n\\n    event Locked(address delegate, address token, uint256 amount);\\n    event Unlocked(address delegate, address token, uint256 amount);\\n    event RageQuit(address delegate, address token, bool notified, string reason);\\n\\n    /* data types */\\n\\n    struct LockData {\\n        address delegate;\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    /* initialize function */\\n\\n    function initialize() external;\\n\\n    /* user functions */\\n\\n    function lock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    function unlock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    function rageQuit(address delegate, address token)\\n        external\\n        returns (bool notified, string memory error);\\n\\n    function transferERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function transferETH(address to, uint256 amount) external payable;\\n\\n    /* pure functions */\\n\\n    function calculateLockID(address delegate, address token)\\n        external\\n        pure\\n        returns (bytes32 lockID);\\n\\n    /* getter functions */\\n\\n    function getPermissionHash(\\n        bytes32 eip712TypeHash,\\n        address delegate,\\n        address token,\\n        uint256 amount,\\n        uint256 nonce\\n    ) external view returns (bytes32 permissionHash);\\n\\n    function getNonce() external view returns (uint256 nonce);\\n\\n    function owner() external view returns (address ownerAddress);\\n\\n    function getLockSetCount() external view returns (uint256 count);\\n\\n    function getLockAt(uint256 index) external view returns (LockData memory lockData);\\n\\n    function getBalanceDelegated(address token, address delegate)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    function getBalanceLocked(address token) external view returns (uint256 balance);\\n\\n    function checkBalances() external view returns (bool validity);\\n}\\n\\n/// @title Crucible\\n/// @notice Vault for isolated storage of staking tokens\\n/// @dev Warning: not compatible with rebasing tokens\\ncontract Crucible is\\n    IUniversalVault,\\n    EIP712(\\\"UniversalVault\\\", \\\"1.0.0\\\"),\\n    ERC1271,\\n    OwnableERC721,\\n    Initializable\\n{\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /* constant */\\n\\n    // Hardcoding a gas limit for rageQuit() is required to prevent gas DOS attacks\\n    // the gas requirement cannot be determined at runtime by querying the delegate\\n    // as it could potentially be manipulated by a malicious delegate who could force\\n    // the calls to revert.\\n    // The gas limit could alternatively be set upon vault initialization or creation\\n    // of a lock, but the gas consumption trade-offs are not favorable.\\n    // Ultimately, to avoid a need for fixed gas limits, the EVM would need to provide\\n    // an error code that allows for reliably catching out-of-gas errors on remote calls.\\n    uint256 public constant RAGEQUIT_GAS = 500000;\\n    bytes32 public constant LOCK_TYPEHASH =\\n        keccak256(\\\"Lock(address delegate,address token,uint256 amount,uint256 nonce)\\\");\\n    bytes32 public constant UNLOCK_TYPEHASH =\\n        keccak256(\\\"Unlock(address delegate,address token,uint256 amount,uint256 nonce)\\\");\\n\\n    /* storage */\\n\\n    uint256 private _nonce;\\n    mapping(bytes32 => LockData) private _locks;\\n    EnumerableSet.Bytes32Set private _lockSet;\\n\\n    /* initialization function */\\n\\n    function initializeLock() external initializer {}\\n\\n    function initialize() external override initializer {\\n        OwnableERC721._setNFT(msg.sender);\\n    }\\n\\n    /* ether receive */\\n\\n    receive() external payable {}\\n\\n    /* internal overrides */\\n\\n    function _getOwner() internal view override(ERC1271) returns (address ownerAddress) {\\n        return OwnableERC721.owner();\\n    }\\n\\n    /* pure functions */\\n\\n    function calculateLockID(address delegate, address token)\\n        public\\n        pure\\n        override\\n        returns (bytes32 lockID)\\n    {\\n        return keccak256(abi.encodePacked(delegate, token));\\n    }\\n\\n    /* getter functions */\\n\\n    function getPermissionHash(\\n        bytes32 eip712TypeHash,\\n        address delegate,\\n        address token,\\n        uint256 amount,\\n        uint256 nonce\\n    ) public view override returns (bytes32 permissionHash) {\\n        return\\n            EIP712._hashTypedDataV4(\\n                keccak256(abi.encode(eip712TypeHash, delegate, token, amount, nonce))\\n            );\\n    }\\n\\n    function getNonce() external view override returns (uint256 nonce) {\\n        return _nonce;\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IUniversalVault, OwnableERC721)\\n        returns (address ownerAddress)\\n    {\\n        return OwnableERC721.owner();\\n    }\\n\\n    function getLockSetCount() external view override returns (uint256 count) {\\n        return _lockSet.length();\\n    }\\n\\n    function getLockAt(uint256 index) external view override returns (LockData memory lockData) {\\n        return _locks[_lockSet.at(index)];\\n    }\\n\\n    function getBalanceDelegated(address token, address delegate)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        return _locks[calculateLockID(delegate, token)].balance;\\n    }\\n\\n    function getBalanceLocked(address token) public view override returns (uint256 balance) {\\n        uint256 count = _lockSet.length();\\n        for (uint256 index; index < count; index++) {\\n            LockData storage _lockData = _locks[_lockSet.at(index)];\\n            if (_lockData.token == token && _lockData.balance > balance)\\n                balance = _lockData.balance;\\n        }\\n        return balance;\\n    }\\n\\n    function checkBalances() external view override returns (bool validity) {\\n        // iterate over all token locks and validate sufficient balance\\n        uint256 count = _lockSet.length();\\n        for (uint256 index; index < count; index++) {\\n            // fetch storage lock reference\\n            LockData storage _lockData = _locks[_lockSet.at(index)];\\n            // if insufficient balance and no\\u220ft shutdown, return false\\n            if (IERC20(_lockData.token).balanceOf(address(this)) < _lockData.balance) return false;\\n        }\\n        // if sufficient balance or shutdown, return true\\n        return true;\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Lock ERC20 tokens in the vault\\n    /// access control: called by delegate with signed permission from owner\\n    /// state machine: anytime\\n    /// state scope:\\n    /// - insert or update _locks\\n    /// - increase _nonce\\n    /// token transfer: none\\n    /// @param token Address of token being locked\\n    /// @param amount Amount of tokens being locked\\n    /// @param permission Permission signature payload\\n    function lock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    )\\n        external\\n        override\\n        onlyValidSignature(\\n            getPermissionHash(LOCK_TYPEHASH, msg.sender, token, amount, _nonce),\\n            permission\\n        )\\n    {\\n        // get lock id\\n        bytes32 lockID = calculateLockID(msg.sender, token);\\n\\n        // add lock to storage\\n        if (_lockSet.contains(lockID)) {\\n            // if lock already exists, increase amount\\n            _locks[lockID].balance = _locks[lockID].balance.add(amount);\\n        } else {\\n            // if does not exist, create new lock\\n            // add lock to set\\n            assert(_lockSet.add(lockID));\\n            // add lock data to storage\\n            _locks[lockID] = LockData(msg.sender, token, amount);\\n        }\\n\\n        // validate sufficient balance\\n        require(\\n            IERC20(token).balanceOf(address(this)) >= _locks[lockID].balance,\\n            \\\"UniversalVault: insufficient balance\\\"\\n        );\\n\\n        // increase nonce\\n        _nonce += 1;\\n\\n        // emit event\\n        emit Locked(msg.sender, token, amount);\\n    }\\n\\n    /// @notice Unlock ERC20 tokens in the vault\\n    /// access control: called by delegate with signed permission from owner\\n    /// state machine: after valid lock from delegate\\n    /// state scope:\\n    /// - remove or update _locks\\n    /// - increase _nonce\\n    /// token transfer: none\\n    /// @param token Address of token being unlocked\\n    /// @param amount Amount of tokens being unlocked\\n    /// @param permission Permission signature payload\\n    function unlock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    )\\n        external\\n        override\\n        onlyValidSignature(\\n            getPermissionHash(UNLOCK_TYPEHASH, msg.sender, token, amount, _nonce),\\n            permission\\n        )\\n    {\\n        // get lock id\\n        bytes32 lockID = calculateLockID(msg.sender, token);\\n\\n        // validate existing lock\\n        require(_lockSet.contains(lockID), \\\"UniversalVault: missing lock\\\");\\n\\n        // update lock data\\n        if (_locks[lockID].balance > amount) {\\n            // substract amount from lock balance\\n            _locks[lockID].balance = _locks[lockID].balance.sub(amount);\\n        } else {\\n            // delete lock data\\n            delete _locks[lockID];\\n            assert(_lockSet.remove(lockID));\\n        }\\n\\n        // increase nonce\\n        _nonce += 1;\\n\\n        // emit event\\n        emit Unlocked(msg.sender, token, amount);\\n    }\\n\\n    /// @notice Forcibly cancel delegate lock\\n    /// @dev This function will attempt to notify the delegate of the rage quit using\\n    ///      a fixed amount of gas.\\n    /// access control: only owner\\n    /// state machine: after valid lock from delegate\\n    /// state scope:\\n    /// - remove item from _locks\\n    /// token transfer: none\\n    /// @param delegate Address of delegate\\n    /// @param token Address of token being unlocked\\n    function rageQuit(address delegate, address token)\\n        external\\n        override\\n        onlyOwner\\n        returns (bool notified, string memory error)\\n    {\\n        // get lock id\\n        bytes32 lockID = calculateLockID(delegate, token);\\n\\n        // validate existing lock\\n        require(_lockSet.contains(lockID), \\\"UniversalVault: missing lock\\\");\\n\\n        // attempt to notify delegate\\n        if (delegate.isContract()) {\\n            // check for sufficient gas\\n            require(gasleft() >= RAGEQUIT_GAS, \\\"UniversalVault: insufficient gas\\\");\\n\\n            // attempt rageQuit notification\\n            try IRageQuit(delegate).rageQuit{gas: RAGEQUIT_GAS}() {\\n                notified = true;\\n            } catch Error(string memory res) {\\n                notified = false;\\n                error = res;\\n            } catch (bytes memory) {\\n                notified = false;\\n            }\\n        }\\n\\n        // update lock storage\\n        assert(_lockSet.remove(lockID));\\n        delete _locks[lockID];\\n\\n        // emit event\\n        emit RageQuit(delegate, token, notified, error);\\n    }\\n\\n    /// @notice Transfer ERC20 tokens out of vault\\n    /// access control: only owner\\n    /// state machine: when balance >= max(lock) + amount\\n    /// state scope: none\\n    /// token transfer: transfer any token\\n    /// @param token Address of token being transferred\\n    /// @param to Address of the recipient\\n    /// @param amount Amount of tokens to transfer\\n    function transferERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyOwner {\\n        // check for sufficient balance\\n        require(\\n            IERC20(token).balanceOf(address(this)) >= getBalanceLocked(token).add(amount),\\n            \\\"UniversalVault: insufficient balance\\\"\\n        );\\n        // perform transfer\\n        TransferHelper.safeTransfer(token, to, amount);\\n    }\\n\\n    /// @notice Transfer ERC20 tokens out of vault\\n    /// access control: only owner\\n    /// state machine: when balance >= amount\\n    /// state scope: none\\n    /// token transfer: transfer any token\\n    /// @param to Address of the recipient\\n    /// @param amount Amount of ETH to transfer\\n    function transferETH(address to, uint256 amount) external payable override onlyOwner {\\n        // perform transfer\\n        TransferHelper.safeTransferETH(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe4d9b6f62f99af9b0136df4b15e1aba885f7c7c16855420e22625d6d40e71618\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/crucible/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal view virtual returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal view virtual returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n}\\n\",\"keccak256\":\"0xe7af2d7afadad2e157a51ee02c50bda1744aded9d3937824e0d8f4a53e6f1b26\",\"license\":\"MIT\"},\"alchemist/contracts/crucible/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface IERC1271 {\\n    function isValidSignature(bytes32 _messageHash, bytes memory _signature)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\\nlibrary SignatureChecker {\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        if (Address.isContract(signer)) {\\n            bytes4 selector = IERC1271.isValidSignature.selector;\\n            (bool success, bytes memory returndata) =\\n                signer.staticcall(abi.encodeWithSelector(selector, hash, signature));\\n            return success && abi.decode(returndata, (bytes4)) == selector;\\n        } else {\\n            return ECDSA.recover(hash, signature) == signer;\\n        }\\n    }\\n}\\n\\n/// @title ERC1271\\n/// @notice Module for ERC1271 compatibility\\nabstract contract ERC1271 is IERC1271 {\\n    // Valid magic value bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant VALID_SIG = IERC1271.isValidSignature.selector;\\n    // Invalid magic value\\n    bytes4 internal constant INVALID_SIG = bytes4(0);\\n\\n    modifier onlyValidSignature(bytes32 permissionHash, bytes memory signature) {\\n        require(\\n            isValidSignature(permissionHash, signature) == VALID_SIG,\\n            \\\"ERC1271: Invalid signature\\\"\\n        );\\n        _;\\n    }\\n\\n    function _getOwner() internal view virtual returns (address owner);\\n\\n    function isValidSignature(bytes32 permissionHash, bytes memory signature)\\n        public\\n        view\\n        override\\n        returns (bytes4)\\n    {\\n        return\\n            SignatureChecker.isValidSignature(_getOwner(), permissionHash, signature)\\n                ? VALID_SIG\\n                : INVALID_SIG;\\n    }\\n}\\n\",\"keccak256\":\"0x998477bfca3cf4fd801a6cb508bce132f3a3b699087af12cad99d82d52a9bb84\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/crucible/OwnableERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title OwnableERC721\\n/// @notice Use ERC721 ownership for access control\\ncontract OwnableERC721 {\\n    address private _nftAddress;\\n\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"OwnableERC721: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _setNFT(address nftAddress) internal {\\n        _nftAddress = nftAddress;\\n    }\\n\\n    function nft() public view virtual returns (address nftAddress) {\\n        return _nftAddress;\\n    }\\n\\n    function owner() public view virtual returns (address ownerAddress) {\\n        return IERC721(_nftAddress).ownerOf(uint256(uint160(address(this))));\\n    }\\n}\\n\",\"keccak256\":\"0xfa2ceffc5eeca850fa7e1f46f10f416838553f8e7d66e0e09c3da67642bbaac7\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/factory/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface IFactory {\\n    function create(bytes calldata args) external returns (address instance);\\n\\n    function create2(bytes calldata args, bytes32 salt) external returns (address instance);\\n}\\n\",\"keccak256\":\"0x9aae95b220be96434e10884dabd1a4167942800b6b828bf75541eca818f6560c\",\"license\":\"GPL-3.0-only\"},\"alchemist/contracts/factory/InstanceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ninterface IInstanceRegistry {\\n    /* events */\\n\\n    event InstanceAdded(address instance);\\n    event InstanceRemoved(address instance);\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) external view returns (bool validity);\\n\\n    function instanceCount() external view returns (uint256 count);\\n\\n    function instanceAt(uint256 index) external view returns (address instance);\\n}\\n\\n/// @title InstanceRegistry\\ncontract InstanceRegistry is IInstanceRegistry {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* storage */\\n\\n    EnumerableSet.AddressSet private _instanceSet;\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) public view override returns (bool validity) {\\n        return _instanceSet.contains(instance);\\n    }\\n\\n    function instanceCount() public view override returns (uint256 count) {\\n        return _instanceSet.length();\\n    }\\n\\n    function instanceAt(uint256 index) public view override returns (address instance) {\\n        return _instanceSet.at(index);\\n    }\\n\\n    /* admin functions */\\n\\n    function _register(address instance) internal {\\n        require(_instanceSet.add(instance), \\\"InstanceRegistry: already registered\\\");\\n        emit InstanceAdded(instance);\\n    }\\n}\\n\",\"keccak256\":\"0xc74100043198fc3a6db43919a8b11a6bdf9a33f3f22c5577ed565c268898205d\",\"license\":\"GPL-3.0-only\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/contracts/aludel/Aludel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {IFactory} from \\\"alchemist/contracts/factory/IFactory.sol\\\";\\nimport {IInstanceRegistry} from \\\"alchemist/contracts/factory/InstanceRegistry.sol\\\";\\nimport {IUniversalVault} from \\\"alchemist/contracts/crucible/Crucible.sol\\\";\\nimport {IRewardPool} from \\\"alchemist/contracts/aludel/RewardPool.sol\\\";\\nimport {Powered} from \\\"../powerSwitch/Powered.sol\\\";\\n\\nimport {IAludel} from \\\"./IAludel.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Aludel\\n/// @notice Reward distribution contract with time multiplier\\n/// Access Control\\n/// - Power controller:\\n///     Can power off / shutdown the Aludel\\n///     Can withdraw rewards from reward pool once shutdown\\n/// - Aludel admin:\\n///     Can add funds to the Aludel, register bonus tokens, and whitelist new vault factories\\n///     Is a subset of proxy owner permissions\\n/// - User:\\n///     Can deposit / withdraw / ragequit\\n/// Aludel State Machine\\n/// - Online:\\n///     Aludel is operating normally, all functions are enabled\\n/// - Offline:\\n///     Aludel is temporarely disabled for maintenance\\n///     User deposits and withdrawls are disabled, ragequit remains enabled\\n///     Users can withdraw their stake through rageQuit() but forego their pending reward\\n///     Should only be used when downtime required for an upgrade\\n/// - Shutdown:\\n///     Aludel is permanently disabled\\n///     All functions are disabled with the exception of ragequit\\n///     Users can withdraw their stake through rageQuit()\\n///     Power controller can withdraw from the reward pool\\n///     Should only be used if Proxy Owner role is compromized\\ncontract Aludel is IAludel, Ownable, Initializable, Powered {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* constants */\\n\\n    // An upper bound on the number of active stakes per vault is required to prevent\\n    // calls to rageQuit() from reverting.\\n    // With 30 stakes in a vault, ragequit costs 432811 gas which is conservatively lower\\n    // than the hardcoded limit of 500k gas on the vault.\\n    // This limit is configurable and could be increased in a future deployment.\\n    // Ultimately, to avoid a need for fixed upper bounds, the EVM would need to provide\\n    // an error code that allows for reliably catching out-of-gas errors on remote calls.\\n    uint256 public constant MAX_STAKES_PER_VAULT = 30;\\n    uint256 public constant MAX_REWARD_TOKENS = 50;\\n    uint256 public constant BASE_SHARES_PER_WEI = 1000000;\\n\\n    /* storage */\\n\\n    AludelData internal _aludel;\\n    mapping(address => VaultData) internal _vaults;\\n    EnumerableSet.AddressSet internal _bonusTokenSet;\\n    EnumerableSet.AddressSet internal _vaultFactorySet;\\n\\n\\n    address _feeRecipient;\\n    uint16 _feeBps;\\n\\n    struct AludelInitializationParams {\\n        address rewardPoolFactory;\\n        address powerSwitchFactory;\\n        address stakingToken;\\n        address rewardToken;\\n        RewardScaling rewardScaling;\\n    }\\n\\n    error FloorAboveCeiling();\\n    error ScalingTimeIsZero();\\n    error InvalidDuration();\\n    error VaultFactoryNotRegistered();\\n    error VaultAlreadyRegistered();\\n    error MaxBonusTokensReached();\\n    error InvalidAddress(address addr);\\n    error InvalidVault();\\n    error MaxStakesReached();\\n    error NoAmountStaked();\\n    error NoAmountUnstaked();\\n    error InsufficientVaultStake();\\n    error NoStakes();\\n\\n    /* initializer */\\n\\n    function initializeLock() external override initializer {}\\n\\n    /// @notice Initizalize Aludel\\n    /// access control: only proxy constructor\\n    /// state machine: can only be called once\\n    /// state scope: set initialization variables\\n    /// token transfer: none\\n    function initialize(\\n        uint64 startTime,\\n        address ownerAddress,\\n        address feeRecipient,\\n        uint16 feeBps,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        initializer\\n    {\\n      \\n        (AludelInitializationParams memory params) = abi.decode(\\n            data, (AludelInitializationParams)\\n        );\\n\\n        _feeRecipient = feeRecipient;\\n        _feeBps = feeBps;\\n\\n        // the scaling floor must be smaller than ceiling\\n        if (params.rewardScaling.floor > params.rewardScaling.ceiling) {\\n            revert FloorAboveCeiling();\\n        }\\n\\n        // setting rewardScalingTime to 0 would cause divide by zero error\\n        // to disable reward scaling, use rewardScalingFloor == rewardScalingCeiling\\n        if (params.rewardScaling.time == 0) {\\n            revert ScalingTimeIsZero();\\n        }\\n\\n        // deploy power switch\\n        address powerSwitch = IFactory(params.powerSwitchFactory).create(\\n            abi.encode(ownerAddress, startTime)\\n        );\\n\\n        // // deploy reward pool\\n        address rewardPool =\\n            IFactory(params.rewardPoolFactory).create(abi.encode(powerSwitch));\\n\\n        // // set internal configs\\n        _transferOwnership(msg.sender);\\n        Powered._setPowerSwitch(powerSwitch);\\n\\n        // commit to storage\\n        _aludel.stakingToken = params.stakingToken;\\n        _aludel.rewardToken = params.rewardToken;\\n        _aludel.rewardPool = rewardPool;\\n        _aludel.rewardScaling = params.rewardScaling;\\n\\n        // emit event\\n        emit AludelCreated(rewardPool, powerSwitch);\\n    }\\n\\n    /* getter functions */\\n\\n    function getBonusTokenSetLength()\\n        external\\n        view\\n        override\\n        returns (uint256 length)\\n    {\\n        return _bonusTokenSet.length();\\n    }\\n\\n    function getBonusTokenAtIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (address bonusToken)\\n    {\\n        return _bonusTokenSet.at(index);\\n    }\\n\\n    function getVaultFactorySetLength()\\n        external\\n        view\\n        override\\n        returns (uint256 length)\\n    {\\n        return _vaultFactorySet.length();\\n    }\\n\\n    function getVaultFactoryAtIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (address factory)\\n    {\\n        return _vaultFactorySet.at(index);\\n    }\\n\\n    function isValidVault(address target)\\n        public\\n        view\\n        override\\n        returns (bool validity)\\n    {\\n        // validate target is created from whitelisted vault factory\\n        for (uint256 index = 0; index < _vaultFactorySet.length(); index++) {\\n            if (\\n                IInstanceRegistry(_vaultFactorySet.at(index)).isInstance(target)\\n            ) {\\n                return true;\\n            }\\n        }\\n        // explicit return\\n        return false;\\n    }\\n\\n    function isValidAddress(address target)\\n        public\\n        view\\n        override\\n        returns (bool validity)\\n    {\\n        // sanity check target for potential input errors\\n        return\\n            target != address(this) &&\\n            target != address(0) &&\\n            target != _aludel.stakingToken &&\\n            target != _aludel.rewardToken &&\\n            target != _aludel.rewardPool &&\\n            !_bonusTokenSet.contains(target);\\n    }\\n\\n    /* Aludel getters */\\n\\n    function getAludelData()\\n        external\\n        view\\n        override\\n        returns (AludelData memory aludel)\\n    {\\n        return _aludel;\\n    }\\n\\n    function getCurrentUnlockedRewards()\\n        public\\n        view\\n        override\\n        returns (uint256 unlockedRewards)\\n    {\\n        // calculate reward available based on state\\n        return getFutureUnlockedRewards(block.timestamp);\\n    }\\n\\n    function getFutureUnlockedRewards(uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 unlockedRewards)\\n    {\\n        // get reward amount remaining\\n        uint256 remainingRewards =\\n            IERC20(_aludel.rewardToken).balanceOf(_aludel.rewardPool);\\n        // calculate reward available based on state\\n        unlockedRewards = calculateUnlockedRewards(\\n            _aludel.rewardSchedules,\\n            remainingRewards,\\n            _aludel.rewardSharesOutstanding,\\n            timestamp\\n        );\\n        // explicit return\\n        return unlockedRewards;\\n    }\\n\\n    function getCurrentTotalStakeUnits()\\n        public\\n        view\\n        override\\n        returns (uint256 totalStakeUnits)\\n    {\\n        // calculate new stake units\\n        return getFutureTotalStakeUnits(block.timestamp);\\n    }\\n\\n    function getFutureTotalStakeUnits(uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 totalStakeUnits)\\n    {\\n        // return early if no change\\n        if (timestamp == _aludel.lastUpdate) return _aludel.totalStakeUnits;\\n        // calculate new stake units\\n        uint256 newStakeUnits =\\n            calculateStakeUnits(_aludel.totalStake, _aludel.lastUpdate, timestamp);\\n        // add to cached total\\n        totalStakeUnits = _aludel.totalStakeUnits.add(newStakeUnits);\\n        // explicit return\\n        return totalStakeUnits;\\n    }\\n\\n    /* vault getters */\\n\\n    function getVaultData(address vault)\\n        external\\n        view\\n        override\\n        returns (VaultData memory vaultData)\\n    {\\n        return _vaults[vault];\\n    }\\n\\n    function getCurrentVaultReward(address vault)\\n        external\\n        view\\n        override\\n        returns (uint256 reward)\\n    {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                _vaults[vault]\\n                    .totalStake,\\n                getCurrentUnlockedRewards(),\\n                getCurrentTotalStakeUnits(),\\n                block\\n                    .timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getFutureVaultReward(address vault, uint256 timestamp)\\n        external\\n        view\\n        override\\n        returns (uint256 reward)\\n    {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                _vaults[vault]\\n                    .totalStake,\\n                getFutureUnlockedRewards(timestamp),\\n                getFutureTotalStakeUnits(timestamp),\\n                timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getCurrentStakeReward(address vault, uint256 stakeAmount)\\n        external\\n        view\\n        override\\n        returns (uint256 reward)\\n    {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                stakeAmount,\\n                getCurrentUnlockedRewards(),\\n                getCurrentTotalStakeUnits(),\\n                block\\n                    .timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getFutureStakeReward(\\n        address vault,\\n        uint256 stakeAmount,\\n        uint256 timestamp\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 reward)\\n    {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                stakeAmount,\\n                getFutureUnlockedRewards(timestamp),\\n                getFutureTotalStakeUnits(timestamp),\\n                timestamp,\\n                _aludel\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getCurrentVaultStakeUnits(address vault)\\n        public\\n        view\\n        override\\n        returns (uint256 stakeUnits)\\n    {\\n        // calculate stake units\\n        return getFutureVaultStakeUnits(vault, block.timestamp);\\n    }\\n\\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 stakeUnits)\\n    {\\n        // calculate stake units\\n        return calculateTotalStakeUnits(_vaults[vault].stakes, timestamp);\\n    }\\n\\n    /* pure functions */\\n\\n    function calculateTotalStakeUnits(\\n        StakeData[] memory stakes,\\n        uint256 timestamp\\n    )\\n        public\\n        pure\\n        override\\n        returns (uint256 totalStakeUnits)\\n    {\\n        for (uint256 index; index < stakes.length; index++) {\\n            // reference stake\\n            StakeData memory stakeData = stakes[index];\\n            // calculate stake units\\n            uint256 stakeUnits =\\n            calculateStakeUnits(stakeData.amount, stakeData.timestamp, timestamp);\\n            // add to running total\\n            totalStakeUnits = totalStakeUnits.add(stakeUnits);\\n        }\\n    }\\n\\n    function calculateStakeUnits(uint256 amount, uint256 start, uint256 end)\\n        public\\n        pure\\n        override\\n        returns (uint256 stakeUnits)\\n    {\\n        // calculate duration\\n        uint256 duration = end.sub(start);\\n        // calculate stake units\\n        stakeUnits = duration.mul(amount);\\n        // explicit return\\n        return stakeUnits;\\n    }\\n\\n    function calculateUnlockedRewards(\\n        RewardSchedule[] memory rewardSchedules,\\n        uint256 rewardBalance,\\n        uint256 sharesOutstanding,\\n        uint256 timestamp\\n    )\\n        public\\n        pure\\n        override\\n        returns (uint256 unlockedRewards)\\n    {\\n        // return 0 if no registered schedules\\n        if (rewardSchedules.length == 0) {\\n            return 0;\\n        }\\n\\n        // calculate reward shares locked across all reward schedules\\n        uint256 sharesLocked;\\n        for (uint256 index = 0; index < rewardSchedules.length; index++) {\\n            // fetch reward schedule storage reference\\n            RewardSchedule memory schedule = rewardSchedules[index];\\n\\n            // caculate amount of shares available on this schedule\\n            // if (now - start) < duration\\n            //   sharesLocked = shares - (shares * (now - start) / duration)\\n            // else\\n            //   sharesLocked = 0\\n            uint256 currentSharesLocked = 0;\\n            if (timestamp.sub(schedule.start) < schedule.duration) {\\n                currentSharesLocked = schedule.shares.sub(\\n                    schedule.shares.mul(timestamp.sub(schedule.start)).div(schedule.duration)\\n                );\\n            }\\n\\n            // add to running total\\n            sharesLocked = sharesLocked.add(currentSharesLocked);\\n        }\\n\\n        // convert shares to reward\\n        // rewardLocked = sharesLocked * rewardBalance / sharesOutstanding\\n        uint256 rewardLocked =\\n            sharesLocked.mul(rewardBalance).div(sharesOutstanding);\\n\\n        // calculate amount available\\n        // unlockedRewards = rewardBalance - rewardLocked\\n        unlockedRewards = rewardBalance.sub(rewardLocked);\\n\\n        // explicit return\\n        return unlockedRewards;\\n    }\\n\\n    function calculateRewardFromStakes(\\n        StakeData[] memory stakes,\\n        uint256 unstakeAmount,\\n        uint256 unlockedRewards,\\n        uint256 totalStakeUnits,\\n        uint256 timestamp,\\n        RewardScaling memory rewardScaling\\n    )\\n        public\\n        pure\\n        override\\n        returns (RewardOutput memory out)\\n    {\\n        uint256 stakesToDrop = 0;\\n        while (unstakeAmount > 0) {\\n            // fetch vault stake storage reference\\n            StakeData memory lastStake =\\n                stakes[stakes.length.sub(stakesToDrop).sub(1)];\\n\\n            // calculate stake duration\\n            uint256 stakeDuration = timestamp.sub(lastStake.timestamp);\\n\\n            uint256 currentAmount;\\n            if (lastStake.amount > unstakeAmount) {\\n                // set current amount to remaining unstake amount\\n                currentAmount = unstakeAmount;\\n                // amount of last stake is reduced\\n                out.lastStakeAmount = lastStake.amount.sub(unstakeAmount);\\n            } else {\\n                // set current amount to amount of last stake\\n                currentAmount = lastStake.amount;\\n                // add to stakes to drop\\n                stakesToDrop += 1;\\n            }\\n\\n            // update remaining unstakeAmount\\n            unstakeAmount = unstakeAmount.sub(currentAmount);\\n\\n            // calculate reward amount\\n            uint256 currentReward = calculateReward(\\n                    unlockedRewards,\\n                    currentAmount,\\n                    stakeDuration,\\n                    totalStakeUnits,\\n                    rewardScaling\\n                );\\n\\n            // update cumulative reward\\n            out.reward = out.reward.add(currentReward);\\n\\n            // update cached unlockedRewards\\n            unlockedRewards = unlockedRewards.sub(currentReward);\\n\\n            // calculate time weighted stake\\n            uint256 stakeUnits = currentAmount.mul(stakeDuration);\\n\\n            // update cached totalStakeUnits\\n            totalStakeUnits = totalStakeUnits.sub(stakeUnits);\\n        }\\n\\n        // explicit return\\n        return\\n            RewardOutput(\\n                out.lastStakeAmount,\\n                stakes.length.sub(stakesToDrop),\\n                out.reward,\\n                totalStakeUnits\\n            );\\n    }\\n\\n    function calculateReward(\\n        uint256 unlockedRewards,\\n        uint256 stakeAmount,\\n        uint256 stakeDuration,\\n        uint256 totalStakeUnits,\\n        RewardScaling memory rewardScaling\\n    )\\n        public\\n        pure\\n        override\\n        returns (uint256 reward)\\n    {\\n        // calculate time weighted stake\\n        uint256 stakeUnits = stakeAmount.mul(stakeDuration);\\n\\n        // calculate base reward\\n        // baseReward = unlockedRewards * stakeUnits / totalStakeUnits\\n        uint256 baseReward = 0;\\n        if (totalStakeUnits != 0) {\\n            // scale reward according to proportional weight\\n            baseReward = unlockedRewards.mul(stakeUnits).div(totalStakeUnits);\\n        }\\n\\n        // calculate scaled reward\\n        // if no scaling or scaling period completed\\n        //   reward = baseReward\\n        // else\\n        //   minReward = baseReward * scalingFloor / scalingCeiling\\n        //   bonusReward = baseReward\\n        //                 * (scalingCeiling - scalingFloor) / scalingCeiling\\n        //                 * duration / scalingTime\\n        //   reward = minReward + bonusReward\\n        if (\\n            stakeDuration\\n                >= rewardScaling.time\\n                || rewardScaling.floor\\n                == rewardScaling.ceiling\\n        ) {\\n            // no reward scaling applied\\n            reward = baseReward;\\n        } else {\\n            // calculate minimum reward using scaling floor\\n            uint256 minReward =\\n                baseReward.mul(rewardScaling.floor).div(rewardScaling.ceiling);\\n\\n            // calculate bonus reward with vested portion of scaling factor\\n            uint256 bonusReward = baseReward\\n                    .mul(stakeDuration)\\n                    .mul(rewardScaling.ceiling.sub(rewardScaling.floor))\\n                    .div(rewardScaling.ceiling)\\n                    .div(rewardScaling.time);\\n\\n            // add minimum reward and bonus reward\\n            reward = minReward.add(bonusReward);\\n        }\\n\\n        // explicit return\\n        return reward;\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Add funds to the Aludel\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope:\\n    ///   - increase _aludel.rewardSharesOutstanding\\n    ///   - append to _aludel.rewardSchedules\\n    /// token transfer: transfer staking tokens from msg.sender to reward pool\\n    /// @param amount uint256 Amount of reward tokens to deposit\\n    /// @param duration uint256 Duration over which to linearly unlock rewards\\n    function fund(uint256 amount, uint256 duration)\\n        external\\n        override\\n        onlyOwner\\n        onlyOnline\\n    {\\n        // validate duration\\n        if (duration == 0) {\\n            revert InvalidDuration();\\n        }\\n\\n        uint256 fee = amount.mul(_feeBps).div(10000);\\n        amount = amount.sub(fee);\\n\\n        // transfer reward tokens to `_feeRecipient` \\n        TransferHelper.safeTransferFrom(\\n            _aludel.rewardToken,\\n            msg.sender,\\n            _feeRecipient,\\n            fee\\n        );\\n        \\n        // create new reward shares\\n        // if existing rewards on this Aludel\\n        //   mint new shares proportional to % change in rewards remaining\\n        //   newShares = remainingShares * newReward / remainingRewards\\n        // else\\n        //   mint new shares with BASE_SHARES_PER_WEI initial conversion rate\\n        //   store as fixed point number with same  of decimals as reward token\\n        uint256 newRewardShares;\\n        if (_aludel.rewardSharesOutstanding > 0) {\\n            uint256 remainingRewards =\\n                IERC20(_aludel.rewardToken).balanceOf(_aludel.rewardPool);\\n            newRewardShares =\\n                _aludel.rewardSharesOutstanding.mul(amount).div(remainingRewards);\\n        } else {\\n            newRewardShares = amount.mul(BASE_SHARES_PER_WEI);\\n        }\\n\\n        // add reward shares to total\\n        _aludel.rewardSharesOutstanding =\\n            _aludel.rewardSharesOutstanding.add(newRewardShares);\\n\\n        // store new reward schedule\\n        _aludel.rewardSchedules.push(RewardSchedule(duration, block.timestamp, newRewardShares));\\n\\n        // transfer reward tokens to reward pool\\n        TransferHelper.safeTransferFrom(\\n            _aludel.rewardToken,\\n            msg.sender,\\n            _aludel.rewardPool,\\n            amount\\n        );\\n\\n        // emit event\\n        emit AludelFunded(amount, duration);\\n    }\\n\\n    /// @notice Add vault factory to whitelist\\n    /// @dev use this function to enable stakes to vaults coming from the specified\\n    ///      factory contract\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - not shutdown\\n    /// state scope:\\n    ///   - append to _vaultFactorySet\\n    /// token transfer: none\\n    /// @param factory address The address of the vault factory\\n    function registerVaultFactory(address factory)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n        notShutdown\\n    {\\n        // add factory to set\\n        if (!_vaultFactorySet.add(factory)) {\\n            revert VaultAlreadyRegistered();\\n        }\\n        // emit event\\n        emit VaultFactoryRegistered(factory);\\n    }\\n\\n    /// @notice Remove vault factory from whitelist\\n    /// @dev use this function to disable new stakes to vaults coming from the specified\\n    ///      factory contract.\\n    ///      note: vaults with existing stakes from this factory are sill able to unstake\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - not shutdown\\n    /// state scope:\\n    ///   - remove from _vaultFactorySet\\n    /// token transfer: none\\n    /// @param factory address The address of the vault factory\\n    function removeVaultFactory(address factory)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n        notShutdown\\n    {\\n        // remove factory from set\\n        if (!_vaultFactorySet.remove(factory)) {\\n            revert VaultFactoryNotRegistered();\\n        }\\n        // emit event\\n        emit VaultFactoryRemoved(factory);\\n    }\\n\\n    /// @notice Register bonus token for distribution\\n    /// @dev use this function to enable distribution of any ERC20 held by the RewardPool contract\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope:\\n    ///   - append to _bonusTokenSet\\n    /// token transfer: none\\n    /// @param bonusToken address The address of the bonus token\\n    function registerBonusToken(address bonusToken)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n        onlyOnline\\n    {\\n        // verify valid bonus token\\n        _validateAddress(bonusToken);\\n\\n        // verify bonus token count\\n        if (_bonusTokenSet.length() >= MAX_REWARD_TOKENS) {\\n            revert MaxBonusTokensReached();\\n        }\\n        // add token to set\\n        assert(_bonusTokenSet.add(bonusToken));\\n\\n        // emit event\\n        emit BonusTokenRegistered(bonusToken);\\n    }\\n\\n    /// @notice Rescue tokens from RewardPool\\n    /// @dev use this function to rescue tokens from RewardPool contract\\n    ///      without distributing to stakers or triggering emergency shutdown\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope: none\\n    /// token transfer: transfer requested token from RewardPool to recipient\\n    /// @param token address The address of the token to rescue\\n    /// @param recipient address The address of the recipient\\n    /// @param amount uint256 The amount of tokens to rescue\\n    function rescueTokensFromRewardPool(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        onlyOwner\\n        onlyOnline\\n    {\\n        // verify recipient\\n        _validateAddress(recipient);\\n\\n        // check not attempting to unstake reward token\\n        if (token == _aludel.rewardToken) {\\n            revert InvalidAddress(token);\\n        }\\n        // check not attempting to wthdraw bonus token\\n        if (_bonusTokenSet.contains(token)) {\\n            revert InvalidAddress(token);\\n        }\\n\\n        // transfer tokens to recipient\\n        IRewardPool(_aludel.rewardPool).sendERC20(token, recipient, amount);\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Stake tokens\\n    /// access control: anyone with a valid permission\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    ///   - when vault exists on this Aludel\\n    /// state scope:\\n    ///   - append to _vaults[vault].stakes\\n    ///   - increase _vaults[vault].totalStake\\n    ///   - increase _aludel.totalStake\\n    ///   - increase _aludel.totalStakeUnits\\n    ///   - increase _aludel.lastUpdate\\n    /// token transfer: transfer staking tokens from msg.sender to vault\\n    /// @param vault address The address of the vault to stake from\\n    /// @param amount uint256 The amount of staking tokens to stake\\n    /// @param permission bytes The signed lock permission for the universal vault\\n\\n    function stake(address vault, uint256 amount, bytes calldata permission)\\n        external\\n        override\\n        onlyOnline\\n        hasStarted\\n    {\\n        // verify vault is valid\\n        if (!isValidVault(vault)) {\\n            revert InvalidVault();\\n        }\\n        // verify non-zero amount\\n        if (amount == 0) {\\n            revert NoAmountStaked();\\n        }\\n\\n        // fetch vault storage reference\\n        VaultData storage vaultData = _vaults[vault];\\n\\n        // verify stakes boundary not reached\\n        if (vaultData.stakes.length >= MAX_STAKES_PER_VAULT) {\\n            revert MaxStakesReached();\\n        }\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // store amount and timestamp\\n        vaultData.stakes.push(StakeData(amount, block.timestamp));\\n\\n        // update cached total vault and Aludel amounts\\n        vaultData.totalStake = vaultData.totalStake.add(amount);\\n        _aludel.totalStake = _aludel.totalStake.add(amount);\\n\\n        // call lock on vault\\n        IUniversalVault(vault).lock(_aludel.stakingToken, amount, permission);\\n\\n        // emit event\\n        emit Staked(vault, amount);\\n    }\\n\\n    /// @notice Unstake staking tokens and claim reward\\n    /// @dev rewards can only be claimed when unstaking, thus reseting the reward multiplier\\n    /// access control: anyone with a valid permission\\n    /// state machine:\\n    ///   - when vault exists on this Aludel\\n    ///   - after stake from vault\\n    ///   - can be called multiple times while sufficient stake remains\\n    ///   - only online\\n    /// state scope:\\n    ///   - decrease _aludel.rewardSharesOutstanding\\n    ///   - decrease _aludel.totalStake\\n    ///   - increase _aludel.lastUpdate\\n    ///   - modify _aludel.totalStakeUnits\\n    ///   - modify _vaults[vault].stakes\\n    ///   - decrease _vaults[vault].totalStake\\n    /// token transfer:\\n    ///   - transfer reward tokens from reward pool to vault\\n    ///   - transfer bonus tokens from reward pool to vault\\n    /// @param vault address The vault to unstake from\\n    /// @param amount uint256 The amount of staking tokens to unstake\\n    /// @param permission bytes The signed lock permission for the universal vault\\n    function unstakeAndClaim(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    )\\n        external\\n        override\\n        onlyOnline\\n        hasStarted\\n    {\\n        // fetch vault storage reference\\n        VaultData storage vaultData = _vaults[vault];\\n\\n        // verify non-zero amount\\n        if (amount == 0) {\\n            revert NoAmountUnstaked();\\n        }\\n\\n        // check for sufficient vault stake amount\\n        if (vaultData.totalStake < amount) {\\n            revert InsufficientVaultStake();\\n        }\\n\\n        // check for sufficient Aludel stake amount\\n        // if this check fails, there is a bug in stake accounting\\n        assert(_aludel.totalStake >= amount);\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // get reward amount remaining\\n        uint256 remainingRewards =\\n            IERC20(_aludel.rewardToken).balanceOf(_aludel.rewardPool);\\n\\n        // calculate vested portion of reward pool\\n        uint256 unlockedRewards = calculateUnlockedRewards(\\n                _aludel.rewardSchedules,\\n                remainingRewards,\\n                _aludel.rewardSharesOutstanding,\\n                block.timestamp\\n            );\\n\\n        // calculate vault time weighted reward with scaling\\n        RewardOutput memory out = calculateRewardFromStakes(\\n                vaultData.stakes,\\n                amount,\\n                unlockedRewards,\\n                _aludel.totalStakeUnits,\\n                block.timestamp,\\n                _aludel.rewardScaling\\n            );\\n\\n        // update stake data in storage\\n        if (out.newStakesCount == 0) {\\n            // all stakes have been unstaked\\n            delete vaultData.stakes;\\n        } else {\\n            // some stakes have been completely or partially unstaked\\n            // delete fully unstaked stakes\\n            while (vaultData.stakes.length > out.newStakesCount) vaultData.stakes.pop();\\n\\n            // update stake amount when lastStakeAmount is set\\n            if (out.lastStakeAmount > 0) {\\n                // update partially unstaked stake\\n                vaultData.stakes[out.newStakesCount.sub(1)].amount =\\n                    out.lastStakeAmount;\\n            }\\n        }\\n\\n        // update cached stake totals\\n        vaultData.totalStake = vaultData.totalStake.sub(amount);\\n        _aludel.totalStake = _aludel.totalStake.sub(amount);\\n        _aludel.totalStakeUnits = out.newTotalStakeUnits;\\n\\n        // unlock staking tokens from vault\\n        IUniversalVault(vault).unlock(_aludel.stakingToken, amount, permission);\\n\\n        // emit event\\n        emit Unstaked(vault, amount);\\n\\n        // only perform on non-zero reward\\n        if (out.reward > 0) {\\n\\n            // calculate shares to burn\\n            // sharesToBurn = sharesOutstanding * reward / remainingRewards\\n            uint256 sharesToBurn =\\n            _aludel.rewardSharesOutstanding.mul(out.reward).div(remainingRewards);\\n\\n            // burn claimed shares\\n            _aludel.rewardSharesOutstanding =\\n                _aludel.rewardSharesOutstanding.sub(sharesToBurn);\\n\\n            // transfer bonus tokens from reward pool to vault\\n            if (_bonusTokenSet.length() > 0) {\\n                for (\\n                    uint256 index = 0; index < _bonusTokenSet.length(); index++\\n                ) {\\n                    // fetch bonus token address reference\\n                    address bonusToken = _bonusTokenSet.at(index);\\n\\n                    // calculate bonus token amount\\n                    // bonusAmount = bonusRemaining * reward / remainingRewards\\n                    uint256 bonusAmount =\\n                    IERC20(bonusToken).balanceOf(_aludel.rewardPool).mul(out.reward).div(\\n                            remainingRewards\\n                        );\\n\\n                    // transfer bonus token\\n                    IRewardPool(_aludel.rewardPool).sendERC20(bonusToken, vault, bonusAmount);\\n\\n                    // emit event\\n                    emit RewardClaimed(vault, bonusToken, bonusAmount);\\n                }\\n            }\\n\\n            // transfer reward tokens from reward pool to vault\\n            IRewardPool(_aludel.rewardPool).sendERC20(_aludel.rewardToken, vault, out.reward);\\n\\n            // emit event\\n            emit RewardClaimed(vault, _aludel.rewardToken, out.reward);\\n        }\\n    }\\n\\n    /// @notice Exit Aludel without claiming reward\\n    /// @dev This function should never revert when correctly called by the vault.\\n    ///      A max number of stakes per vault is set with MAX_STAKES_PER_VAULT to\\n    ///      place an upper bound on the for loop in calculateTotalStakeUnits().\\n    /// access control: only callable by the vault directly\\n    /// state machine:\\n    ///   - when vault exists on this Aludel\\n    ///   - when active stake from this vault\\n    ///   - any power state\\n    /// state scope:\\n    ///   - decrease _aludel.totalStake\\n    ///   - increase _aludel.lastUpdate\\n    ///   - modify _aludel.totalStakeUnits\\n    ///   - delete _vaults[vault]\\n    /// token transfer: none\\n    function rageQuit() external virtual override {\\n        // fetch vault storage reference\\n        VaultData storage _vaultData = _vaults[msg.sender];\\n\\n        // revert if no active stakes\\n        if (_vaultData.stakes.length == 0) {\\n            revert NoStakes();\\n        }\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // emit event\\n        emit Unstaked(msg.sender, _vaultData.totalStake);\\n\\n        // update cached totals\\n        _aludel.totalStake = _aludel.totalStake.sub(_vaultData.totalStake);\\n        _aludel.totalStakeUnits = _aludel.totalStakeUnits.sub(\\n            calculateTotalStakeUnits(_vaultData.stakes, block.timestamp)\\n        );\\n\\n        // delete stake data\\n        delete _vaults[msg.sender];\\n    }\\n\\n    /* convenience functions */\\n\\n    function _updateTotalStakeUnits() internal virtual {\\n        // update cached totalStakeUnits\\n        _aludel.totalStakeUnits = getCurrentTotalStakeUnits();\\n        // update cached lastUpdate\\n        _aludel.lastUpdate = block.timestamp;\\n    }\\n\\n    function _validateAddress(address target) internal view virtual {\\n        // sanity check target for potential input errors\\n        if (!isValidAddress(target)) {\\n            revert InvalidAddress(target);\\n        }\\n    }\\n\\n    function _truncateStakesArray(StakeData[] memory array, uint256 newLength)\\n        internal\\n        pure\\n        virtual\\n        returns (StakeData[] memory newArray)\\n    {\\n        newArray = new StakeData[](newLength);\\n        for (uint256 index = 0; index < newLength; index++) {\\n            newArray[index] = array[index];\\n        }\\n        return newArray;\\n    }\\n}\",\"keccak256\":\"0xb04a83e2c3fded6e51e17f6291be5da5a89c607aa229dc9d62ac6bead043a54c\",\"license\":\"GPL-3.0\"},\"src/contracts/aludel/IAludel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\ninterface IRageQuit {\\n    function rageQuit() external;\\n}\\n\\ninterface IAludel is IRageQuit {\\n    /* admin events */\\n\\n    event AludelCreated(address rewardPool, address powerSwitch);\\n    event AludelFunded(uint256 amount, uint256 duration);\\n    event BonusTokenRegistered(address token);\\n    event VaultFactoryRegistered(address factory);\\n    event VaultFactoryRemoved(address factory);\\n\\n    /* user events */\\n\\n    event Staked(address vault, uint256 amount);\\n    event Unstaked(address vault, uint256 amount);\\n    event RewardClaimed(address vault, address token, uint256 amount);\\n\\n    /* data types */\\n\\n    struct AludelData {\\n        address stakingToken;\\n        address rewardToken;\\n        address rewardPool;\\n        RewardScaling rewardScaling;\\n        uint256 rewardSharesOutstanding;\\n        uint256 totalStake;\\n        uint256 totalStakeUnits;\\n        uint256 lastUpdate;\\n        RewardSchedule[] rewardSchedules;\\n    }\\n\\n    struct RewardSchedule {\\n        uint256 duration;\\n        uint256 start;\\n        uint256 shares;\\n    }\\n\\n    struct VaultData {\\n        uint256 totalStake;\\n        StakeData[] stakes;\\n    }\\n\\n    struct StakeData {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct RewardScaling {\\n        uint256 floor;\\n        uint256 ceiling;\\n        uint256 time;\\n    }\\n\\n    struct RewardOutput {\\n        uint256 lastStakeAmount;\\n        uint256 newStakesCount;\\n        uint256 reward;\\n        uint256 newTotalStakeUnits;\\n    }\\n\\n    function initializeLock() external;\\n\\n    function initialize(\\n        uint64 startTime,\\n        address ownerAddress,\\n        address feeRecipient,\\n        uint16 feeBps,\\n        bytes calldata\\n    ) external;\\n\\n    /* user functions */\\n\\n    function stake(address vault, uint256 amount, bytes calldata permission)\\n        external;\\n\\n    function unstakeAndClaim(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    )\\n        external;\\n\\n    /* admin functions */\\n\\n    function fund(uint256 amount, uint256 duration) external;\\n\\n    function registerVaultFactory(address factory) external;\\n\\n    function removeVaultFactory(address factory) external;\\n\\n    function registerBonusToken(address bonusToken) external;\\n\\n    function rescueTokensFromRewardPool(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external;\\n\\n    /* getter functions */\\n\\n    function getAludelData()\\n        external\\n        view\\n        returns (AludelData memory aludel);\\n\\n    function getBonusTokenSetLength()\\n        external\\n        view\\n        returns (uint256 length);\\n\\n    function getBonusTokenAtIndex(uint256 index)\\n        external\\n        view\\n        returns (address bonusToken);\\n\\n    function getVaultFactorySetLength()\\n        external\\n        view\\n        returns (uint256 length);\\n\\n    function getVaultFactoryAtIndex(uint256 index)\\n        external\\n        view\\n        returns (address factory);\\n\\n    function getVaultData(address vault)\\n        external\\n        view\\n        returns (VaultData memory vaultData);\\n\\n    function isValidAddress(address target)\\n        external\\n        view\\n        returns (bool validity);\\n\\n    function isValidVault(address target)\\n        external\\n        view\\n        returns (bool validity);\\n\\n    function getCurrentUnlockedRewards()\\n        external\\n        view\\n        returns (uint256 unlockedRewards);\\n\\n    function getFutureUnlockedRewards(uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 unlockedRewards);\\n\\n    function getCurrentVaultReward(address vault)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getCurrentStakeReward(address vault, uint256 stakeAmount)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getFutureVaultReward(address vault, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getFutureStakeReward(\\n        address vault,\\n        uint256 stakeAmount,\\n        uint256 timestamp\\n    )\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getCurrentVaultStakeUnits(address vault)\\n        external\\n        view\\n        returns (uint256 stakeUnits);\\n\\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 stakeUnits);\\n\\n    function getCurrentTotalStakeUnits()\\n        external\\n        view\\n        returns (uint256 totalStakeUnits);\\n\\n    function getFutureTotalStakeUnits(uint256 timestamp)\\n        external\\n        view\\n        returns (uint256 totalStakeUnits);\\n\\n    /* pure functions */\\n\\n    function calculateTotalStakeUnits(\\n        StakeData[] memory stakes,\\n        uint256 timestamp\\n    )\\n        external\\n        pure\\n        returns (uint256 totalStakeUnits);\\n\\n    function calculateStakeUnits(uint256 amount, uint256 start, uint256 end)\\n        external\\n        pure\\n        returns (uint256 stakeUnits);\\n\\n    function calculateUnlockedRewards(\\n        RewardSchedule[] memory rewardSchedules,\\n        uint256 rewardBalance,\\n        uint256 sharesOutstanding,\\n        uint256 timestamp\\n    )\\n        external\\n        pure\\n        returns (uint256 unlockedRewards);\\n\\n    function calculateRewardFromStakes(\\n        StakeData[] memory stakes,\\n        uint256 unstakeAmount,\\n        uint256 unlockedRewards,\\n        uint256 totalStakeUnits,\\n        uint256 timestamp,\\n        RewardScaling memory rewardScaling\\n    )\\n        external\\n        pure\\n        returns (RewardOutput memory out);\\n\\n    function calculateReward(\\n        uint256 unlockedRewards,\\n        uint256 stakeAmount,\\n        uint256 stakeDuration,\\n        uint256 totalStakeUnits,\\n        RewardScaling memory rewardScaling\\n    )\\n        external\\n        pure\\n        returns (uint256 reward);\\n}\",\"keccak256\":\"0xe1381bf267c5122bd7298956107a1e6af2755332169e172f4597c264e7e9b855\",\"license\":\"GPL-3.0-only\"},\"src/contracts/powerSwitch/PowerSwitch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IPowerSwitch {\\n    /* admin events */\\n\\n    event PowerOn();\\n    event PowerOff();\\n    event EmergencyShutdown();\\n\\n    /* data types */\\n\\n    enum State {\\n        Online,\\n        Offline,\\n        Shutdown,\\n        NotStarted\\n    }\\n\\n    /* admin functions */\\n\\n    function powerOn() external;\\n\\n    function powerOff() external;\\n\\n    function emergencyShutdown() external;\\n\\n    /* view functions */\\n\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getStatus() external view returns (State status);\\n\\n    function getStartTime() external view returns (uint64 startTime);\\n\\n    function getPowerController()\\n        external\\n        view\\n        returns (address controller);\\n}\\n\\n/// @title PowerSwitch\\n/// @notice Standalone pausing and emergency stop functionality\\ncontract PowerSwitch is IPowerSwitch, Ownable {\\n    /* storage */\\n\\n    uint64 private _startTimestamp;\\n    IPowerSwitch.State private _status;\\n\\n    error PowerSwitch_CannotPowerOn();\\n    error PowerSwitch_InvalidOwner();\\n    error PowerSwitch_CannotPowerOff();\\n    error PowerSwitch_CannotShutdown();\\n\\n    /* initializer */\\n\\n    constructor(address owner, uint64 startTimestamp) {\\n        // sanity check owner\\n        if (owner == address(0)) {\\n            revert PowerSwitch_InvalidOwner();\\n        }\\n\\n        _startTimestamp = startTimestamp;\\n        // transfer ownership\\n        Ownable.transferOwnership(owner);\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Turn Power On\\n    /// access control: only admin\\n    /// state machine: only when offline\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOn() external override onlyOwner {\\n        if (_status != IPowerSwitch.State.Offline) {\\n            revert PowerSwitch_CannotPowerOn();\\n        }\\n        _status = IPowerSwitch.State.Online;\\n        emit PowerOn();\\n    }\\n\\n    /// @notice Turn Power Off\\n    /// access control: only admin\\n    /// state machine: only when online\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOff() external override onlyOwner {\\n        if (_status != IPowerSwitch.State.Online) {\\n            revert PowerSwitch_CannotPowerOff();\\n        }\\n        _status = IPowerSwitch.State.Offline;\\n        emit PowerOff();\\n    }\\n\\n    /// @notice Shutdown Permanently\\n    /// access control: only admin\\n    /// state machine:\\n    /// - when online or offline\\n    /// - can only be called once\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function emergencyShutdown() external override onlyOwner {\\n        if (_status == IPowerSwitch.State.Shutdown) {\\n            revert PowerSwitch_CannotShutdown();\\n        }\\n        _status = IPowerSwitch.State.Shutdown;\\n        emit EmergencyShutdown();\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() external view override returns (bool status) {\\n        return _status == State.Online;\\n    }\\n\\n    function isOffline() external view override returns (bool status) {\\n        return _status == State.Offline;\\n    }\\n\\n    function isShutdown() external view override returns (bool status) {\\n        return _status == State.Shutdown;\\n    }\\n\\n    function getStatus()\\n        external\\n        view\\n        override\\n        returns (IPowerSwitch.State status)\\n    {\\n        // if the current timestamp is greater than _startTimestamp or status is not online\\n        // we return the switch' status\\n        if (block.timestamp >= uint256(_startTimestamp) || _status != State.Online) {\\n            return _status;\\n        } else {\\n            return State.NotStarted;\\n        }\\n    }\\n\\n    function getStartTime()\\n        external\\n        view\\n        override\\n        returns (uint64 startTime)\\n    {\\n        return _startTimestamp;\\n    }\\n\\n    function getPowerController()\\n        external\\n        view\\n        override\\n        returns (address controller)\\n    {\\n        return Ownable.owner();\\n    }\\n}\",\"keccak256\":\"0xade45cbf9ea9bc33cd5b20fcaba6dfe44ce8faad5155872b26b91953a0501d5e\",\"license\":\"GPL-3.0-only\"},\"src/contracts/powerSwitch/Powered.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IPowerSwitch} from \\\"./PowerSwitch.sol\\\";\\n\\ninterface IPowered {\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function isStarted() external view returns (bool status);\\n\\n    function getPowerSwitch() external view returns (address powerSwitch);\\n\\n    function getPowerController()\\n        external\\n        view\\n        returns (address controller);\\n}\\n\\n/// @title Powered\\n/// @notice Helper for calling external PowerSwitch\\ncontract Powered is IPowered {\\n    /* storage */\\n\\n    address private _powerSwitch;\\n\\n    /* errors */\\n\\n    error Powered_NotOnline();\\n    error Powered_NotOffline();\\n    error Powered_IsShutdown();\\n    error Powered_NotShutdown();\\n    error Powered_NotStarted();\\n\\n    /* modifiers */\\n\\n    modifier onlyOnline() {\\n        _onlyOnline();\\n        _;\\n    }\\n\\n    modifier onlyOffline() {\\n        _onlyOffline();\\n        _;\\n    }\\n\\n    modifier notShutdown() {\\n        _notShutdown();\\n        _;\\n    }\\n\\n    modifier onlyShutdown() {\\n        _onlyShutdown();\\n        _;\\n    }\\n\\n    modifier hasStarted() {\\n        _hasStarted();\\n        _;\\n    }\\n\\n    /* initializer */\\n\\n    function _setPowerSwitch(address powerSwitch) internal {\\n        _powerSwitch = powerSwitch;\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOnline();\\n    }\\n\\n    function isOffline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOffline();\\n    }\\n\\n    function isShutdown() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isShutdown();\\n    }\\n\\n    function isStarted() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).getStatus() != IPowerSwitch.State.NotStarted;\\n    }\\n\\n    function getPowerSwitch()\\n        public\\n        view\\n        override\\n        returns (address powerSwitch)\\n    {\\n        return _powerSwitch;\\n    }\\n\\n    function getPowerController()\\n        public\\n        view\\n        override\\n        returns (address controller)\\n    {\\n        return IPowerSwitch(_powerSwitch).getPowerController();\\n    }\\n\\n    /* convenience functions */\\n\\n    function _onlyOnline() private view {\\n        if (!isOnline()) {\\n            revert Powered_NotOnline();\\n        }\\n    }\\n\\n    function _onlyOffline() private view {\\n        if (!isOffline()) {\\n            revert Powered_NotOffline();\\n        }\\n    }\\n\\n    function _notShutdown() private view {\\n        if (isShutdown()) {\\n            revert Powered_IsShutdown();\\n        }\\n    }\\n\\n    function _onlyShutdown() private view {\\n        if (!isShutdown()) {\\n            revert Powered_NotShutdown();\\n        }\\n    }\\n\\n    function _hasStarted() private view {\\n        if (!isStarted()) {\\n            revert Powered_NotStarted();\\n        }\\n    }\\n}\",\"keccak256\":\"0x3d907dbe93ab5f0924c6c540c84d01087a30bf399b0446a18bea1c63ce505ddd\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b615aa280620001146000396000f3fe608060405234801561001057600080fd5b506004361061027d5760003560e01c8063785614351161015c578063a65e2cfd116100ce578063c85dd02511610087578063c85dd025146107fc578063ce1001291461081a578063e2bb9c0f14610838578063e2c0042314610856578063f2fde38b14610886578063f9039437146108a25761027d565b8063a65e2cfd14610728578063a9526fae14610744578063b0ccbf8c14610774578063b3173f9f1461077e578063bf86d690146107ae578063c7edd766146107cc5761027d565b80638531a636116101205780638531a636146106405780638539a69a1461065e5780638da5cb5b1461068e5780638e0ef636146106ac57806398322ab2146106c857806399493c51146106f85761027d565b80637856143514610576578063785b5479146105a65780637985cf56146105d65780637df98acf146106065780638382840c146106105761027d565b80634dd878d9116101f5578063643cd878116101b9578063643cd878146104d85780636471aadb146104f6578063664ab18e1461051257806371406a3214610530578063715018a61461054e578063766f13bc146105585761027d565b80634dd878d91461040c578063544736e61461043c57806356360f711461045a5780635d0cde971461048a57806364219450146104a85761027d565b80630b2c5c14116102475780630b2c5c14146103385780632857edd4146103565780632ee0b2bc146103865780633e12170f146103a257806342c026c7146103be578063438cae7e146103ee5761027d565b80623f07fa146102825780624414df146102b257806301210a18146102d05780630513247b146102ec5780630670fafd14610308575b600080fd5b61029c600480360381019061029791906146f1565b6108be565b6040516102a9919061525f565b60405180910390f35b6102ba610a63565b6040516102c79190615396565b60405180910390f35b6102ea60048036038101906102e59190614c1d565b610a73565b005b610306600480360381019061030191906146f1565b610eb5565b005b610322600480360381019061031d9190614852565b610fbd565b60405161032f9190615396565b60405180910390f35b6103406110c2565b60405161034d9190615396565b60405180910390f35b610370600480360381019061036b9190614928565b6110c9565b60405161037d9190615396565b60405180910390f35b6103a0600480360381019061039b91906146f1565b61113d565b005b6103bc60048036038101906103b791906147de565b611245565b005b6103d860048036038101906103d39190614ab5565b6114c9565b6040516103e59190615396565b60405180910390f35b6103f661151f565b604051610403919061525f565b60405180910390f35b61042660048036038101906104219190614ab5565b6115c6565b6040516104339190615152565b60405180910390f35b6104446115e3565b604051610451919061525f565b60405180910390f35b610474600480360381019061046f91906146f1565b6116b1565b6040516104819190615374565b60405180910390f35b610492611787565b60405161049f9190615396565b60405180910390f35b6104c260048036038101906104bd91906146f1565b61178c565b6040516104cf919061525f565b60405180910390f35b6104e061186e565b6040516104ed9190615396565b60405180910390f35b610510600480360381019061050b91906147de565b61187f565b005b61051a6120f0565b604051610527919061525f565b60405180910390f35b610538612197565b6040516105459190615396565b60405180910390f35b61055661219c565b005b610560612224565b60405161056d9190615152565b60405180910390f35b610590600480360381019061058b91906146f1565b6122cb565b60405161059d9190615396565b60405180910390f35b6105c060048036038101906105bb91906146f1565b6122de565b6040516105cd9190615396565b60405180910390f35b6105f060048036038101906105eb919061479e565b612421565b6040516105fd9190615396565b60405180910390f35b61060e612567565b005b61062a60048036038101906106259190614ba2565b6125f3565b6040516106379190615396565b60405180910390f35b610648612726565b6040516106559190615152565b60405180910390f35b61067860048036038101906106739190614b4f565b612750565b6040516106859190615396565b60405180910390f35b610696612785565b6040516106a39190615152565b60405180910390f35b6106c660048036038101906106c191906146f1565b6127ae565b005b6106e260048036038101906106dd919061479e565b6128d9565b6040516106ef9190615396565b60405180910390f35b610712600480360381019061070d9190614ab5565b6129db565b60405161071f9190615152565b60405180910390f35b610742600480360381019061073d9190614b0f565b6129f8565b005b61075e6004803603810190610759919061479e565b612dac565b60405161076b9190615396565b60405180910390f35b61077c612e6b565b005b610798600480360381019061079391906148a5565b61304e565b6040516107a59190615396565b60405180910390f35b6107b6613186565b6040516107c3919061525f565b60405180910390f35b6107e660048036038101906107e19190614984565b61322d565b6040516107f39190615359565b60405180910390f35b6108046133c8565b6040516108119190615337565b60405180910390f35b6108226135bc565b60405161082f9190615396565b60405180910390f35b6108406135cc565b60405161084d9190615396565b60405180910390f35b610870600480360381019061086b9190614ab5565b6135dd565b60405161087d9190615396565b60405180910390f35b6108a0600480360381019061089b91906146f1565b613745565b005b6108bc60048036038101906108b7919061474b565b61383d565b005b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156109295750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156109865750600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156109e35750600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015610a3f57506002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015610a5c5750610a5a82600e613a4e90919063ffffffff16565b155b9050919050565b6000610a6e426114c9565b905090565b6000610a7f6001613a7e565b90508015610aa3576001600060156101000a81548160ff0219169083151502179055505b60008383810190610ab49190614a88565b905085601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601260146101000a81548161ffff021916908361ffff1602179055508060800151602001518160800151600001511115610b5e576040517f18084af300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160800151604001511415610ba1576040517f8c648c8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff1663cf5ba53f898b604051602001610bd6929190615236565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610c01919061527a565b602060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c53919061471e565b90506000826000015173ffffffffffffffffffffffffffffffffffffffff1663cf5ba53f83604051602001610c889190615152565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610cb3919061527a565b602060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061471e565b9050610d1033613b71565b610d1982613c35565b8260400151600260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260600151600260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826080015160026003016000820151816000015560208201518160010155604082015181600201559050507f9848123ba141e26644059f3993427b10fe045ef81a9f876a081652b36fe85f0b8183604051610e4892919061516d565b60405180910390a15050508015610eac5760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ea3919061529c565b60405180910390a15b50505050505050565b610ebd613c79565b73ffffffffffffffffffffffffffffffffffffffff16610edb612785565b73ffffffffffffffffffffffffffffffffffffffff1614610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890615317565b60405180910390fd5b610f39613c81565b610f4d816010613cc190919063ffffffff16565b610f83576040517f1a8a3d2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f040b321f0ccd1b9d7890282c99da1d97cbf2de30c3af0782aba31fbd9528324381604051610fb29190615152565b60405180910390a150565b60006110b5600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561106a57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611024565b5050505084611078856135dd565b611081866114c9565b866002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b6040015190509392505050565b620f424081565b6000805b83518110156111365760008482815181106110eb576110ea615846565b5b60200260200101519050600061110a8260000151836020015187612750565b905061111f8185613cf190919063ffffffff16565b93505050808061112e90615712565b9150506110cd565b5092915050565b611145613c79565b73ffffffffffffffffffffffffffffffffffffffff16611163612785565b73ffffffffffffffffffffffffffffffffffffffff16146111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b090615317565b60405180910390fd5b6111c1613c81565b6111d5816010613d0790919063ffffffff16565b61120b576040517f49d8266e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f059b5054f04b000050b3cbdf0ad2d8bce0dfca886836a4742ab837cc948cd1af8160405161123a9190615152565b60405180910390a150565b61124d613d37565b611255613d77565b61125e8461178c565b611294576040517fd03a632000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008314156112cf576040517f7e6e0ea900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050601e816001018054905010611353576040517f1846ef1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61135b613db7565b806001016040518060400160405280868152602001428152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506113ca848260000154613cf190919063ffffffff16565b81600001819055506113ea84600260070154613cf190919063ffffffff16565b6002600701819055508473ffffffffffffffffffffffffffffffffffffffff1663c792f45d600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168686866040518563ffffffff1660e01b815260040161145794939291906151f6565b600060405180830381600087803b15801561147157600080fd5b505af1158015611485573d6000803e3d6000fd5b505050507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d85856040516114ba9291906151cd565b60405180910390a15050505050565b60006002600901548214156114e557600260080154905061151a565b60006114fc60026007015460026009015485612750565b905061151681600260080154613cf190919063ffffffff16565b9150505b919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663438cae7e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190614a2e565b905090565b60006115dc82600e613dd490919063ffffffff16565b9050919050565b60006003808111156115f8576115f76157e8565b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e69d5606040518163ffffffff1660e01b815260040160206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190614a5b565b60038111156116aa576116a96157e8565b5b1415905090565b6116b96141d1565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561177857838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611732565b50505050815250509050919050565b603281565b600080600090505b61179e6010613dee565b811015611863576117b9816010613dd490919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16636b44e6be846040518263ffffffff1660e01b81526004016117f19190615152565b60206040518083038186803b15801561180957600080fd5b505afa15801561181d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118419190614a2e565b15611850576001915050611869565b808061185b90615712565b915050611794565b50600090505b919050565b600061187a6010613dee565b905090565b611887613d37565b61188f613d77565b6000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600084141561190d576040517fb6bea6a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838160000154101561194b576040517f16bdadd300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360026007015410156119615761196061575b565b5b611969613db7565b6000600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016119ed9190615152565b60206040518083038186803b158015611a0557600080fd5b505afa158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d9190614ae2565b90506000611aca6002600a01805480602002602001604051908101604052809291908181526020016000905b82821015611ab95783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611a69565b50505050836002600601544261304e565b90506000611b7b84600101805480602002602001604051908101604052809291908181526020016000905b82821015611b3b57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611af5565b505050508884600260080154426002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b9050600081602001511415611b9f57836001016000611b9a91906141eb565b611c4b565b5b806020015184600101805490501115611bf55783600101805480611bc757611bc6615817565b5b6001900381819060005260206000209060020201600080820160009055600182016000905550509055611ba0565b600081600001511115611c4a57806000015184600101611c2360018460200151613e0390919063ffffffff16565b81548110611c3457611c33615846565b5b9060005260206000209060020201600001819055505b5b611c62878560000154613e0390919063ffffffff16565b8460000181905550611c8287600260070154613e0390919063ffffffff16565b60026007018190555080606001516002600801819055508773ffffffffffffffffffffffffffffffffffffffff1663abee0803600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168989896040518563ffffffff1660e01b8152600401611cfd94939291906151f6565b600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050507f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758888604051611d609291906151cd565b60405180910390a16000816040015111156120e6576000611da584611d978460400151600260060154613e1990919063ffffffff16565b613e2f90919063ffffffff16565b9050611dbf81600260060154613e0390919063ffffffff16565b6002600601819055506000611dd4600e613dee565b1115611fc45760005b611de7600e613dee565b811015611fc2576000611e0482600e613dd490919063ffffffff16565b90506000611edd87611ecf87604001518573ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611e719190615152565b60206040518083038186803b158015611e8957600080fd5b505afa158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec19190614ae2565b613e1990919063ffffffff16565b613e2f90919063ffffffff16565b90506002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f975a64838e846040518463ffffffff1660e01b8152600401611f4093929190615196565b600060405180830381600087803b158015611f5a57600080fd5b505af1158015611f6e573d6000803e3d6000fd5b505050507f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b78c8383604051611fa593929190615196565b60405180910390a150508080611fba90615712565b915050611ddd565b505b6002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f975a64600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b85604001516040518463ffffffff1660e01b815260040161204e93929190615196565b600060405180830381600087803b15801561206857600080fd5b505af115801561207c573d6000803e3d6000fd5b505050507f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b789600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604001516040516120dc93929190615196565b60405180910390a1505b5050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663664ab18e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215a57600080fd5b505afa15801561216e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121929190614a2e565b905090565b601e81565b6121a4613c79565b73ffffffffffffffffffffffffffffffffffffffff166121c2612785565b73ffffffffffffffffffffffffffffffffffffffff1614612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220f90615317565b60405180910390fd5b6122226000613b71565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663766f13bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561228e57600080fd5b505afa1580156122a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c6919061471e565b905090565b60006122d78242612dac565b9050919050565b6000612416600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561238b57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612345565b50505050600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546123da6135bc565b6123e2610a63565b426002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b604001519050919050565b600061255b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156124ce57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612488565b50505050600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461251e856135dd565b612527866114c9565b866002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b60400151905092915050565b60006125736001613a7e565b90508015612597576001600060156101000a81548160ff0219169083151502179055505b80156125f05760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516125e7919061529c565b60405180910390a15b50565b6000806126098587613e1990919063ffffffff16565b9050600080851461263c576126398561262b848b613e1990919063ffffffff16565b613e2f90919063ffffffff16565b90505b836040015186101580612656575083602001518460000151145b156126635780925061271b565b60006126928560200151612684876000015185613e1990919063ffffffff16565b613e2f90919063ffffffff16565b9050600061270186604001516126f388602001516126e56126c48b600001518c60200151613e0390919063ffffffff16565b6126d78e8a613e1990919063ffffffff16565b613e1990919063ffffffff16565b613e2f90919063ffffffff16565b613e2f90919063ffffffff16565b90506127168183613cf190919063ffffffff16565b945050505b505095945050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806127668484613e0390919063ffffffff16565b905061277b8582613e1990919063ffffffff16565b9150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6127b6613c79565b73ffffffffffffffffffffffffffffffffffffffff166127d4612785565b73ffffffffffffffffffffffffffffffffffffffff161461282a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282190615317565b60405180910390fd5b612832613d37565b61283b81613e45565b6032612847600e613dee565b1061287e576040517fd3f5862600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61289281600e613d0790919063ffffffff16565b61289f5761289e61575b565b5b7fbca954c637e20d265d501f3c0c9d0df1440001376c36ac73bd296c1a628f528c816040516128ce9190615152565b60405180910390a150565b60006129cf600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561298657838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612940565b50505050836129936135bc565b61299b610a63565b426002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b60400151905092915050565b60006129f1826010613dd490919063ffffffff16565b9050919050565b612a00613c79565b73ffffffffffffffffffffffffffffffffffffffff16612a1e612785565b73ffffffffffffffffffffffffffffffffffffffff1614612a74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6b90615317565b60405180910390fd5b612a7c613d37565b6000811415612ab7576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612af4612710612ae6601260149054906101000a900461ffff1661ffff1686613e1990919063ffffffff16565b613e2f90919063ffffffff16565b9050612b098184613e0390919063ffffffff16565b9250612b5e600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613e92565b6000806002600601541115612c75576000600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401612bf19190615152565b60206040518083038186803b158015612c0957600080fd5b505afa158015612c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c419190614ae2565b9050612c6d81612c5f87600260060154613e1990919063ffffffff16565b613e2f90919063ffffffff16565b915050612c8e565b612c8b620f424085613e1990919063ffffffff16565b90505b612ca681600260060154613cf190919063ffffffff16565b6002600601819055506002600a0160405180606001604052808581526020014281526020018381525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010155604082015181600201555050612d6d600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687613e92565b7fd1652c5efcfb913fe86636bfe9bb19ebb9dd32519e48bb69ffc880e5c2637e1d8484604051612d9e9291906153b1565b60405180910390a150505050565b6000612e63600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015612e5957838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612e13565b50505050836110c9565b905092915050565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101805490501415612ef0576040517fb36e4e6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ef8613db7565b7f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75338260000154604051612f2d9291906151cd565b60405180910390a1612f518160000154600260070154613e0390919063ffffffff16565b600260070181905550612fe8612fd482600101805480602002602001604051908101604052809291908181526020016000905b82821015612fca57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612f84565b50505050426110c9565b600260080154613e0390919063ffffffff16565b600260080181905550600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061304991906141eb565b505050565b60008085511415613062576000905061317e565b600080600090505b865181101561313c57600087828151811061308857613087615846565b5b60200260200101519050600081600001516130b0836020015188613e0390919063ffffffff16565b10156131125761310f6130fc83600001516130ee6130db86602001518b613e0390919063ffffffff16565b8660400151613e1990919063ffffffff16565b613e2f90919063ffffffff16565b8360400151613e0390919063ffffffff16565b90505b6131258185613cf190919063ffffffff16565b93505050808061313490615712565b91505061306a565b506000613164856131568885613e1990919063ffffffff16565b613e2f90919063ffffffff16565b90506131798187613e0390919063ffffffff16565b925050505b949350505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b815260040160206040518083038186803b1580156131f057600080fd5b505afa158015613204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132289190614a2e565b905090565b61323561420f565b60005b600087111561337f5760008861326b600161325d858d51613e0390919063ffffffff16565b613e0390919063ffffffff16565b8151811061327c5761327b615846565b5b60200260200101519050600061329f826020015187613e0390919063ffffffff16565b9050600089836000015111156132d7578990506132c98a8460000151613e0390919063ffffffff16565b8560000181815250506132ee565b826000015190506001846132eb9190615501565b93505b613301818b613e0390919063ffffffff16565b995060006133128a83858c8b6125f3565b905061332b818760400151613cf190919063ffffffff16565b866040018181525050613347818b613e0390919063ffffffff16565b9950600061335e8484613e1990919063ffffffff16565b9050613373818b613e0390919063ffffffff16565b99505050505050613238565b6040518060800160405280836000015181526020016133a8838b51613e0390919063ffffffff16565b815260200183604001518152602001868152509150509695505050505050565b6133d0614237565b6002604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201805480602002602001604051908101604052809291908181526020016000905b828210156135af578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061355f565b5050505081525050905090565b60006135c7426135dd565b905090565b60006135d8600e613dee565b905090565b600080600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016136629190615152565b60206040518083038186803b15801561367a57600080fd5b505afa15801561368e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b29190614ae2565b905061373d6002600a01805480602002602001604051908101604052809291908181526020016000905b8282101561372c57838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906136dc565b50505050826002600601548661304e565b915050919050565b61374d613c79565b73ffffffffffffffffffffffffffffffffffffffff1661376b612785565b73ffffffffffffffffffffffffffffffffffffffff16146137c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137b890615317565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613828906152b7565b60405180910390fd5b61383a81613b71565b50565b613845613c79565b73ffffffffffffffffffffffffffffffffffffffff16613863612785565b73ffffffffffffffffffffffffffffffffffffffff16146138b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138b090615317565b60405180910390fd5b6138c1613d37565b6138ca82613e45565b600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561396057826040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016139579190615152565b60405180910390fd5b61397483600e613a4e90919063ffffffff16565b156139b657826040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016139ad9190615152565b60405180910390fd5b6002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f975a648484846040518463ffffffff1660e01b8152600401613a1793929190615196565b600060405180830381600087803b158015613a3157600080fd5b505af1158015613a45573d6000803e3d6000fd5b50505050505050565b6000613a76836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613fcb565b905092915050565b60008060159054906101000a900460ff1615613af55760018260ff16148015613aad5750613aab30613fee565b155b613aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ae3906152f7565b60405180910390fd5b60009050613b6c565b8160ff16600060149054906101000a900460ff1660ff1610613b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b43906152f7565b60405180910390fd5b81600060146101000a81548160ff021916908360ff160217905550600190505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b613c89613186565b15613cbf576040517e89a30f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000613ce9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614011565b905092915050565b60008183613cff9190615501565b905092915050565b6000613d2f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614125565b905092915050565b613d3f6120f0565b613d75576040517f7ff2ee0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613d7f6115e3565b613db5576040517f71dd7a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613dbf610a63565b60026008018190555042600260090181905550565b6000613de38360000183614195565b60001c905092915050565b6000613dfc826000016141c0565b9050919050565b60008183613e1191906155e2565b905092915050565b60008183613e279190615588565b905092915050565b60008183613e3d9190615557565b905092915050565b613e4e816108be565b613e8f57806040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401613e869190615152565b60405180910390fd5b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613ec693929190615196565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613f14919061513b565b6000604051808303816000865af19150503d8060008114613f51576040519150601f19603f3d011682016040523d82523d6000602084013e613f56565b606091505b5091509150818015613f845750600081511480613f83575080806020019051810190613f829190614a2e565b5b5b613fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fba906152d7565b60405180910390fd5b505050505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000808360010160008481526020019081526020016000205490506000811461411957600060018261404391906155e2565b905060006001866000018054905061405b91906155e2565b90508181146140ca57600086600001828154811061407c5761407b615846565b5b90600052602060002001549050808760000184815481106140a05761409f615846565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806140de576140dd615817565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061411f565b60009150505b92915050565b60006141318383613fcb565b61418a57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061418f565b600090505b92915050565b60008260000182815481106141ad576141ac615846565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b604051806040016040528060008152602001606081525090565b508054600082556002029060005260206000209081019061420c91906142cb565b50565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016142a26142f2565b815260200160008152602001600081526020016000815260200160008152602001606081525090565b5b808211156142ee576000808201600090556001820160009055506002016142cc565b5090565b60405180606001604052806000815260200160008152602001600081525090565b6000614326614321846153ff565b6153da565b90508083825260208201905082856060860282011115614349576143486158b3565b5b60005b85811015614379578161435f88826145e9565b84526020840193506060830192505060018101905061434c565b5050509392505050565b60006143966143918461542b565b6153da565b905080838252602082019050828560408602820111156143b9576143b86158b3565b5b60005b858110156143e957816143cf888261464d565b8452602084019350604083019250506001810190506143bc565b5050509392505050565b600081359050614402816159e9565b92915050565b600081519050614417816159e9565b92915050565b600082601f830112614432576144316158a9565b5b8135614442848260208601614313565b91505092915050565b600082601f8301126144605761445f6158a9565b5b8135614470848260208601614383565b91505092915050565b60008151905061448881615a00565b92915050565b60008083601f8401126144a4576144a36158a9565b5b8235905067ffffffffffffffff8111156144c1576144c06158a4565b5b6020830191508360018202830111156144dd576144dc6158b3565b5b9250929050565b6000815190506144f381615a17565b92915050565b600060e0828403121561450f5761450e6158ae565b5b61451960a06153da565b90506000614529848285016143f3565b600083015250602061453d848285016143f3565b6020830152506040614551848285016143f3565b6040830152506060614565848285016143f3565b606083015250608061457984828501614585565b60808301525092915050565b60006060828403121561459b5761459a6158ae565b5b6145a560606153da565b905060006145b5848285016146b2565b60008301525060206145c9848285016146b2565b60208301525060406145dd848285016146b2565b60408301525092915050565b6000606082840312156145ff576145fe6158ae565b5b61460960606153da565b90506000614619848285016146b2565b600083015250602061462d848285016146b2565b6020830152506040614641848285016146b2565b60408301525092915050565b600060408284031215614663576146626158ae565b5b61466d60406153da565b9050600061467d848285016146b2565b6000830152506020614691848285016146b2565b60208301525092915050565b6000813590506146ac81615a27565b92915050565b6000813590506146c181615a3e565b92915050565b6000815190506146d681615a3e565b92915050565b6000813590506146eb81615a55565b92915050565b600060208284031215614707576147066158bd565b5b6000614715848285016143f3565b91505092915050565b600060208284031215614734576147336158bd565b5b600061474284828501614408565b91505092915050565b600080600060608486031215614764576147636158bd565b5b6000614772868287016143f3565b9350506020614783868287016143f3565b9250506040614794868287016146b2565b9150509250925092565b600080604083850312156147b5576147b46158bd565b5b60006147c3858286016143f3565b92505060206147d4858286016146b2565b9150509250929050565b600080600080606085870312156147f8576147f76158bd565b5b6000614806878288016143f3565b9450506020614817878288016146b2565b935050604085013567ffffffffffffffff811115614838576148376158b8565b5b6148448782880161448e565b925092505092959194509250565b60008060006060848603121561486b5761486a6158bd565b5b6000614879868287016143f3565b935050602061488a868287016146b2565b925050604061489b868287016146b2565b9150509250925092565b600080600080608085870312156148bf576148be6158bd565b5b600085013567ffffffffffffffff8111156148dd576148dc6158b8565b5b6148e98782880161441d565b94505060206148fa878288016146b2565b935050604061490b878288016146b2565b925050606061491c878288016146b2565b91505092959194509250565b6000806040838503121561493f5761493e6158bd565b5b600083013567ffffffffffffffff81111561495d5761495c6158b8565b5b6149698582860161444b565b925050602061497a858286016146b2565b9150509250929050565b60008060008060008061010087890312156149a2576149a16158bd565b5b600087013567ffffffffffffffff8111156149c0576149bf6158b8565b5b6149cc89828a0161444b565b96505060206149dd89828a016146b2565b95505060406149ee89828a016146b2565b94505060606149ff89828a016146b2565b9350506080614a1089828a016146b2565b92505060a0614a2189828a01614585565b9150509295509295509295565b600060208284031215614a4457614a436158bd565b5b6000614a5284828501614479565b91505092915050565b600060208284031215614a7157614a706158bd565b5b6000614a7f848285016144e4565b91505092915050565b600060e08284031215614a9e57614a9d6158bd565b5b6000614aac848285016144f9565b91505092915050565b600060208284031215614acb57614aca6158bd565b5b6000614ad9848285016146b2565b91505092915050565b600060208284031215614af857614af76158bd565b5b6000614b06848285016146c7565b91505092915050565b60008060408385031215614b2657614b256158bd565b5b6000614b34858286016146b2565b9250506020614b45858286016146b2565b9150509250929050565b600080600060608486031215614b6857614b676158bd565b5b6000614b76868287016146b2565b9350506020614b87868287016146b2565b9250506040614b98868287016146b2565b9150509250925092565b600080600080600060e08688031215614bbe57614bbd6158bd565b5b6000614bcc888289016146b2565b9550506020614bdd888289016146b2565b9450506040614bee888289016146b2565b9350506060614bff888289016146b2565b9250506080614c1088828901614585565b9150509295509295909350565b60008060008060008060a08789031215614c3a57614c396158bd565b5b6000614c4889828a016146dc565b9650506020614c5989828a016143f3565b9550506040614c6a89828a016143f3565b9450506060614c7b89828a0161469d565b935050608087013567ffffffffffffffff811115614c9c57614c9b6158b8565b5b614ca889828a0161448e565b92509250509295509295509295565b6000614cc38383615060565b60608301905092915050565b6000614cdb83836150a2565b60408301905092915050565b614cf081615616565b82525050565b614cff81615616565b82525050565b6000614d1082615477565b614d1a81856154b2565b9350614d2583615457565b8060005b83811015614d56578151614d3d8882614cb7565b9750614d4883615498565b925050600181019050614d29565b5085935050505092915050565b6000614d6e82615482565b614d7881856154c3565b9350614d8383615467565b8060005b83811015614db4578151614d9b8882614ccf565b9750614da6836154a5565b925050600181019050614d87565b5085935050505092915050565b614dca81615628565b82525050565b6000614ddc83856154d4565b9350614de983858461569f565b614df2836158c2565b840190509392505050565b6000614e088261548d565b614e1281856154d4565b9350614e228185602086016156ae565b614e2b816158c2565b840191505092915050565b6000614e418261548d565b614e4b81856154e5565b9350614e5b8185602086016156ae565b80840191505092915050565b614e708161568d565b82525050565b6000614e836026836154f0565b9150614e8e826158d3565b604082019050919050565b6000614ea66031836154f0565b9150614eb182615922565b604082019050919050565b6000614ec9602e836154f0565b9150614ed482615971565b604082019050919050565b6000614eec6020836154f0565b9150614ef7826159c0565b602082019050919050565b600061016083016000830151614f1b6000860182614ce7565b506020830151614f2e6020860182614ce7565b506040830151614f416040860182614ce7565b506060830151614f54606086018261501e565b506080830151614f6760c086018261510e565b5060a0830151614f7a60e086018261510e565b5060c0830151614f8e61010086018261510e565b5060e0830151614fa261012086018261510e565b50610100830151848203610140860152614fbc8282614d05565b9150508091505092915050565b608082016000820151614fdf600085018261510e565b506020820151614ff2602085018261510e565b506040820151615005604085018261510e565b506060820151615018606085018261510e565b50505050565b606082016000820151615034600085018261510e565b506020820151615047602085018261510e565b50604082015161505a604085018261510e565b50505050565b606082016000820151615076600085018261510e565b506020820151615089602085018261510e565b50604082015161509c604085018261510e565b50505050565b6040820160008201516150b8600085018261510e565b5060208201516150cb602085018261510e565b50505050565b60006040830160008301516150e9600086018261510e565b50602083015184820360208601526151018282614d63565b9150508091505092915050565b61511781615662565b82525050565b61512681615662565b82525050565b6151358161566c565b82525050565b60006151478284614e36565b915081905092915050565b60006020820190506151676000830184614cf6565b92915050565b60006040820190506151826000830185614cf6565b61518f6020830184614cf6565b9392505050565b60006060820190506151ab6000830186614cf6565b6151b86020830185614cf6565b6151c5604083018461511d565b949350505050565b60006040820190506151e26000830185614cf6565b6151ef602083018461511d565b9392505050565b600060608201905061520b6000830187614cf6565b615218602083018661511d565b818103604083015261522b818486614dd0565b905095945050505050565b600060408201905061524b6000830185614cf6565b615258602083018461512c565b9392505050565b60006020820190506152746000830184614dc1565b92915050565b600060208201905081810360008301526152948184614dfd565b905092915050565b60006020820190506152b16000830184614e67565b92915050565b600060208201905081810360008301526152d081614e76565b9050919050565b600060208201905081810360008301526152f081614e99565b9050919050565b6000602082019050818103600083015261531081614ebc565b9050919050565b6000602082019050818103600083015261533081614edf565b9050919050565b600060208201905081810360008301526153518184614f02565b905092915050565b600060808201905061536e6000830184614fc9565b92915050565b6000602082019050818103600083015261538e81846150d1565b905092915050565b60006020820190506153ab600083018461511d565b92915050565b60006040820190506153c6600083018561511d565b6153d3602083018461511d565b9392505050565b60006153e46153f5565b90506153f082826156e1565b919050565b6000604051905090565b600067ffffffffffffffff82111561541a57615419615875565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561544657615445615875565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061550c82615662565b915061551783615662565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561554c5761554b61578a565b5b828201905092915050565b600061556282615662565b915061556d83615662565b92508261557d5761557c6157b9565b5b828204905092915050565b600061559382615662565b915061559e83615662565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156155d7576155d661578a565b5b828202905092915050565b60006155ed82615662565b91506155f883615662565b92508282101561560b5761560a61578a565b5b828203905092915050565b600061562182615642565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061569882615680565b9050919050565b82818337600083830152505050565b60005b838110156156cc5780820151818401526020810190506156b1565b838111156156db576000848401525b50505050565b6156ea826158c2565b810181811067ffffffffffffffff8211171561570957615708615875565b5b80604052505050565b600061571d82615662565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156157505761574f61578a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6159f281615616565b81146159fd57600080fd5b50565b615a0981615628565b8114615a1457600080fd5b50565b60048110615a2457600080fd5b50565b615a3081615634565b8114615a3b57600080fd5b50565b615a4781615662565b8114615a5257600080fd5b50565b615a5e8161566c565b8114615a6957600080fd5b5056fea2646970667358221220f52fdac4c6f1119eec3334b9880ceaa70402a24d10e1909e31e89f39d6d5f16664736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027d5760003560e01c8063785614351161015c578063a65e2cfd116100ce578063c85dd02511610087578063c85dd025146107fc578063ce1001291461081a578063e2bb9c0f14610838578063e2c0042314610856578063f2fde38b14610886578063f9039437146108a25761027d565b8063a65e2cfd14610728578063a9526fae14610744578063b0ccbf8c14610774578063b3173f9f1461077e578063bf86d690146107ae578063c7edd766146107cc5761027d565b80638531a636116101205780638531a636146106405780638539a69a1461065e5780638da5cb5b1461068e5780638e0ef636146106ac57806398322ab2146106c857806399493c51146106f85761027d565b80637856143514610576578063785b5479146105a65780637985cf56146105d65780637df98acf146106065780638382840c146106105761027d565b80634dd878d9116101f5578063643cd878116101b9578063643cd878146104d85780636471aadb146104f6578063664ab18e1461051257806371406a3214610530578063715018a61461054e578063766f13bc146105585761027d565b80634dd878d91461040c578063544736e61461043c57806356360f711461045a5780635d0cde971461048a57806364219450146104a85761027d565b80630b2c5c14116102475780630b2c5c14146103385780632857edd4146103565780632ee0b2bc146103865780633e12170f146103a257806342c026c7146103be578063438cae7e146103ee5761027d565b80623f07fa146102825780624414df146102b257806301210a18146102d05780630513247b146102ec5780630670fafd14610308575b600080fd5b61029c600480360381019061029791906146f1565b6108be565b6040516102a9919061525f565b60405180910390f35b6102ba610a63565b6040516102c79190615396565b60405180910390f35b6102ea60048036038101906102e59190614c1d565b610a73565b005b610306600480360381019061030191906146f1565b610eb5565b005b610322600480360381019061031d9190614852565b610fbd565b60405161032f9190615396565b60405180910390f35b6103406110c2565b60405161034d9190615396565b60405180910390f35b610370600480360381019061036b9190614928565b6110c9565b60405161037d9190615396565b60405180910390f35b6103a0600480360381019061039b91906146f1565b61113d565b005b6103bc60048036038101906103b791906147de565b611245565b005b6103d860048036038101906103d39190614ab5565b6114c9565b6040516103e59190615396565b60405180910390f35b6103f661151f565b604051610403919061525f565b60405180910390f35b61042660048036038101906104219190614ab5565b6115c6565b6040516104339190615152565b60405180910390f35b6104446115e3565b604051610451919061525f565b60405180910390f35b610474600480360381019061046f91906146f1565b6116b1565b6040516104819190615374565b60405180910390f35b610492611787565b60405161049f9190615396565b60405180910390f35b6104c260048036038101906104bd91906146f1565b61178c565b6040516104cf919061525f565b60405180910390f35b6104e061186e565b6040516104ed9190615396565b60405180910390f35b610510600480360381019061050b91906147de565b61187f565b005b61051a6120f0565b604051610527919061525f565b60405180910390f35b610538612197565b6040516105459190615396565b60405180910390f35b61055661219c565b005b610560612224565b60405161056d9190615152565b60405180910390f35b610590600480360381019061058b91906146f1565b6122cb565b60405161059d9190615396565b60405180910390f35b6105c060048036038101906105bb91906146f1565b6122de565b6040516105cd9190615396565b60405180910390f35b6105f060048036038101906105eb919061479e565b612421565b6040516105fd9190615396565b60405180910390f35b61060e612567565b005b61062a60048036038101906106259190614ba2565b6125f3565b6040516106379190615396565b60405180910390f35b610648612726565b6040516106559190615152565b60405180910390f35b61067860048036038101906106739190614b4f565b612750565b6040516106859190615396565b60405180910390f35b610696612785565b6040516106a39190615152565b60405180910390f35b6106c660048036038101906106c191906146f1565b6127ae565b005b6106e260048036038101906106dd919061479e565b6128d9565b6040516106ef9190615396565b60405180910390f35b610712600480360381019061070d9190614ab5565b6129db565b60405161071f9190615152565b60405180910390f35b610742600480360381019061073d9190614b0f565b6129f8565b005b61075e6004803603810190610759919061479e565b612dac565b60405161076b9190615396565b60405180910390f35b61077c612e6b565b005b610798600480360381019061079391906148a5565b61304e565b6040516107a59190615396565b60405180910390f35b6107b6613186565b6040516107c3919061525f565b60405180910390f35b6107e660048036038101906107e19190614984565b61322d565b6040516107f39190615359565b60405180910390f35b6108046133c8565b6040516108119190615337565b60405180910390f35b6108226135bc565b60405161082f9190615396565b60405180910390f35b6108406135cc565b60405161084d9190615396565b60405180910390f35b610870600480360381019061086b9190614ab5565b6135dd565b60405161087d9190615396565b60405180910390f35b6108a0600480360381019061089b91906146f1565b613745565b005b6108bc60048036038101906108b7919061474b565b61383d565b005b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156109295750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156109865750600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156109e35750600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015610a3f57506002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b8015610a5c5750610a5a82600e613a4e90919063ffffffff16565b155b9050919050565b6000610a6e426114c9565b905090565b6000610a7f6001613a7e565b90508015610aa3576001600060156101000a81548160ff0219169083151502179055505b60008383810190610ab49190614a88565b905085601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601260146101000a81548161ffff021916908361ffff1602179055508060800151602001518160800151600001511115610b5e576040517f18084af300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160800151604001511415610ba1576040517f8c648c8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816020015173ffffffffffffffffffffffffffffffffffffffff1663cf5ba53f898b604051602001610bd6929190615236565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610c01919061527a565b602060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c53919061471e565b90506000826000015173ffffffffffffffffffffffffffffffffffffffff1663cf5ba53f83604051602001610c889190615152565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610cb3919061527a565b602060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061471e565b9050610d1033613b71565b610d1982613c35565b8260400151600260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260600151600260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826080015160026003016000820151816000015560208201518160010155604082015181600201559050507f9848123ba141e26644059f3993427b10fe045ef81a9f876a081652b36fe85f0b8183604051610e4892919061516d565b60405180910390a15050508015610eac5760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ea3919061529c565b60405180910390a15b50505050505050565b610ebd613c79565b73ffffffffffffffffffffffffffffffffffffffff16610edb612785565b73ffffffffffffffffffffffffffffffffffffffff1614610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890615317565b60405180910390fd5b610f39613c81565b610f4d816010613cc190919063ffffffff16565b610f83576040517f1a8a3d2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f040b321f0ccd1b9d7890282c99da1d97cbf2de30c3af0782aba31fbd9528324381604051610fb29190615152565b60405180910390a150565b60006110b5600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561106a57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611024565b5050505084611078856135dd565b611081866114c9565b866002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b6040015190509392505050565b620f424081565b6000805b83518110156111365760008482815181106110eb576110ea615846565b5b60200260200101519050600061110a8260000151836020015187612750565b905061111f8185613cf190919063ffffffff16565b93505050808061112e90615712565b9150506110cd565b5092915050565b611145613c79565b73ffffffffffffffffffffffffffffffffffffffff16611163612785565b73ffffffffffffffffffffffffffffffffffffffff16146111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b090615317565b60405180910390fd5b6111c1613c81565b6111d5816010613d0790919063ffffffff16565b61120b576040517f49d8266e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f059b5054f04b000050b3cbdf0ad2d8bce0dfca886836a4742ab837cc948cd1af8160405161123a9190615152565b60405180910390a150565b61124d613d37565b611255613d77565b61125e8461178c565b611294576040517fd03a632000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008314156112cf576040517f7e6e0ea900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050601e816001018054905010611353576040517f1846ef1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61135b613db7565b806001016040518060400160405280868152602001428152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506113ca848260000154613cf190919063ffffffff16565b81600001819055506113ea84600260070154613cf190919063ffffffff16565b6002600701819055508473ffffffffffffffffffffffffffffffffffffffff1663c792f45d600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168686866040518563ffffffff1660e01b815260040161145794939291906151f6565b600060405180830381600087803b15801561147157600080fd5b505af1158015611485573d6000803e3d6000fd5b505050507f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d85856040516114ba9291906151cd565b60405180910390a15050505050565b60006002600901548214156114e557600260080154905061151a565b60006114fc60026007015460026009015485612750565b905061151681600260080154613cf190919063ffffffff16565b9150505b919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663438cae7e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c19190614a2e565b905090565b60006115dc82600e613dd490919063ffffffff16565b9050919050565b60006003808111156115f8576115f76157e8565b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e69d5606040518163ffffffff1660e01b815260040160206040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190614a5b565b60038111156116aa576116a96157e8565b5b1415905090565b6116b96141d1565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561177857838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611732565b50505050815250509050919050565b603281565b600080600090505b61179e6010613dee565b811015611863576117b9816010613dd490919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16636b44e6be846040518263ffffffff1660e01b81526004016117f19190615152565b60206040518083038186803b15801561180957600080fd5b505afa15801561181d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118419190614a2e565b15611850576001915050611869565b808061185b90615712565b915050611794565b50600090505b919050565b600061187a6010613dee565b905090565b611887613d37565b61188f613d77565b6000600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600084141561190d576040517fb6bea6a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838160000154101561194b576040517f16bdadd300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360026007015410156119615761196061575b565b5b611969613db7565b6000600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016119ed9190615152565b60206040518083038186803b158015611a0557600080fd5b505afa158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d9190614ae2565b90506000611aca6002600a01805480602002602001604051908101604052809291908181526020016000905b82821015611ab95783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611a69565b50505050836002600601544261304e565b90506000611b7b84600101805480602002602001604051908101604052809291908181526020016000905b82821015611b3b57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611af5565b505050508884600260080154426002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b9050600081602001511415611b9f57836001016000611b9a91906141eb565b611c4b565b5b806020015184600101805490501115611bf55783600101805480611bc757611bc6615817565b5b6001900381819060005260206000209060020201600080820160009055600182016000905550509055611ba0565b600081600001511115611c4a57806000015184600101611c2360018460200151613e0390919063ffffffff16565b81548110611c3457611c33615846565b5b9060005260206000209060020201600001819055505b5b611c62878560000154613e0390919063ffffffff16565b8460000181905550611c8287600260070154613e0390919063ffffffff16565b60026007018190555080606001516002600801819055508773ffffffffffffffffffffffffffffffffffffffff1663abee0803600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168989896040518563ffffffff1660e01b8152600401611cfd94939291906151f6565b600060405180830381600087803b158015611d1757600080fd5b505af1158015611d2b573d6000803e3d6000fd5b505050507f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758888604051611d609291906151cd565b60405180910390a16000816040015111156120e6576000611da584611d978460400151600260060154613e1990919063ffffffff16565b613e2f90919063ffffffff16565b9050611dbf81600260060154613e0390919063ffffffff16565b6002600601819055506000611dd4600e613dee565b1115611fc45760005b611de7600e613dee565b811015611fc2576000611e0482600e613dd490919063ffffffff16565b90506000611edd87611ecf87604001518573ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611e719190615152565b60206040518083038186803b158015611e8957600080fd5b505afa158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec19190614ae2565b613e1990919063ffffffff16565b613e2f90919063ffffffff16565b90506002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f975a64838e846040518463ffffffff1660e01b8152600401611f4093929190615196565b600060405180830381600087803b158015611f5a57600080fd5b505af1158015611f6e573d6000803e3d6000fd5b505050507f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b78c8383604051611fa593929190615196565b60405180910390a150508080611fba90615712565b915050611ddd565b505b6002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f975a64600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b85604001516040518463ffffffff1660e01b815260040161204e93929190615196565b600060405180830381600087803b15801561206857600080fd5b505af115801561207c573d6000803e3d6000fd5b505050507f0aa4d283470c904c551d18bb894d37e17674920f3261a7f854be501e25f421b789600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684604001516040516120dc93929190615196565b60405180910390a1505b5050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663664ab18e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215a57600080fd5b505afa15801561216e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121929190614a2e565b905090565b601e81565b6121a4613c79565b73ffffffffffffffffffffffffffffffffffffffff166121c2612785565b73ffffffffffffffffffffffffffffffffffffffff1614612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220f90615317565b60405180910390fd5b6122226000613b71565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663766f13bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561228e57600080fd5b505afa1580156122a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c6919061471e565b905090565b60006122d78242612dac565b9050919050565b6000612416600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561238b57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612345565b50505050600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546123da6135bc565b6123e2610a63565b426002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b604001519050919050565b600061255b600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156124ce57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612488565b50505050600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461251e856135dd565b612527866114c9565b866002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b60400151905092915050565b60006125736001613a7e565b90508015612597576001600060156101000a81548160ff0219169083151502179055505b80156125f05760008060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516125e7919061529c565b60405180910390a15b50565b6000806126098587613e1990919063ffffffff16565b9050600080851461263c576126398561262b848b613e1990919063ffffffff16565b613e2f90919063ffffffff16565b90505b836040015186101580612656575083602001518460000151145b156126635780925061271b565b60006126928560200151612684876000015185613e1990919063ffffffff16565b613e2f90919063ffffffff16565b9050600061270186604001516126f388602001516126e56126c48b600001518c60200151613e0390919063ffffffff16565b6126d78e8a613e1990919063ffffffff16565b613e1990919063ffffffff16565b613e2f90919063ffffffff16565b613e2f90919063ffffffff16565b90506127168183613cf190919063ffffffff16565b945050505b505095945050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806127668484613e0390919063ffffffff16565b905061277b8582613e1990919063ffffffff16565b9150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6127b6613c79565b73ffffffffffffffffffffffffffffffffffffffff166127d4612785565b73ffffffffffffffffffffffffffffffffffffffff161461282a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282190615317565b60405180910390fd5b612832613d37565b61283b81613e45565b6032612847600e613dee565b1061287e576040517fd3f5862600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61289281600e613d0790919063ffffffff16565b61289f5761289e61575b565b5b7fbca954c637e20d265d501f3c0c9d0df1440001376c36ac73bd296c1a628f528c816040516128ce9190615152565b60405180910390a150565b60006129cf600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561298657838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612940565b50505050836129936135bc565b61299b610a63565b426002600301604051806060016040529081600082015481526020016001820154815260200160028201548152505061322d565b60400151905092915050565b60006129f1826010613dd490919063ffffffff16565b9050919050565b612a00613c79565b73ffffffffffffffffffffffffffffffffffffffff16612a1e612785565b73ffffffffffffffffffffffffffffffffffffffff1614612a74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6b90615317565b60405180910390fd5b612a7c613d37565b6000811415612ab7576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612af4612710612ae6601260149054906101000a900461ffff1661ffff1686613e1990919063ffffffff16565b613e2f90919063ffffffff16565b9050612b098184613e0390919063ffffffff16565b9250612b5e600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613e92565b6000806002600601541115612c75576000600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401612bf19190615152565b60206040518083038186803b158015612c0957600080fd5b505afa158015612c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c419190614ae2565b9050612c6d81612c5f87600260060154613e1990919063ffffffff16565b613e2f90919063ffffffff16565b915050612c8e565b612c8b620f424085613e1990919063ffffffff16565b90505b612ca681600260060154613cf190919063ffffffff16565b6002600601819055506002600a0160405180606001604052808581526020014281526020018381525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010155604082015181600201555050612d6d600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687613e92565b7fd1652c5efcfb913fe86636bfe9bb19ebb9dd32519e48bb69ffc880e5c2637e1d8484604051612d9e9291906153b1565b60405180910390a150505050565b6000612e63600d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015612e5957838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612e13565b50505050836110c9565b905092915050565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101805490501415612ef0576040517fb36e4e6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ef8613db7565b7f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75338260000154604051612f2d9291906151cd565b60405180910390a1612f518160000154600260070154613e0390919063ffffffff16565b600260070181905550612fe8612fd482600101805480602002602001604051908101604052809291908181526020016000905b82821015612fca57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190612f84565b50505050426110c9565b600260080154613e0390919063ffffffff16565b600260080181905550600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061304991906141eb565b505050565b60008085511415613062576000905061317e565b600080600090505b865181101561313c57600087828151811061308857613087615846565b5b60200260200101519050600081600001516130b0836020015188613e0390919063ffffffff16565b10156131125761310f6130fc83600001516130ee6130db86602001518b613e0390919063ffffffff16565b8660400151613e1990919063ffffffff16565b613e2f90919063ffffffff16565b8360400151613e0390919063ffffffff16565b90505b6131258185613cf190919063ffffffff16565b93505050808061313490615712565b91505061306a565b506000613164856131568885613e1990919063ffffffff16565b613e2f90919063ffffffff16565b90506131798187613e0390919063ffffffff16565b925050505b949350505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b815260040160206040518083038186803b1580156131f057600080fd5b505afa158015613204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132289190614a2e565b905090565b61323561420f565b60005b600087111561337f5760008861326b600161325d858d51613e0390919063ffffffff16565b613e0390919063ffffffff16565b8151811061327c5761327b615846565b5b60200260200101519050600061329f826020015187613e0390919063ffffffff16565b9050600089836000015111156132d7578990506132c98a8460000151613e0390919063ffffffff16565b8560000181815250506132ee565b826000015190506001846132eb9190615501565b93505b613301818b613e0390919063ffffffff16565b995060006133128a83858c8b6125f3565b905061332b818760400151613cf190919063ffffffff16565b866040018181525050613347818b613e0390919063ffffffff16565b9950600061335e8484613e1990919063ffffffff16565b9050613373818b613e0390919063ffffffff16565b99505050505050613238565b6040518060800160405280836000015181526020016133a8838b51613e0390919063ffffffff16565b815260200183604001518152602001868152509150509695505050505050565b6133d0614237565b6002604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201805480602002602001604051908101604052809291908181526020016000905b828210156135af578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061355f565b5050505081525050905090565b60006135c7426135dd565b905090565b60006135d8600e613dee565b905090565b600080600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016136629190615152565b60206040518083038186803b15801561367a57600080fd5b505afa15801561368e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b29190614ae2565b905061373d6002600a01805480602002602001604051908101604052809291908181526020016000905b8282101561372c57838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906136dc565b50505050826002600601548661304e565b915050919050565b61374d613c79565b73ffffffffffffffffffffffffffffffffffffffff1661376b612785565b73ffffffffffffffffffffffffffffffffffffffff16146137c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137b890615317565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613828906152b7565b60405180910390fd5b61383a81613b71565b50565b613845613c79565b73ffffffffffffffffffffffffffffffffffffffff16613863612785565b73ffffffffffffffffffffffffffffffffffffffff16146138b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138b090615317565b60405180910390fd5b6138c1613d37565b6138ca82613e45565b600260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561396057826040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016139579190615152565b60405180910390fd5b61397483600e613a4e90919063ffffffff16565b156139b657826040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016139ad9190615152565b60405180910390fd5b6002800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f975a648484846040518463ffffffff1660e01b8152600401613a1793929190615196565b600060405180830381600087803b158015613a3157600080fd5b505af1158015613a45573d6000803e3d6000fd5b50505050505050565b6000613a76836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613fcb565b905092915050565b60008060159054906101000a900460ff1615613af55760018260ff16148015613aad5750613aab30613fee565b155b613aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ae3906152f7565b60405180910390fd5b60009050613b6c565b8160ff16600060149054906101000a900460ff1660ff1610613b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b43906152f7565b60405180910390fd5b81600060146101000a81548160ff021916908360ff160217905550600190505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b613c89613186565b15613cbf576040517e89a30f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000613ce9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614011565b905092915050565b60008183613cff9190615501565b905092915050565b6000613d2f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b614125565b905092915050565b613d3f6120f0565b613d75576040517f7ff2ee0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613d7f6115e3565b613db5576040517f71dd7a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613dbf610a63565b60026008018190555042600260090181905550565b6000613de38360000183614195565b60001c905092915050565b6000613dfc826000016141c0565b9050919050565b60008183613e1191906155e2565b905092915050565b60008183613e279190615588565b905092915050565b60008183613e3d9190615557565b905092915050565b613e4e816108be565b613e8f57806040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401613e869190615152565b60405180910390fd5b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613ec693929190615196565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613f14919061513b565b6000604051808303816000865af19150503d8060008114613f51576040519150601f19603f3d011682016040523d82523d6000602084013e613f56565b606091505b5091509150818015613f845750600081511480613f83575080806020019051810190613f829190614a2e565b5b5b613fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fba906152d7565b60405180910390fd5b505050505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000808360010160008481526020019081526020016000205490506000811461411957600060018261404391906155e2565b905060006001866000018054905061405b91906155e2565b90508181146140ca57600086600001828154811061407c5761407b615846565b5b90600052602060002001549050808760000184815481106140a05761409f615846565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806140de576140dd615817565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061411f565b60009150505b92915050565b60006141318383613fcb565b61418a57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061418f565b600090505b92915050565b60008260000182815481106141ad576141ac615846565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b604051806040016040528060008152602001606081525090565b508054600082556002029060005260206000209081019061420c91906142cb565b50565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016142a26142f2565b815260200160008152602001600081526020016000815260200160008152602001606081525090565b5b808211156142ee576000808201600090556001820160009055506002016142cc565b5090565b60405180606001604052806000815260200160008152602001600081525090565b6000614326614321846153ff565b6153da565b90508083825260208201905082856060860282011115614349576143486158b3565b5b60005b85811015614379578161435f88826145e9565b84526020840193506060830192505060018101905061434c565b5050509392505050565b60006143966143918461542b565b6153da565b905080838252602082019050828560408602820111156143b9576143b86158b3565b5b60005b858110156143e957816143cf888261464d565b8452602084019350604083019250506001810190506143bc565b5050509392505050565b600081359050614402816159e9565b92915050565b600081519050614417816159e9565b92915050565b600082601f830112614432576144316158a9565b5b8135614442848260208601614313565b91505092915050565b600082601f8301126144605761445f6158a9565b5b8135614470848260208601614383565b91505092915050565b60008151905061448881615a00565b92915050565b60008083601f8401126144a4576144a36158a9565b5b8235905067ffffffffffffffff8111156144c1576144c06158a4565b5b6020830191508360018202830111156144dd576144dc6158b3565b5b9250929050565b6000815190506144f381615a17565b92915050565b600060e0828403121561450f5761450e6158ae565b5b61451960a06153da565b90506000614529848285016143f3565b600083015250602061453d848285016143f3565b6020830152506040614551848285016143f3565b6040830152506060614565848285016143f3565b606083015250608061457984828501614585565b60808301525092915050565b60006060828403121561459b5761459a6158ae565b5b6145a560606153da565b905060006145b5848285016146b2565b60008301525060206145c9848285016146b2565b60208301525060406145dd848285016146b2565b60408301525092915050565b6000606082840312156145ff576145fe6158ae565b5b61460960606153da565b90506000614619848285016146b2565b600083015250602061462d848285016146b2565b6020830152506040614641848285016146b2565b60408301525092915050565b600060408284031215614663576146626158ae565b5b61466d60406153da565b9050600061467d848285016146b2565b6000830152506020614691848285016146b2565b60208301525092915050565b6000813590506146ac81615a27565b92915050565b6000813590506146c181615a3e565b92915050565b6000815190506146d681615a3e565b92915050565b6000813590506146eb81615a55565b92915050565b600060208284031215614707576147066158bd565b5b6000614715848285016143f3565b91505092915050565b600060208284031215614734576147336158bd565b5b600061474284828501614408565b91505092915050565b600080600060608486031215614764576147636158bd565b5b6000614772868287016143f3565b9350506020614783868287016143f3565b9250506040614794868287016146b2565b9150509250925092565b600080604083850312156147b5576147b46158bd565b5b60006147c3858286016143f3565b92505060206147d4858286016146b2565b9150509250929050565b600080600080606085870312156147f8576147f76158bd565b5b6000614806878288016143f3565b9450506020614817878288016146b2565b935050604085013567ffffffffffffffff811115614838576148376158b8565b5b6148448782880161448e565b925092505092959194509250565b60008060006060848603121561486b5761486a6158bd565b5b6000614879868287016143f3565b935050602061488a868287016146b2565b925050604061489b868287016146b2565b9150509250925092565b600080600080608085870312156148bf576148be6158bd565b5b600085013567ffffffffffffffff8111156148dd576148dc6158b8565b5b6148e98782880161441d565b94505060206148fa878288016146b2565b935050604061490b878288016146b2565b925050606061491c878288016146b2565b91505092959194509250565b6000806040838503121561493f5761493e6158bd565b5b600083013567ffffffffffffffff81111561495d5761495c6158b8565b5b6149698582860161444b565b925050602061497a858286016146b2565b9150509250929050565b60008060008060008061010087890312156149a2576149a16158bd565b5b600087013567ffffffffffffffff8111156149c0576149bf6158b8565b5b6149cc89828a0161444b565b96505060206149dd89828a016146b2565b95505060406149ee89828a016146b2565b94505060606149ff89828a016146b2565b9350506080614a1089828a016146b2565b92505060a0614a2189828a01614585565b9150509295509295509295565b600060208284031215614a4457614a436158bd565b5b6000614a5284828501614479565b91505092915050565b600060208284031215614a7157614a706158bd565b5b6000614a7f848285016144e4565b91505092915050565b600060e08284031215614a9e57614a9d6158bd565b5b6000614aac848285016144f9565b91505092915050565b600060208284031215614acb57614aca6158bd565b5b6000614ad9848285016146b2565b91505092915050565b600060208284031215614af857614af76158bd565b5b6000614b06848285016146c7565b91505092915050565b60008060408385031215614b2657614b256158bd565b5b6000614b34858286016146b2565b9250506020614b45858286016146b2565b9150509250929050565b600080600060608486031215614b6857614b676158bd565b5b6000614b76868287016146b2565b9350506020614b87868287016146b2565b9250506040614b98868287016146b2565b9150509250925092565b600080600080600060e08688031215614bbe57614bbd6158bd565b5b6000614bcc888289016146b2565b9550506020614bdd888289016146b2565b9450506040614bee888289016146b2565b9350506060614bff888289016146b2565b9250506080614c1088828901614585565b9150509295509295909350565b60008060008060008060a08789031215614c3a57614c396158bd565b5b6000614c4889828a016146dc565b9650506020614c5989828a016143f3565b9550506040614c6a89828a016143f3565b9450506060614c7b89828a0161469d565b935050608087013567ffffffffffffffff811115614c9c57614c9b6158b8565b5b614ca889828a0161448e565b92509250509295509295509295565b6000614cc38383615060565b60608301905092915050565b6000614cdb83836150a2565b60408301905092915050565b614cf081615616565b82525050565b614cff81615616565b82525050565b6000614d1082615477565b614d1a81856154b2565b9350614d2583615457565b8060005b83811015614d56578151614d3d8882614cb7565b9750614d4883615498565b925050600181019050614d29565b5085935050505092915050565b6000614d6e82615482565b614d7881856154c3565b9350614d8383615467565b8060005b83811015614db4578151614d9b8882614ccf565b9750614da6836154a5565b925050600181019050614d87565b5085935050505092915050565b614dca81615628565b82525050565b6000614ddc83856154d4565b9350614de983858461569f565b614df2836158c2565b840190509392505050565b6000614e088261548d565b614e1281856154d4565b9350614e228185602086016156ae565b614e2b816158c2565b840191505092915050565b6000614e418261548d565b614e4b81856154e5565b9350614e5b8185602086016156ae565b80840191505092915050565b614e708161568d565b82525050565b6000614e836026836154f0565b9150614e8e826158d3565b604082019050919050565b6000614ea66031836154f0565b9150614eb182615922565b604082019050919050565b6000614ec9602e836154f0565b9150614ed482615971565b604082019050919050565b6000614eec6020836154f0565b9150614ef7826159c0565b602082019050919050565b600061016083016000830151614f1b6000860182614ce7565b506020830151614f2e6020860182614ce7565b506040830151614f416040860182614ce7565b506060830151614f54606086018261501e565b506080830151614f6760c086018261510e565b5060a0830151614f7a60e086018261510e565b5060c0830151614f8e61010086018261510e565b5060e0830151614fa261012086018261510e565b50610100830151848203610140860152614fbc8282614d05565b9150508091505092915050565b608082016000820151614fdf600085018261510e565b506020820151614ff2602085018261510e565b506040820151615005604085018261510e565b506060820151615018606085018261510e565b50505050565b606082016000820151615034600085018261510e565b506020820151615047602085018261510e565b50604082015161505a604085018261510e565b50505050565b606082016000820151615076600085018261510e565b506020820151615089602085018261510e565b50604082015161509c604085018261510e565b50505050565b6040820160008201516150b8600085018261510e565b5060208201516150cb602085018261510e565b50505050565b60006040830160008301516150e9600086018261510e565b50602083015184820360208601526151018282614d63565b9150508091505092915050565b61511781615662565b82525050565b61512681615662565b82525050565b6151358161566c565b82525050565b60006151478284614e36565b915081905092915050565b60006020820190506151676000830184614cf6565b92915050565b60006040820190506151826000830185614cf6565b61518f6020830184614cf6565b9392505050565b60006060820190506151ab6000830186614cf6565b6151b86020830185614cf6565b6151c5604083018461511d565b949350505050565b60006040820190506151e26000830185614cf6565b6151ef602083018461511d565b9392505050565b600060608201905061520b6000830187614cf6565b615218602083018661511d565b818103604083015261522b818486614dd0565b905095945050505050565b600060408201905061524b6000830185614cf6565b615258602083018461512c565b9392505050565b60006020820190506152746000830184614dc1565b92915050565b600060208201905081810360008301526152948184614dfd565b905092915050565b60006020820190506152b16000830184614e67565b92915050565b600060208201905081810360008301526152d081614e76565b9050919050565b600060208201905081810360008301526152f081614e99565b9050919050565b6000602082019050818103600083015261531081614ebc565b9050919050565b6000602082019050818103600083015261533081614edf565b9050919050565b600060208201905081810360008301526153518184614f02565b905092915050565b600060808201905061536e6000830184614fc9565b92915050565b6000602082019050818103600083015261538e81846150d1565b905092915050565b60006020820190506153ab600083018461511d565b92915050565b60006040820190506153c6600083018561511d565b6153d3602083018461511d565b9392505050565b60006153e46153f5565b90506153f082826156e1565b919050565b6000604051905090565b600067ffffffffffffffff82111561541a57615419615875565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561544657615445615875565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061550c82615662565b915061551783615662565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561554c5761554b61578a565b5b828201905092915050565b600061556282615662565b915061556d83615662565b92508261557d5761557c6157b9565b5b828204905092915050565b600061559382615662565b915061559e83615662565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156155d7576155d661578a565b5b828202905092915050565b60006155ed82615662565b91506155f883615662565b92508282101561560b5761560a61578a565b5b828203905092915050565b600061562182615642565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061569882615680565b9050919050565b82818337600083830152505050565b60005b838110156156cc5780820151818401526020810190506156b1565b838111156156db576000848401525b50505050565b6156ea826158c2565b810181811067ffffffffffffffff8211171561570957615708615875565b5b80604052505050565b600061571d82615662565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156157505761574f61578a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6159f281615616565b81146159fd57600080fd5b50565b615a0981615628565b8114615a1457600080fd5b50565b60048110615a2457600080fd5b50565b615a3081615634565b8114615a3b57600080fd5b50565b615a4781615662565b8114615a5257600080fd5b50565b615a5e8161566c565b8114615a6957600080fd5b5056fea2646970667358221220f52fdac4c6f1119eec3334b9880ceaa70402a24d10e1909e31e89f39d6d5f16664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fund(uint256,uint256)": {
        "params": {
          "amount": "uint256 Amount of reward tokens to deposit",
          "duration": "uint256 Duration over which to linearly unlock rewards"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rageQuit()": {
        "details": "This function should never revert when correctly called by the vault.      A max number of stakes per vault is set with MAX_STAKES_PER_VAULT to      place an upper bound on the for loop in calculateTotalStakeUnits(). access control: only callable by the vault directly state machine:   - when vault exists on this Aludel   - when active stake from this vault   - any power state state scope:   - decrease _aludel.totalStake   - increase _aludel.lastUpdate   - modify _aludel.totalStakeUnits   - delete _vaults[vault] token transfer: none"
      },
      "registerBonusToken(address)": {
        "details": "use this function to enable distribution of any ERC20 held by the RewardPool contract access control: only admin state machine:   - can be called multiple times   - only online state scope:   - append to _bonusTokenSet token transfer: none",
        "params": {
          "bonusToken": "address The address of the bonus token"
        }
      },
      "registerVaultFactory(address)": {
        "details": "use this function to enable stakes to vaults coming from the specified      factory contract access control: only admin state machine:   - can be called multiple times   - not shutdown state scope:   - append to _vaultFactorySet token transfer: none",
        "params": {
          "factory": "address The address of the vault factory"
        }
      },
      "removeVaultFactory(address)": {
        "details": "use this function to disable new stakes to vaults coming from the specified      factory contract.      note: vaults with existing stakes from this factory are sill able to unstake access control: only admin state machine:   - can be called multiple times   - not shutdown state scope:   - remove from _vaultFactorySet token transfer: none",
        "params": {
          "factory": "address The address of the vault factory"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueTokensFromRewardPool(address,address,uint256)": {
        "details": "use this function to rescue tokens from RewardPool contract      without distributing to stakers or triggering emergency shutdown access control: only admin state machine:   - can be called multiple times   - only online state scope: none token transfer: transfer requested token from RewardPool to recipient",
        "params": {
          "amount": "uint256 The amount of tokens to rescue",
          "recipient": "address The address of the recipient",
          "token": "address The address of the token to rescue"
        }
      },
      "stake(address,uint256,bytes)": {
        "params": {
          "amount": "uint256 The amount of staking tokens to stake",
          "permission": "bytes The signed lock permission for the universal vault",
          "vault": "address The address of the vault to stake from"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeAndClaim(address,uint256,bytes)": {
        "details": "rewards can only be claimed when unstaking, thus reseting the reward multiplier access control: anyone with a valid permission state machine:   - when vault exists on this Aludel   - after stake from vault   - can be called multiple times while sufficient stake remains   - only online state scope:   - decrease _aludel.rewardSharesOutstanding   - decrease _aludel.totalStake   - increase _aludel.lastUpdate   - modify _aludel.totalStakeUnits   - modify _vaults[vault].stakes   - decrease _vaults[vault].totalStake token transfer:   - transfer reward tokens from reward pool to vault   - transfer bonus tokens from reward pool to vault",
        "params": {
          "amount": "uint256 The amount of staking tokens to unstake",
          "permission": "bytes The signed lock permission for the universal vault",
          "vault": "address The vault to unstake from"
        }
      }
    },
    "title": "Aludel",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund(uint256,uint256)": {
        "notice": "Add funds to the Aludel access control: only admin state machine:   - can be called multiple times   - only online state scope:   - increase _aludel.rewardSharesOutstanding   - append to _aludel.rewardSchedules token transfer: transfer staking tokens from msg.sender to reward pool"
      },
      "initialize(uint64,address,address,uint16,bytes)": {
        "notice": "Initizalize Aludel access control: only proxy constructor state machine: can only be called once state scope: set initialization variables token transfer: none"
      },
      "rageQuit()": {
        "notice": "Exit Aludel without claiming reward"
      },
      "registerBonusToken(address)": {
        "notice": "Register bonus token for distribution"
      },
      "registerVaultFactory(address)": {
        "notice": "Add vault factory to whitelist"
      },
      "removeVaultFactory(address)": {
        "notice": "Remove vault factory from whitelist"
      },
      "rescueTokensFromRewardPool(address,address,uint256)": {
        "notice": "Rescue tokens from RewardPool"
      },
      "stake(address,uint256,bytes)": {
        "notice": "Stake tokens access control: anyone with a valid permission state machine:   - can be called multiple times   - only online   - when vault exists on this Aludel state scope:   - append to _vaults[vault].stakes   - increase _vaults[vault].totalStake   - increase _aludel.totalStake   - increase _aludel.totalStakeUnits   - increase _aludel.lastUpdate token transfer: transfer staking tokens from msg.sender to vault"
      },
      "unstakeAndClaim(address,uint256,bytes)": {
        "notice": "Unstake staking tokens and claim reward"
      }
    },
    "notice": "Reward distribution contract with time multiplier Access Control - Power controller:     Can power off / shutdown the Aludel     Can withdraw rewards from reward pool once shutdown - Aludel admin:     Can add funds to the Aludel, register bonus tokens, and whitelist new vault factories     Is a subset of proxy owner permissions - User:     Can deposit / withdraw / ragequit Aludel State Machine - Online:     Aludel is operating normally, all functions are enabled - Offline:     Aludel is temporarely disabled for maintenance     User deposits and withdrawls are disabled, ragequit remains enabled     Users can withdraw their stake through rageQuit() but forego their pending reward     Should only be used when downtime required for an upgrade - Shutdown:     Aludel is permanently disabled     All functions are disabled with the exception of ragequit     Users can withdraw their stake through rageQuit()     Power controller can withdraw from the reward pool     Should only be used if Proxy Owner role is compromized",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 111,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 114,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17004,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_powerSwitch",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14485,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_aludel",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AludelData)16392_storage"
      },
      {
        "astId": 14490,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_vaults",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(VaultData)16406_storage)"
      },
      {
        "astId": 14493,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_bonusTokenSet",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(AddressSet)2003_storage"
      },
      {
        "astId": 14496,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_vaultFactorySet",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(AddressSet)2003_storage"
      },
      {
        "astId": 14498,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_feeRecipient",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 14500,
        "contract": "src/contracts/aludel/Aludel.sol:Aludel",
        "label": "_feeBps",
        "offset": 20,
        "slot": "18",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardSchedule)16399_storage)dyn_storage": {
        "base": "t_struct(RewardSchedule)16399_storage",
        "encoding": "dynamic_array",
        "label": "struct IAludel.RewardSchedule[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StakeData)16411_storage)dyn_storage": {
        "base": "t_struct(StakeData)16411_storage",
        "encoding": "dynamic_array",
        "label": "struct IAludel.StakeData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(VaultData)16406_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IAludel.VaultData)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultData)16406_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2003_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2002,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1702_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AludelData)16392_storage": {
        "encoding": "inplace",
        "label": "struct IAludel.AludelData",
        "members": [
          {
            "astId": 16372,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "stakingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16374,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "rewardToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16376,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "rewardPool",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16379,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "rewardScaling",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RewardScaling)16418_storage"
          },
          {
            "astId": 16381,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "rewardSharesOutstanding",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16383,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "totalStake",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16385,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "totalStakeUnits",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 16387,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "lastUpdate",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 16391,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "rewardSchedules",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_struct(RewardSchedule)16399_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RewardScaling)16418_storage": {
        "encoding": "inplace",
        "label": "struct IAludel.RewardScaling",
        "members": [
          {
            "astId": 16413,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "floor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16415,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "ceiling",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16417,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "time",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardSchedule)16399_storage": {
        "encoding": "inplace",
        "label": "struct IAludel.RewardSchedule",
        "members": [
          {
            "astId": 16394,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16396,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16398,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "shares",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1702_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1697,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1701,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakeData)16411_storage": {
        "encoding": "inplace",
        "label": "struct IAludel.StakeData",
        "members": [
          {
            "astId": 16408,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16410,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultData)16406_storage": {
        "encoding": "inplace",
        "label": "struct IAludel.VaultData",
        "members": [
          {
            "astId": 16401,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "totalStake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16405,
            "contract": "src/contracts/aludel/Aludel.sol:Aludel",
            "label": "stakes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(StakeData)16411_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}